IEFUJV   TITLE '- IEFUJV - JCL Symbolic Substitution'
*---------------------------------------------------------------------*
*                                                                     *
*        Support Email Address: zOS.JES2@Gmail.com                    *
*                                                                     *
*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*                 |                                                   *
*  I E F U J V    |      Replace "SET" Statement Variables            *
*                 |                                                   *
*-----------------+                                                   *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    Function: Replace Symbols On "SET" Statements With Their         *
*              Appropriate Values.                                    *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    JCL "SET" Statements Will Be Scanned.                            *
*    Any Variable (&Name) Will Be Substituted With It's Appropriate   *
*    Value If The Symbol Is Found To Be Valid.                        *
*                                                                     *
*    Please Terminate Your Symbols With A Period.                     *
*    They Will Work If They Are Terminated By A Blank But It Is       *
*    Best To Use Symbols As They Are Documented By IBM.               *
*                                                                     *
*    Internal Symbols:                                                *
*      &ZDAY.        - DD                                             *
*      &ZDOW.        - WED                                            *
*      &ZJDATE.      - DDD                                            *
*      &ZJOBNAME.    - JOBNAME                                        *
*      &ZJOBID.      - JOB12345 or J1234567                           *
*      &ZMONTH.      - MM                                             *
*      &ZMONTHCH.    - JANUARY                                        *
*      &ZMOY.        - JAN                                            *
*      &ZSMFID.      - SMFI                                           *
*      &ZSTDYEAR.    - CCYY                                           *
*      &ZTIME.       - HHMM                                           *
*      &ZTIMEL.      - HHMMSS                                         *
*      &ZTIMET.      - HHMMSST                                        *
*      &ZWD.         - # - Day Of The Week 1:Monday / 7:Sunday        *
*      &ZWEEKDAY.    - Wednesday                                      *
*      &ZYEAR.       - YY                                             *
*      &ZHH.         - HH                                             *
*      &ZMM.         - MM                                             *
*      &ZSS.         - SS                                             *
*                                                                     *
*      &DDMMYY.      -                                                *
*      &DDMMYYYY.    -                                                *
*      &MMDDYY.      -                                                *
*      &MMDDYYYY.    -                                                *
*      &YYDDD.       - Various Date Formats                           *
*      &YYDDMM.      -                                                *
*      &YYMMDD.      -                                                *
*      &YYYYDDD.     -                                                *
*      &YYYYDDMM.    -                                                *
*      &YYYYMMDD.    -                                                *
*                                                                     *
*      &YYYY/DDD.    - YYYY/DDD                                       *
*      &YYYY*DDD.    - YYYY.DDD                                       *
*                                                                     *
*    System Symbols:                                                  *
*      All Symbols Defined In IEASYMxx                                *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    Addition & Subtraction Are Allowed On Numeric Internal Symbols.  *
*    You Can Code:                                                    *
*         // SET LASTWEEK=&ZJDATE-7.                                  *
*    This Will Give You The Julian Date For One Week Ago From Today.  *
*                                                                     *
*    The Symbol Name Must Be Terminated With A "+" or "-" And The     *
*    Numeric Portion Should Be Terminated With A Period.              *
*    (ie. &YYDDD+1. or &YYDDD-07.)                                    *
*                                                                     *
*    The General Rule For The "Math" Portion Is That The Number Will  *
*    Be In Units Of The Symbol.                                       *
*                                                                     *
*    For Example:                                                     *
*    &DDMMYY.,   &DDMMYYYY., &MMDDYY.,   &MMDDYYYY., &YYDDD.,         *
*    &YYDDMM.,   &YYMMDD.,   &YYYYDDD.,  &YYYYDDMM., &YYYYMMDD.       *
*    &ZDAY.,     &ZDOW.,     &ZJDATE.,   &ZWD.,      &ZWEEKDAY.,      *
*    &YYYY/DDD.  &YYYY*DDD.                                           *
*    Are "Day" Symbols.  The "+" Or "-" Value Will Adjust             *
*    The Symbol By The Specified Number Of Days.                      *
*                                                                     *
*    &STDYEAR.,  &ZYEAR.,                                             *
*    Are "Year" Symbols.  The "+" Or "-" Value Will Adjust            *
*    The Symbol By The Specified Number Of Years.                     *
*                                                                     *
*    &ZMONTH.,   &ZMONTHCH., &ZMOY.,                                  *
*    Are "Month" Symbol. The "+" Or "-" Value Will Adjust             *
*    The Symbol By The Specified Number Of Months.                    *
*                                                                     *
*    &HH., Is An "Hour" Symbol.  The "+" Or "-" Value Will Adjust     *
*    The Symbol By The Specified Number Of Hours.                     *
*                                                                     *
*    &MM., Is A "Minutes" Symbol.  The "+" Or "-" Value Will Adjust   *
*    The Symbol By The Specified Number Of Minutes.                   *
*                                                                     *
*    &SS., Is A "Seconds" Symbol.  The "+" Or "-" Value Will Adjust   *
*    The Symbol By The Specified Number Of Seconds.                   *
*                                                                     *
*    The &ZTIME., &ZTIMEL., &ZTIMET., &ZJOBID., &ZJOBNAME., &ZSMFID.,
*    And IEASYMxx Symbols Will Ignore Any "+" Or "-" Adjustment.      *
*                                                                     *
*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*                                                                     *
*     History: #DD05336 - Dec 2005 - Modeled After CBT File #573      *
*                                    Thanks To Shane Ginnane          *
*              #DD09049 - Feb 2009 - Added &ZWD. & &ZDOW.             *
*              #DD09071 - Mar 2009 - Added &SYM+nnn. And &SYM-nnn.    *
*              #DD09079 - Mar 2009 - Added &YYYY/DDD. symbol          *
*              #DD09118 - Apr 2009 - Added &ZJOBID. symbol            *
*              #DD09183 - Jul 2009 - Added &ZMONTHCH. And &ZMOY.      *
*              #DD14280 - Oct 2014 - Added &YYYY*DDD. symbol          *
*              #DD15062 - Mar 2015 - Corrected Large +/- Processing.  *
*              #DD18023 - Jan 2018 - Corrected Negative Math Value.   *
*                                                                     *
*---------------------------------------------------------------------*

         ACONTROL OPTABLE(ZS3)     Assembly OPTCDE Table
         SPLEVEL  SET=6            Specify OS/390 R2 macro format
         SYSSTATE ARCHLVL=2        Assembly requires z/Architecture
         SYSSTATE OSREL=ZOSV1R13   Assembly requires z/OS 1.13 & higher

*---------------------------------------------------------------------*
*                                                                     *
*        INTERNAL MACROS                                              *
*                                                                     *
*---------------------------------------------------------------------*

         MACRO ,
&NAME    IPROC &MODE=,&BASEREG=R10,&LINKREG=R14,&DEPTH=
         AIF   ('&MODE' EQ '').IPRO050
         AIF   ('&MODE' EQ 'INIT').IPRO010
         AIF   ('&MODE' EQ 'DEFINE').IPRO030
         MNOTE 12,'INVALID VALUE SPECIFIED FOR MODE - "&MODE"'
         MEXIT ,
.IPRO010 ANOP  ,
         AIF   ('&DEPTH' EQ '').IPRO020 "DEPTH" SPECIFIED
         MNOTE 4,'DEPTH IGNORED WHEN MODE IS NOT DEFINE'
.IPRO020 ANOP  ,
         LA    R14,IPROCSTK        Initialize Next
         ST    R14,IPROCNXT        . Stack Entry
         LA    R14,IPROCTSL(,R14)  Initialize Last
         ST    R14,IPROCEND        . Stack Entry
         B     I&SYSNDX
IPROCERR EX    0,*                 Abend S0C3 When Stack Overflows
I&SYSNDX DS    0H
         MEXIT ,
.IPRO030 ANOP  ,
         LCLC  &DP                 Stack Depth
&DP      SETC  '16'                Default Stack Depth
         AIF   ('&DEPTH' EQ '').IPRO040 "DEPTH" SPECIFIED?
&DP      SETC  '&DEPTH'            Use specified Stack Depth
.IPRO040 ANOP  ,
IPROCTMP DS    F                   Temporary Register Save Area
IPROCNXT DS    A                   A(Next Stack Entry)
IPROCEND DS    A                   A(Last Stack Entry)
IPROCESL EQU   10*4                Length Of Each Stack Entry
IPROCSTK DS    &DP.XL(IPROCESL)    SaveArea Stack
IPROCTSL EQU   *-IPROCSTK          Total Length Of Stack
         MEXIT ,
.IPRO050 ANOP  ,
         AIF   ('&DEPTH' EQ '').IPRO060 "DEPTH" SPECIFIED
         MNOTE 4,'DEPTH IGNORED WHEN MODE IS NOT DEFINE'
.IPRO060 ANOP  ,
         GBLC  &STPREF             Module Prefix
         LCLC  &SUBRNAM            Subroutine Label
         LCLC  &BR                 Base Register
         LCLC  &LR                 Linkage Register
&BR      SETC  '&BASEREG'          Set Base Register
&LR      SETC  '&LINKREG'          Set Linkage Register
&SUBRNAM SETC  '&STPREF.SUBRT'
&SUBRNAM LOCTR ,
&NAME    ST    &LINKREG,IPROCTMP   Save Linkage Register
         PUSH  USING               Save USING Status
         L     &LINKREG,IPROCNXT   Get Next Stack Entry
         C     &LINKREG,IPROCEND   Check For Stack Overflow
         BNL   IPROCERR            B. If Yes
         MVC   0(4,&LR),IPROCTMP   Copy Linkage Register
         STM   R2,R10,4(&LR)       Save Registers
         LA    &LR,IPROCESL(,&LR)  Update Next
         ST    &LR,IPROCNXT        . Stack Entry Address
         BALR  &BR,0               Obtain Local
         USING *,&BR               Addressability
         LA    &BR,0(,&BR)         Ensure Clean Base
         MEND  ,

         MACRO
&NAME    IPEND &BASEREG=R10,&LINKREG=R14
         GBLC  &STNAME             Main CSECT Name
         LCLC  &BR                 Base Register
         LCLC  &LR                 Linkage Register
&BR      SETC  '&BASEREG'          Set Base Register
&LR      SETC  '&LINKREG'          Set Linkage Register
&NAME    ST    R15,IPROCTMP        Save Return Code
         L     &LR,IPROCNXT        Derive Address
         LA    R15,IPROCESL        . Of Our
         SR    &LR,R15             . Stack Entry
         ST    &LR,IPROCNXT        Update Next Stack Entry
         L     R15,IPROCTMP        Load Return Code
         LM    R2,R10,4(&LR)       Restore Registers
         L     &LR,0(,&LR)         Restore Linkage Register
         BR    &LR                 Return To Caller
         #EXEC ,                   Generate #EXEC Statements
         LTORG ,                   Generate Literal Pool
         DC    32S(*)              Patch Area
         POP   USING               Restore Using Status
&STNAME  LOCTR ,                   Restore Main CSECT
         MEND  ,

         MACRO
&NAME    ICALL &RTN,&LINKREG=R14
         LCLC  &REG
         AIF   ('&RTN'(1,1) EQ '(').REGFORM
         L     &LINKREG,=A(&RTN)
         BALR  &LINKREG,&LINKREG   Call Subroutine
         MEXIT
.REGFORM ANOP
&REG     SETC  '&RTN'(2,K'&RTN-2)
         BALR  &LINKREG,&REG       Call Subroutine
         MEND  ,

IEFUJV   #START BASE=(R12),AMODE=31,RMODE=ANY,                         *
               EXTKEY=ZERO,COPY=YES,                                   *
               WKDSECT=UJVWRK,SP=230,LOC=ANY,PREFIX=WRK,               *
               REG1=R8,                                                *
               USING=(PSA,0,PLIST,R8),                                 *
               LEVEL=#V001R09      Mainteinence Level          #DD18023

         IPROC MODE=INIT           Initialize Stack            #DD09143

*-------
*        Only Process "Batch" SET JCL Statements Containing An "&"
*-------
         L     R15,P1SUBSYS        A(Subsystem Name)
         CLC   =C'JES',0(R15)      Check For JES2/JES3 Subsystem
         BNE   SCNEXIT             B. If Not

         L     R15,P1TYPE          A(Statement Type)
         CLI   0(R15),128          Check For Extended JCL Statement
         BNE   SCNEXIT             B. If Not

         L     R4,P1JCL            A(JCL Statement)
         LA    R2,2(,R4)           A(1St Byte After //)
         LA    R1,72(,R4)          A(Last Byte Of JCL Statement)

         SLR   R0,R0
         IC    R0,=C'&&'           Load Search Character
         SRST  R1,R2               Search For String
         BC    2,SCNEXIT           B. If Not Found

         LA    R1,2(,R4)           A(1St Byte Of JCL Statement)
         LHI   R2,65               Load No. Of Bytes In Statement
UJV00100 DS    0H
         CLC   =C' SET ',0(R1)     Check For "SET" Statement
         BE    UJV00200            B. If Yes
         LA    R1,1(,R1)           A(Next Byet In JCL Statement)
         BCT   R2,UJV00100         Look At Entire Statement

         B     SCNEXIT             B. If Not A "SET" Statement

*-------
*        Save Symbol Name And It's Length
*-------
UJV00200 DS    0H
         LA    R2,5(,R1)           A(1St Byte After " SET ")

UJV00300 DS    0H
         LA    R1,72(,R4)          A(Last Byet Of JCL Statement)
         SLR   R0,R0
         IC    R0,=C'&&'           Load Search Character
         SRST  R1,R2               Search For String
         BC    2,SCNEXIT           B. If Not Found

         LR    R3,R1
         ST    R3,WRKSYM@          Save Symbol Starting Address
         LA    R2,72(,R4)          A(Last Byte Of JCL Statement)
         SR    R2,R3               Calculate Remaining Length
         BNP   SCNEXIT

         XC    WRKTRTAB,WRKTRTAB   Prime
         MVI   WRKTRTAB+C' ',C' '     With
         MVI   WRKTRTAB+C'.',C'.'        Symbol
         MVI   WRKTRTAB+C',',C','           Terminator
         MVI   WRKTRTAB+C'''',C''''            Values
         MVI   WRKTRTAB+C'+',C'+'                              #DD09071
         MVI   WRKTRTAB+C'-',C'-'                              #DD09071

         LA    R1,72(,R4)          A(Last Byte Of JCL Statement)
         #EXEC -R2,TRT,0(*-*,R3),WRKTRTAB
         SR    R1,R3               Calculate Symbol Name Length
         SHI   R1,1                Subtract 1 For "&"          #DD09071
         STC   R1,WRKSYML          Save Symbol Length

         MVC   WRKSYM,BLANKS
         #EXEC -R1,MVC,WRKSYM(*-*),1(R3)
         LA    R3,2(R1,R3)         A(Past End Of Symbol Name)

*-------
*        Process Plus/Minus Suffix
*-------
         MVI   WRKSYMFL,0          Initialize Symbol Flag
         MVI   WRKNUMF,C'N'        Initialize Numeric Flag     #DD09071

         XC    WRKSUFFL,WRKSUFFL   Clear Suffix Length         #DD09071
         XC    WRKNUM,WRKNUM       Clear Numeric Suffix Value  #DD09071

         CLI   0(R3),C'+'          Check For "Addition"        #DD09071
         BNE   UJV00500            B. If Not                   #DD09071
         OI    WRKSYMFL,WRK$PLUS                               #DD09071
         B     UJV00600                                        #DD09071
UJV00500 DS    0H                                              #DD09071
         CLI   0(R3),C'-'          Check For "Subtraction"     #DD09071
         BNE   UJV00800            B. If Not                   #DD09071
         OI    WRKSYMFL,WRK$MINUS                              #DD09071
UJV00600 DS    0H                                              #DD09071
         LA    R1,72(,R4)          A(Last Byte Of JCL Statement)
         LA    R3,1(,R3)           Advance Past "+" Or "-"     #DD09071
         LR    R2,R1                                           #DD09071
         SR    R2,R3               Calculate Remaining Length  #DD09071
         BNP   SCNEXIT                                         #DD09071
         MVI   WRKTRTAB+C'+',0     Remove "+" From Table       #DD09071
         MVI   WRKTRTAB+C'-',0     Remove "-" From Table       #DD09071
         LA    R1,72(,R4)          A(Last Byte Of JCL Statement)
         #EXEC -R2,TRT,0(*-*,R3),WRKTRTAB                      #DD09071
         SR    R1,R3               Calculate Numeric Length    #DD09071
         BNP   SCNEXIT             B. If No Number             #DD09071
         CLM   R2,1,=C'.'          Check For Trailing Period   #DD09071
         BNE   UJV00700            B. If Not                   #DD09071
         OI    WRKSYMFL,WRK$DOT                                #DD09071
UJV00700 DS    0H                                              #DD09071
         STH   R1,WRKSUFFL         Save Suffix Length          #DD09071
         LTR   R5,R1               Check For Positive Length   #DD09071
         BNP   SCNEXIT             B. If Not                   #DD09071
         L     R15,=A(NUMERTAB)    A(Translate Table)          #DD09071
         #EXEC -R5,TRT,0(*-*,R3),0(R15)                        #DD09071
         BNZ   SCNEXIT             B. If Not Numeric           #DD09071
         #EXEC R5,PACK,WRKDBL1,0(*-*,R3)                       #DD09071
         CVB   R1,WRKDBL1          Convert Number To Binary    #DD09071
         C     R1,=A(32767)        Check For Maximum Value     #DD15062
         BH    UJV02200            Ignore This Symbol          #DD15062
         STH   R1,WRKNUM           Save Numeric Value          #DD09071

*-------
*        Check Symbol Termination Character
*-------
UJV00800 DS    0H                                              #DD09071
         CLI   0(R3),C'.'          Check If Symbol Ends With A Period
         BNE   UJV01200            B. If Not
         OI    WRKSYMFL,WRK$DOT
         LA    R3,1(,R3)           A(Past Period)

*-------
*        Scan For Internal Symbol Name
*-------
UJV01200 DS    0H
         CLI   WRKSYML,8           Check For Maximum Internal Length
         BH    UJV01600            B. If Too Long

         SLR   R1,R1
         ICM   R1,1,WRKSYML        L(Current Symbol)
         BZ    UJV02200            B. If Null Symbol Name
         SHI   R1,1                Convert To Machine Length   #DD09071
         L     R2,=A(INTERNAL)     A(Internal Symbol Table)    #DD09079
UJV01300 DS    0H
         CLI   0(R2),255           Check For End Of Internal Symbols
         BE    UJV01600            B. If Yes

         CLM   R1,1,0(R2)          Check If Lengths Match
         BNE   UJV01400            B. If Not
         #EXEC R1,CLC,2(*-*,R2),WRKSYM
         BE    UJV01500            B. If Symbol Found
UJV01400 DS    0H
         LA    R2,1+1+8+4(,R2)
         B     UJV01300            Continue Scanning Internal Symbols

UJV01500 DS    0H
         ICM   R15,15,1+1+8(R2)
         ICALL (R15)               Get Symbol Address & Length #DD09183

         B     UJV02000            Insert Value Into JCL Statement

*-------
*        Scan For System Symbol Names
*-------
UJV01600 DS    0H
         L     R15,FLCCVT          A(CVT)
         USING CVT,R15
         ICM   R15,15,CVTECVT      A(ECVT)
         BZ    UJV02200            B. If Not Available
         USING ECVT,R15
         ICM   R15,15,ECVTSYMT     A(Symbol Table)
         BZ    UJV02200            B. If None Defined
         USING SYMBT,R15

         SLR   R7,R7
         ICM   R7,3,SYMBTNUMBEROFSYMBOLS  Number Of Symbols
         BZ    UJV02200            B. If None Defined
         LA    R6,SYMBTTABLEENTRIES A(Start Of Symbol Table Entries)
         ST    R6,WRKSYMB@         Save Start Of Symbol Table Address
         USING SYMBTE,R6

UJV01700 DS    0H
         LM    R1,R2,SYMBTESYMBOLOFFSET O(Name) & L(Name)
         A     R1,WRKSYMB@         A(Symbol Name)
         LA    R1,1(,R1)           Advance Past "&"
         SH    R2,=AL2(2)          Reduce Length For "&" And "."
         BNP   UJV01800            B. If Null Symbol

         CLM   R2,1,WRKSYML        Check If Lengths Match
         BNE   UJV01800            B. If Not
         #EXEC -R2,CLC,WRKSYM(*-*),0(R1)
         BE    UJV01900            B. If Symbol Found

UJV01800 DS    0H
         LA    R6,SYMBTE_LEN(,R6)  A(Next Symbol Table Entry)
         BCT   R7,UJV01700         Loop Through Symbol Table
         B     UJV02200

UJV01900 DS    0H
         L     R1,SYMBTESUBTEXTOFFSET   O(Symbol Value)
         A     R1,WRKSYMB@              A(Symbol Value)
         L     R15,SYMBTESUBTEXTLENGTH  L(Symbol Value)

*-------
*        Insert Symbol's Value Into JCL Statement
*-------
UJV02000 DS    0H
         L     R5,WRKSYM@          A(&Symbol)
         SLR   R14,R14
         IC    R14,WRKSYML         L(Current Symbol)
         LA    R14,1(,R14)         Add 1 For "&&"
         AH    R14,WRKSUFFL        Add Suffix Length           #DD09071
         TM    WRKSYMFL,WRK$DOT    Check If Symbol Ends With A Period
         BZ    UJV02100            B. If Not
         LA    R14,1(,R14)         Add 1 For "."
UJV02100 DS    0H
         TM    WRKSYMFL,WRK$PLUS+WRK$MINUS
         BZ    UJV02150            B. If No Math Performed
         LA    R14,1(,R14)         Add 1 For "+" Or "-"
UJV02150 DS    0H
         #EXEC -R14,MVC,0(*-*,R5),BLANKS
         #EXEC -R15,MVC,0(*-*,R5),0(R1)
         LA    R5,1(R15,R5)        A(End Of Inserted Value)

*-------
*        Shift Remainder Of Statement Forward
*-------
         MVI   WRKTRTAB,X'FF'
         MVC   WRKTRTAB+1(L'WRKTRTAB-1),WRKTRTAB
         MVI   WRKTRTAB+C' ',X'00' Find Next Non-Blank

         LA    R2,72(,R4)          A(Last Byte Of JCL Statement)
         SR    R2,R5               Calculate Remaining Length
         BNP   UJV02300            B. If No More Data

         LA    R1,72(,R4)          A(Last Byte Of JCL Statement)
         #EXEC -R2,TRT,0(*-*,R5),WRKTRTAB
         BZ    UJV02300            B. If Remainder Is Blanks

         LR    R2,R1               A(1St Non-Blank)
         LA    R1,72(,R4)          A(Last Byte Of JCL Statement)
         SR    R1,R2               Calculate Bytes To Move
         BNP   UJV02300
         #EXEC -R1,MVC,0(*-*,R5),0(R2)
         LR    R3,R5               A(End Of Inserted Value)

         LA    R2,1(R1,R2)         A(Last Byte Of Shifted Data)
         LA    R1,72(,R4)          A(Last Byte Of JCL Statement)
         SR    R1,R2               Calculate Bytes To Blank
         BNP   UJV02300
         #EXEC -R1,MVC,0(*-*,R2),BLANKS

         B     UJV02300

*-------
*        Unknown Symbol
*-------
UJV02200 DS    0H
         SLR   R1,R1
         ICM   R1,1,WRKSYML        L(Current Symbol)
         AH    R1,WRKSUFFL         Add Suffix Length           #DD09071
         LA    R3,1(R1,R3)         A(End Of Current Symbol)

*-------
*        Continue Scanning Till All Symbols Have Been Processed
*-------
UJV02300 DS    0H
         LR    R2,R3               A(End Of Processed Section)
         B     UJV00300            Scan Rest Of Statement

*-------
*        Terminate
*-------
SCNEXIT  #STOP RC=0                Terminate Exit Routine

*------------------------------------------------------------------*
*                                                                  *
*        Internal Symbol Value Subroutines                         *
*                                                                  *
*------------------------------------------------------------------*

ZDAY     IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WDD,FORMAT='DD',FROM=WRKDATE                    #DD09071

         LA    R1,WDD              A(Symbol Value)
         LHI   R15,L'WDD           L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

ZDOW     IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WDOW,FORMAT='DAYOFWEEK',FROM=WRKDATE            #DD09071
         OC    WDOW,BLANKS         Convert To Upper Case       #DD09049

         LA    R1,WDOW             A(Symbol Value)             #DD09049
         LHI   R15,3               L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

ZJDATE   IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WDDD,FORMAT='DDD',FROM=WRKDATE                  #DD09071

         LA    R1,WDDD             A(Symbol Value)
         LHI   R15,L'WDDD          L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

ZJOBNAME IPROC ,                   Start SubRoutine            #DD09183
         L     R15,P1JMR           A(JMR)
         USING JMR,R15
         MVC   WJOBNAME,JMRJOB     Save Job Name
         DROP  R15

         LA    R1,WJOBNAME         A(Symbol Value)
         LA    R15,WJOBNAME+L'WJOBNAME-1
ZJOBN010 DS    0H
         CLI   0(R15),C' '         Check For End Of Value
         BNE   ZJOBN020            B. If End Found
         BCT   R15,ZJOBN010        Back Up Till End Found
ZJOBN020 DS    0H
         LA    R15,1(,R15)         A(Past Last Non-Blank)
         SR    R15,R1              Calculate Length Of Value
         IPEND ,                   Return To Caller            #DD09183

ZJOBID   IPROC ,                   Start SubRoutine            #DD09183
         IAZXJSAB READ,            Get Info From JSAB          #DD09183*
               JOBID=WJOBID                                    #DD09183
         LTR   R15,R15             Check If Successful         #DD09183
         BZ    ZJOBIXIT            B. If Yes                   #DD09183

         MVC   WJOBID,=CL8'NOTAVAIL'                           #DD09183

ZJOBIXIT DS    0H                                              #DD09183
         LA    R1,WJOBID           A(Symbol Value)             #DD09118
         LHI   R15,L'WJOBID        L(Symbol Value)             #DD09118
         IPEND ,                   Return To Caller            #DD09183

ZMONTH   IPROC ,                   Start SubRoutine            #DD09183
         #DATE WMONTH,FORMAT='MM',FROM=WRKDATE                 #DD09071

         LA    R1,WMONTH           A(Symbol Value)             #DD09071
         LHI   R15,L'WMONTH        L(Symbol Value)             #DD09071

         MVC   WRKMAX,=AL2(12)     Set Maximum Value           #DD09071
         ICALL MATH                Process "+" Or "-" Suffix   #DD09183
         IPEND ,                   Return To Caller            #DD09183

ZMONTHCH IPROC ,                   Start SubRoutine            #DD09183
         #DATE WMONTH,FORMAT='MM',FROM=WRKDATE                 #DD09183

         LA    R1,WMONTH           A(Symbol Value)             #DD09183
         LHI   R15,L'WMONTH        L(Symbol Value)             #DD09183
         MVC   WRKMAX,=AL2(12)     Set Maximum Value           #DD09183
         ICALL MATH                Process "+" Or "-" Suffix   #DD09183

         LA    R3,MONTHS           A(1st Month Entry)          #DD09183
ZMON0100 DS    0H                                              #DD09183
         CLC   0(2,R3),WMONTH      Check For Current Month     #DD09183
         BE    ZMON0200            B. If Month Found           #DD09183
         LA    R3,MONTHSL(,R3)     A(Next Month Entry)         #DD09183
         B     ZMON0100            Loop Till Month Is Found    #DD09183

ZMON0200 DS    0H                                              #DD09183
         LA    R1,4(,R3)           A(Current Month)            #DD09183
         LH    R15,2(,R3)          L(Current Month)            #DD09183
         IPEND ,                   Return To Caller            #DD09183

ZMOY     IPROC ,                   Start SubRoutine            #DD09183
         #DATE WMONTH,FORMAT='MM',FROM=WRKDATE                 #DD09183

         LA    R1,WMONTH           A(Symbol Value)             #DD09183
         LHI   R15,L'WMONTH        L(Symbol Value)             #DD09183
         MVC   WRKMAX,=AL2(12)     Set Maximum Value           #DD09183
         ICALL MATH                Process "+" Or "-" Suffix   #DD09183

         LA    R3,MONTHS           A(1st Month Entry)          #DD09183
ZMOY0100 DS    0H                                              #DD09183
         CLC   0(2,R3),WMONTH      Check For Current Month     #DD09183
         BE    ZMOY0200            B. If Month Found           #DD09183
         LA    R3,MONTHSL(,R3)     A(Next Month Entry)         #DD09183
         B     ZMOY0100            Loop Till Month Is Found    #DD09183

ZMOY0200 DS    0H                                              #DD09183
         LA    R1,4(,R3)           A(Current Month)            #DD09183
         LHI   R15,3               L(Current Month)            #DD09183
         IPEND ,                   Return To Caller            #DD09183

ZSMFID   IPROC ,                   Start SubRoutine            #DD09183
         MVC   WSMFID,BLANKS
         L     R15,FLCCVT          A(CVT)
         USING CVTMAP,R15
         MVC   WSMFID,BLANKS
         ICM   R15,15,CVTSMCA      A(SMCA)
         BZ    ZSMFI010            B. If Nit Found
         USING SMCABASE,R15
         MVC   WSMFID,SMCASID      Insert SMF System Identifier
         DROP  R15

ZSMFI010 DS    0H
         LA    R1,WSMFID           A(Symbol Value)
         LHI   R15,L'WSMFID        L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

ZSTDYEAR IPROC ,                   Start SubRoutine            #DD09183
         #DATE WCCYY,FORMAT='CCYY',FROM=WRKDATE                #DD09071

         LA    R1,WCCYY            A(Symbol Value)
         LHI   R15,L'WCCYY         L(Symbol Value)             #DD09071

         XC    WRKMAX,WRKMAX       Indicate No Max Value       #DD09071
         ICALL MATH                Process "+" Or "-" Suffix   #DD09183
         IPEND ,                   Return To Caller            #DD09183

ZTIME    IPROC ,                   Start SubRoutine            #DD09183
         #TIME WHHMM,FORMAT='HHMM'

         LA    R1,WHHMM            A(Symbol Value)
         LHI   R15,L'WHHMM         L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

ZTIMEL   IPROC ,                   Start SubRoutine            #DD09183
         #TIME WHHMMSS,FORMAT='HHMMSS'

         LA    R1,WHHMMSS          A(Symbol Value)
         LHI   R15,L'WHHMMSS       L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

ZTIMET   IPROC ,                   Start SubRoutine            #DD09183
         #TIME WHHMMSST,FORMAT='HHMMSSTH'                      #DD09121

         LA    R1,WHHMMSST         A(Symbol Value)             #DD09121
         LHI   R15,L'WHHMMSST      L(Symbol Value)             #DD09121
         IPEND ,                   Return To Caller            #DD09183

ZHH      IPROC ,                   Start SubRoutine            #DD09183
         #TIME WHH,FORMAT='HH'                                 #DD09071

         LA    R1,WHH              A(Symbol Value)             #DD09071
         LHI   R15,L'WHH           L(Symbol Value)             #DD09071

         OI    WRKSYMFL,WRK$ZERO   Indicate Zeros Are Allowed  #DD09071
         MVC   WRKMAX,=AL2(24)     Set Maximum Value           #DD09071
         ICALL MATH                Process "+" Or "-" Suffix   #DD09183
         IPEND ,                   Return To Caller            #DD09183

ZMM      IPROC ,                   Start SubRoutine            #DD09183
         #TIME WMM,FORMAT='MM'                                 #DD09071

         LA    R1,WMM              A(Symbol Value)             #DD09071
         LHI   R15,L'WMM           L(Symbol Value)             #DD09071

         OI    WRKSYMFL,WRK$ZERO   Indicate Zeros Are Allowed  #DD09071
         MVC   WRKMAX,=AL2(60)     Set Maximum Value           #DD09071
         ICALL MATH                Process "+" Or "-" Suffix   #DD09183
         IPEND ,                   Return To Caller            #DD09183

ZSS      IPROC ,                   Start SubRoutine            #DD09183
         #TIME WSS,FORMAT='SS'                                 #DD09071

         LA    R1,WSS              A(Symbol Value)             #DD09071
         LHI   R15,L'WSS           L(Symbol Value)             #DD09071

         OI    WRKSYMFL,WRK$ZERO   Indicate Zeros Are Allowed  #DD09071
         MVC   WRKMAX,=AL2(60)     Set Maximum Value           #DD09071
         ICALL MATH                Process "+" Or "-" Suffix   #DD09183
         IPEND ,                   Return To Caller            #DD09183

ZWD      IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WD,FORMAT='WD',FROM=WRKDATE                     #DD09071

         LA    R1,WD+1             A(Symbol Value)             #DD09071
         LHI   R15,1               L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

ZWEEKDAY IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WDOW,FORMAT='DAYOFWEEK',FROM=WRKDATE            #DD09071

         LA    R1,WDOW             A(Symbol Value)
         LA    R15,WDOW+L'WDOW-1
ZWEEK010 DS    0H
         CLI   0(R15),C' '         Check For End Of Value
         BNE   ZWEEK020            B. If End Found
         BCT   R15,ZWEEK010        Back Up Till End Found
ZWEEK020 DS    0H
         LA    R15,1(,R15)         A(Past Last Non-Blank)
         SR    R15,R1              Calculate Length Of Value
         IPEND ,                   Return To Caller            #DD09183

ZYEAR    IPROC ,                   Start SubRoutine            #DD09183
         #DATE WYY,FORMAT='YY',FROM=WRKDATE                    #DD09071

         LA    R1,WYY              A(Symbol Value)
         LHI   R15,L'WYY           L(Symbol Value)             #DD09071

         XC    WRKMAX,WRKMAX       Indicate No Max Value       #DD09071
         ICALL MATH                Process "+" Or "-" Suffix   #DD09183
         IPEND ,                   Return To Caller            #DD09183

DDMMYY   IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WDDMMYY,FORMAT='DDMMYY',FROM=WRKDATE            #DD09071

         LA    R1,WDDMMYY          A(Symbol Value)             #DD09071
         LHI   R15,L'WDDMMYY       L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

DDMMYYYY IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WDDMMYYYY,FORMAT='DDMMCCYY',FROM=WRKDATE        #DD09071

         LA    R1,WDDMMYYYY        A(Symbol Value)             #DD09071
         LHI   R15,L'WDDMMYYYY     L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

MMDDYY   IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WMMDDYY,FORMAT='MMDDYY',FROM=WRKDATE            #DD09071

         LA    R1,WMMDDYY          A(Symbol Value)             #DD09071
         LHI   R15,L'WMMDDYY       L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

MMDDYYYY IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WMMDDYYYY,FORMAT='MMDDCCYY',FROM=WRKDATE        #DD09071

         LA    R1,WMMDDYYYY        A(Symbol Value)             #DD09071
         LHI   R15,L'WMMDDYYYY     L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

YYDDD    IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WYYDDD,FORMAT='YYDDD',FROM=WRKDATE              #DD09071

         LA    R1,WYYDDD           A(Symbol Value)             #DD09071
         LHI   R15,L'WYYDDD        L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

YYDDMM   IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WYYDDMM,FORMAT='YYDDMM',FROM=WRKDATE            #DD09071

         LA    R1,WYYDDMM          A(Symbol Value)             #DD09071
         LHI   R15,L'WYYDDMM       L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

YYMMDD   IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WYYMMDD,FORMAT='YYMMDD',FROM=WRKDATE            #DD09071

         LA    R1,WYYMMDD          A(Symbol Value)             #DD09071
         LHI   R15,L'WYYMMDD       L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

YYYYDDD  IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WYYYYDDD,FORMAT='CCYYDDD',FROM=WRKDATE          #DD09071

         LA    R1,WYYYYDDD         A(Symbol Value)             #DD09071
         LHI   R15,L'WYYYYDDD      L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

YYYYDDMM IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WYYYYDDMM,FORMAT='CCYYDDMM',FROM=WRKDATE        #DD09071

         LA    R1,WYYYYDDMM        A(Symbol Value)             #DD09071
         LHI   R15,L'WYYYYDDMM     L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

YYYYMMDD IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WYYYYMMDD,FORMAT='CCYYMMDD',FROM=WRKDATE        #DD09071

         LA    R1,WYYYYMMDD        A(Symbol Value)             #DD09071
         LHI   R15,L'WYYYYMMDD     L(Symbol Value)             #DD09071
         IPEND ,                   Return To Caller            #DD09183

YYYYDDD2 IPROC ,                   Start SubRoutine            #DD09183
         ICALL GETDATE             Get Updated Date            #DD09183

         #DATE WYYYYDDD2,FORMAT='CCYY/DDD',FROM=WRKDATE        #DD09079

         LA    R1,WYYYYDDD2        A(Symbol Value)             #DD09079
         LHI   R15,L'WYYYYDDD2     L(Symbol Value)             #DD09079
         IPEND ,                   Return To Caller            #DD09183

YYYYDDD3 IPROC ,                   Start SubRoutine            #DD14280
         ICALL GETDATE             Get Updated Date            #DD14280

         #DATE WYYYYDDD3,FORMAT='CCYY.DDD',FROM=WRKDATE        #DD14280

         LA    R1,WYYYYDDD3        A(Symbol Value)             #DD14280
         LHI   R15,L'WYYYYDDD3     L(Symbol Value)             #DD14280
         IPEND ,                   Return To Caller            #DD14280

*-------
*        Add Or Subtract The Number Of Days From The Current Date
*-------
GETDATE  IPROC ,                   Start SubRoutine            #DD09183
         TM    WRKSYMFL,WRK$PLUS+WRK$MINUS                     #DD09071
         BZ    GETDEXIT            B. If No Changes Requested  #DD09071

         TIME  DEC                 Obtain Current Time/Date    #DD09071
         STM   R0,R1,TIMEDATE      Save Current Time/Date      #DD09071

         #DATE WRKCCYYC,FORMAT='CCYY',FROM=WRKDATE             #DD09071
         PACK  WRKDBL1,WRKCCYYC                                #DD09071
         OI    WRKDBL1+7,X'0F'                                 #DD09071
         CVB   R1,WRKDBL1          Convert CCYY To Binary      #DD09071
         STH   R1,WRKCCYYB                                     #DD09071

         XC    WRKDBL1,WRKDBL1                                 #DD09071
         MVC   WRKDBL1+6(2),WRKDATE+2                          #DD09071
         OI    WRKDBL1+7,X'0F'                                 #DD09071
         CVB   R1,WRKDBL1          Convert DDD To Binary       #DD09071
         STH   R1,WRKDDDB                                      #DD09071
         MVC   WRKTODAY,WRKDDDB    Save Today's Julian Date    #DD09071

GETD0100 DS    0H                                              #DD09071
         MVC   WRKDPY,=AL2(365)    Set Non-Leap Year Days/Year #DD09071
         TM    WRKCCYYB+1,3        Check If Divisible By 4     #DD09071
         BNZ   GETD0200            B. If Not                   #DD09071
         MVC   WRKDPY,=AL2(366)    Set Leap Year Days/Year     #DD09071

GETD0200 DS    0H                                              #DD09071
         MVC   WRKCVAL,WRKNUM      Initialize +/- Value        #DD15062
         CLC   WRKCVAL,WRKDPY      Check If > Days In 1 Year   #DD15062
         BL    GETD0300            B. If Not                   #DD15062
         MVC   WRKCVAL,WRKDPY      Set Value To 1 Year         #DD15062

GETD0300 DS    0H                                              #DD15062
         TM    WRKSYMFL,WRK$PLUS                               #DD09071
         BZ    GETD0400            B. If No "+" Calculation    #DD09071
         LH    R1,WRKDDDB          Load Today's Date           #DD09071
         AH    R1,WRKCVAL          Add "+" Value               #DD15062
         STH   R1,WRKDDDB          Save Calculated Date        #DD09071
         CH    R1,WRKDPY           Check If Into Next Year     #DD09071
         BNH   GETD0700            B. If Not                   #DD09071
         SH    R1,WRKDPY           Calculate Next Year's Date  #DD15062
         STH   R1,WRKDDDB                                      #DD16062
         LH    R1,WRKCCYYB                                     #DD09071
         AHI   R1,1                Set To Next Year            #DD09071
         STH   R1,WRKCCYYB                                     #DD09071
         B     GETD0700            Return Date Value           #DD09071

GETD0400 DS    0H                                              #DD09071
         TM    WRKSYMFL,WRK$MINUS                              #DD09071
         BZ    GETDEXIT            B. If No "-" Calculation    #DD09071
         LH    R1,WRKDDDB          Load Today's Date           #DD09071
         SH    R1,WRKCVAL          Subtract "-" Value          #DD15062
         LTR   R1,R1               Check If Still In This Year #DD09071
         BNP   GETD0500            B. If Not                   #DD15062
         STH   R1,WRKDDDB          Save Calculated Date        #DD15062
         B     GETD0700                                        #DD15062
GETD0500 DS    0H                                              #DD15062
         LH    R1,WRKCCYYB                                     #DD09071
         SHI   R1,1                Set To Last Year            #DD09071
         STH   R1,WRKCCYYB                                     #DD09071
         MVC   WRKDPY,=AL2(365)    Set Non-Leap Year Days/Year #DD09071
         TM    WRKCCYYB+1,3        Check If Divisible By 4     #DD09071
         BNZ   GETD0600            B. If Not                   #DD09071
         MVC   WRKDPY,=AL2(366)    Set Leap Year Days/Year     #DD09071
GETD0600 DS    0H                                              #DD09071
         LH    R1,WRKDDDB          Load Today's Date           #DD15062
         AH    R1,WRKDPY           Add Previous Years Days     #DD15062
         SH    R1,WRKCVAL          Calc. Day Of Previous Year  #DD15062
         STH   R1,WRKDDDB          Save Calculated Date        #DD15062

GETD0700 DS    0H                                              #DD09071
         LH    R1,WRKNUM           Load Remaining +/- Value    #DD15062
         SH    R1,WRKCVAL          Subtract Current Value      #DD15062
         STH   R1,WRKNUM           Save Remaining +/- Value    #DD15062
         LTR   R1,R1               Check If More Days          #DD15062
         BP    GETD0100            B. If Yes                   #DD15062

         CLC   WRKDDDB,=AL2(0)     Check For Start Of New Year #DD15062
         BNE   GETD0800            B. If Not                   #DD15062
         MVC   WRKDDDB,=AL2(1)     Set Date To 1St Day Of Year #DD15062

GETD0800 DS    0H                                              #DD15062
         LH    R1,WRKCCYYB         Load Year Value             #DD09071
         SH    R1,=AL2(1900)                                   #DD09071
         CVD   R1,WRKDBL1                                      #DD09071
         LH    R1,WRKDBL1+6        Load CCYYF                  #DD09071
         SRL   R1,4                Convert To CCYY             #DD09071
         STH   R1,WRKDATE          Save CCYY                   #DD09071

         LH    R1,WRKDDDB          Load Julian Date Value      #DD09071
         CVD   R1,WRKDBL1                                      #DD09071
         LH    R1,WRKDBL1+6        Load CCYYF                  #DD09071
         STH   R1,WRKDATE+2        Save DDDF                   #DD09071

GETDEXIT IPEND ,                                               #DD09183

*-------
*        Add Or Subtract Plain Numbers
*-------
MATH     IPROC ,                   Start SubRoutine            #DD09183
         STM   R15,R1,WRKMATH      Save Variable Addr/Len      #DD62142

         TM    WRKSYMFL,WRK$PLUS+WRK$MINUS                     #DD09071
         BZ    MATHEXIT            B. If No Math Required      #DD09071

         LR    R5,R1               Save Variable Address       #DD09071
         LR    R6,R15              Save Variable Length        #DD09071
         #EXEC -R6,PACK,WRKDBL1(8),0(*-*,R5)                   #DD09071
         CVB   R1,WRKDBL1          Convert Number To Binary    #DD09071

         TM    WRKSYMFL,WRK$PLUS   Check For "+" Suffix        #DD09071
         BZ    MATH0100            B. If Not                   #DD09071
         AH    R1,WRKNUM           Add Numeric Suffix          #DD09071
         B     MATH0200                                        #DD09071

MATH0100 DS    0H                                              #DD09071
         TM    WRKSYMFL,WRK$MINUS  Check For "-" Suffix        #DD09071
         BZ    MATH0600            B. If Not                   #DD09183
         SH    R1,WRKNUM           Subtract Numeric Suffix     #DD09071

MATH0200 DS    0H                                              #DD09071
         CLC   WRKMAX,=AL2(0)      Check For A Max Value       #DD09071
         BE    MATH0500            B. If Not                   #DD09071
         TM    WRKSYMFL,WRK$ZERO   Check If Zeros Are Allowed  #DD09071
         BO    MATH0300            B. If Yes                   #DD09071
         LTR   R1,R1               Check For Positive Value    #DD18023
         BNP   MATH0450            B. If Zero or Negative      #DD18023
         CH    R1,WRKMAX           Check Against Maximum Value #DD09071
         BNH   MATH0400            B. If Not Over Max          #DD09071
         SH    R1,WRKMAX           Subtract Range Value        #DD09071
         B     MATH0200            Loop Till Within Range      #DD09071

MATH0300 DS    0H                                              #DD09071
         CH    R1,WRKMAX           Check Against Maximum Value #DD09071
         BL    MATH0400            B. If Not Over Max          #DD09071
         SH    R1,WRKMAX           Subtract Range Value        #DD09071
         B     MATH0200            Loop Till Within Range      #DD09071

MATH0400 DS    0H                                              #DD09071
         TM    WRKSYMFL,WRK$ZERO   Check If Zeros Are Allowed  #DD09071
         BO    MATH0500            B. If Yes                   #DD09071
         LTR   R1,R1               Check For Minimum Value     #DD09071
         BNZ   MATH0500            B. If Not Too Low           #DD09071
         LHI   R1,1                Set To Minimum Value        #DD09071
         B     MATH0500                                        #DD18023

MATH0450 DS    0H                                              #DD18023
         LR    R2,R1                                           #DD18023
         LH    R1,WRKMAX           Load Maximum Value          #DD18023
         AR    R1,R2               Add Zero or Negative Value  #DD18023
         LTR   R1,R1               Check If Still Negative     #DD18023
         BNP   MATH0450            B. If Not                   #DD18023

MATH0500 DS    0H                                              #DD09071
         CVD   R1,WRKDBL1          Convert Changed Number      #DD09071
         OI    WRKDBL1+7,X'0F'     Ensure Correct Sign         #DD09071
         UNPK  WRKCHAR(8),WRKDBL1(8)                           #DD09071

         LA    R1,WRKCHAR+7        A(Last Byte Of Number)      #DD09071
         SR    R1,R6               A(Start Of Converted Number)#DD09071
         #EXEC R6,MVC,0(*-*,R5),0(R1)                          #DD09071

MATH0600 DS    0H                                              #DD09183
         NI    WRKSYMFL,255-WRK$ZERO                           #DD09071

MATHEXIT DS    0H                                              #DD09183
         LM    R15,R1,WRKMATH      Re-Load Variable Addr/Len   #DD09183
         IPEND ,                   Return To Caller            #DD09183

         #STARTWA PATCH=NO
         IPROC MODE=DEFINE         Define Save Area Stack      #DD09143

TIMEDATE DS    0D                  Time & Date Values          #DD09071
WRKTIME  DS    F                   - Time                      #DD09071
WRKDATE  DS    F                   - Date                      #DD09071

WRKYEAR  DS    H                   Current Year CCYY           #DD09071
WRKDPY   DS    H                   Days In The Current Year    #DD09071

WRKCCYYC DS    CL4                 "CCYY" Character Format     #DD09071
WRKCCYYB DS    H                   "CCYY" Binary Format        #DD09071
WRKDDDB  DS    H                   "DDD" Binary Format         #DD09071
WRKTODAY DS    H                   Today's "DDD" Binary Value  #DD09071

WRKCHAR  DS    CL8                 Numeric Output Field        #DD09071

WRKSYMFL DS    X
WRK$DOT  EQU   B'10000000'         Symbol Ends With A Period
WRK$PLUS EQU   B'01000000'         Addition Requested          #DD09071
WRK$MINUS EQU  B'00100000'         Subtraction Requested       #DD09071
WRK$ZERO  EQU  B'00010000'         Math Can Return Zero        #DD09071

WRKNUMF  DS    C                   Internal Table Flag (Y / N) #DD09071
WRKSUFFL DS    H                   Numeric Suffix Length       #DD09071
WRKNUM   DS    H                   Numeric Suffix Value        #DD09071
WRKCVAL  DS    H                   Current +/- Value           #DD15062

WRKMAX   DS    H                   Maximum "Math" Value        #DD09071

WRKSYMB@ DS    A                   System Symbol Table Starting Address

WRKSYM@  DS    A
WRKSYML  DS    XL1
WRKSYM   DS    CL65

WRKMATH  DS    16F                 Math Routine Save Area      #DD09183

WRKTRTAB DS    XL256

*        Temporary Symbol Output Area
WCCYY    DS    C'CCYY'
WD       DS    C'00'                                           #DD09049
WDD      DS    C'DD'
WDDD     DS    C'DDD'
WDDMMYY  DS    C'DDMMYY'                                       #DD09071
WDDMMYYYY DS   C'DDMMCCYY'                                     #DD09071
WDOW     DS    C'DAYOFWEEK'
WHH      DS    C'HH'                                           #DD09071
WHHMM    DS    C'HHMM'
WHHMMSS  DS    C'HHMMSS'
WHHMMSST DS    C'HHMMSST',C'H'                                 #DD09121
WJOBNAME DS    C'ABCDEFGH'
WJOBID   DS    C'JOB12345'                                     #DD09118
WMM      DS    C'MM'                                           #DD09071
WMMDDYY  DS    C'MMDDYY'                                       #DD09071
WMMDDYYYY DS   C'MMDDCCYY'                                     #DD09071
WMONTH   DS    C'MM'
WSMFID   DS    C'SYS1'
WSS      DS    C'SS'                                           #DD09071
WYY      DS    C'YY'
WYYDDD   DS    C'YYDDD'                                        #DD09071
WYYDDMM  DS    C'YYDDMM'                                       #DD09071
WYYMMDD  DS    C'YYMMDD'                                       #DD09071
WYYYYDDD DS    C'CCYYDDD'                                      #DD09071
WYYYYDDMM DS   C'CCYYDDMM'                                     #DD09071
WYYYYMMDD DS   C'CCYYMMDD'                                     #DD09071
WYYYYDDD2 DS   C'YYYY/DDD'                                     #DD09079
WYYYYDDD3 DS   C'YYYY.DDD'                                     #DD14280
         #STOPWA ,

BLANKS   DC    CL256' '

*------------------------------------------------------------------*
*                                                                  *
*        Internal Symbols                                          *
*                                                                  *
*        NOTE: Symbol String Must Be At Least As Long As           *
*              It's Substituted Value (Including &)                *
*              This Is An IBM Symbol Restriction.                  *
*                                                                  *
*------------------------------------------------------------------*

*      Machine Length, Spare Flag, Symbol Name, Processing Routine
INTERNAL DS    0F
         DC    AL1(3,0),CL8'ZDAY    ',AL4(ZDAY)     DD         #DD09071
         DC    AL1(3,0),CL8'ZDOW    ',AL4(ZDOW)     Mon        #DD09049
         DC    AL1(5,0),CL8'ZJDATE  ',AL4(ZJDATE)   DDD        #DD09071
         DC    AL1(7,0),CL8'ZJOBNAME',AL4(ZJOBNAME) JName      #DD09071
         DC    AL1(5,0),CL8'ZJOBID  ',AL4(ZJOBID)   JOB12345   #DD09118
         DC    AL1(5,0),CL8'ZMONTH  ',AL4(ZMONTH)   MM         #DD09071
         DC    AL1(7,0),CL8'ZMONTHCH',AL4(ZMONTHCH) JANUARY    #DD09183
         DC    AL1(3,0),CL8'ZMOY    ',AL4(ZMOY)     JAN        #DD09183
         DC    AL1(5,0),CL8'ZSMFID  ',AL4(ZSMFID)   SMFId      #DD09071
         DC    AL1(7,0),CL8'ZSTDYEAR',AL4(ZSTDYEAR) CCYY       #DD09071
         DC    AL1(4,0),CL8'ZTIME   ',AL4(ZTIME)    HHMM       #DD09071
         DC    AL1(5,0),CL8'ZTIMEL  ',AL4(ZTIMEL)   HHMMSS     #DD09071
         DC    AL1(5,0),CL8'ZTIMET  ',AL4(ZTIMET)   HHMMSST    #DD09121
         DC    AL1(2,0),CL8'ZHH     ',AL4(ZHH)      HH         #DD09071
         DC    AL1(2,0),CL8'ZMM     ',AL4(ZMM)      MM         #DD09071
         DC    AL1(2,0),CL8'ZSS     ',AL4(ZSS)      SS         #DD09071
         DC    AL1(2,0),CL8'ZWD     ',AL4(ZWD)      #          #DD09071
         DC    AL1(7,0),CL8'ZWEEKDAY',AL4(ZWEEKDAY) Monday     #DD09071
         DC    AL1(4,0),CL8'ZYEAR   ',AL4(ZYEAR)    YY         #DD09071

         DC    AL1(5,0),CL8'DDMMYY  ',AL4(DDMMYY)   DDMMYY     #DD09071
         DC    AL1(7,0),CL8'DDMMYYYY',AL4(DDMMYYYY) DDMMYYYY   #DD09071
         DC    AL1(5,0),CL8'MMDDYY  ',AL4(MMDDYY)   MMDDYY     #DD09071
         DC    AL1(7,0),CL8'MMDDYYYY',AL4(MMDDYYYY) MMDDYYYY   #DD09071
         DC    AL1(4,0),CL8'YYDDD   ',AL4(YYDDD)    YYDDD      #DD09071
         DC    AL1(5,0),CL8'YYDDMM  ',AL4(YYDDMM)   YYDDMM     #DD09071
         DC    AL1(5,0),CL8'YYMMDD  ',AL4(YYMMDD)   YYMMDD     #DD09071
         DC    AL1(6,0),CL8'YYYYDDD ',AL4(YYYYDDD)  YYYYDDD    #DD09071
         DC    AL1(7,0),CL8'YYYYDDMM',AL4(YYYYDDMM) YYYYDDMM   #DD09071
         DC    AL1(7,0),CL8'YYYYMMDD',AL4(YYYYMMDD) YYYYMMDD   #DD09071
         DC    AL1(7,0),CL8'YYYY/DDD',AL4(YYYYDDD2) YYYY/DDD   #DD09079
         DC    AL1(7,0),CL8'YYYY*DDD',AL4(YYYYDDD3) YYYY.DDD   #DD14280

         DC    AL1(255)            End Of Internal Symbol List


NUMERTAB DC    256X'FF'            Find Non-Numerics           #DD09071
         ORG   NUMERTAB+C'0'                                   #DD09071
         DC    10X'00'             0-9                         #DD09071
         ORG   ,                                               #DD09071

MONTHS   DC    C'01',AL2(07),CL10'JANUARY   '                  #DD09183
MONTHSL  EQU   *-MONTHS                                        #DD09183
         DC    C'02',AL2(08),CL10'FEBRUARY  '                  #DD09183
         DC    C'03',AL2(05),CL10'MARCH     '                  #DD09183
         DC    C'04',AL2(05),CL10'APRIL     '                  #DD09183
         DC    C'05',AL2(03),CL10'MAY       '                  #DD09183
         DC    C'06',AL2(04),CL10'JUNE      '                  #DD09183
         DC    C'07',AL2(04),CL10'JULY      '                  #DD09183
         DC    C'08',AL2(06),CL10'AUGUST    '                  #DD09183
         DC    C'09',AL2(09),CL10'SEPTEMBER '                  #DD09183
         DC    C'10',AL2(07),CL10'OCTOBER   '                  #DD09183
         DC    C'11',AL2(08),CL10'NOVEMBER  '                  #DD09183
         DC    C'12',AL2(08),CL10'DECEMBER  '                  #DD09183

*------------------------------------------------------------------*
*                                                                  *
*        DSECTs                                                    *
*                                                                  *
*------------------------------------------------------------------*

*
*        This Is The Parameter List Passed To IEFUJV Via R1
*
PLIST    DSECT ,     Word Offset
P1JMR    DS    A      1     +0         Address Of JMR
P1JCL    DS    A      2     +4         Address Of JCL Statement
P1TYPE   DS    A      3     +8         Address Of Statement Type
*        0 - Null Statement Card Image.
*        1 - JOB Statement Card Image.
*        2 - EXEC Statement Card Image.
*        4 - DD Statement Card Image.
*        8 - PROC Statement Card Image From Cataloged Procedure.
*       16 - All JCL Has Been Converted.
*       32 - All JCL Has Been Interpreted.
*       64 - JCL Definition Table Defined (JDT) Statement Card Image.
*      128 - Extended JCL Statement Type Card Image.
P1CNVPRM DS    A      4    +12         Address Of Converter Parm
* .......1 - Programmer Name Required.
* ......1. - Account Number Required.
* .....1.. - Enabled To Run With The SWA Located In Virtual Storage
*            Above 16 Megabytes.
P1SUBSYS DS    A      5    +16         Address Of ASCH, JES2, Or JES3
P1ENVIR  DS    A      6    +20         Address Of Environment Indicator
*        1 - APPC Scheduler Utility TP Add Call
*        2 - APPC Scheduler Utility TP Retrieve Call
*        3 - APPC Scheduler Utility TP Reconvert Call

         #DSECTS CVT,PSA,JMR,TCT,TCB,ASCB,ASXB,SCT,LCT,JCT,JSCB,SSIB,  *
               SMCA

         PRINT NOGEN
         ASASYMBP DSECT=YES,LIST=YES,SYMBP=YES,SYMBT=YES,SYMBTE=YES
         IHAASSB ,                                             #DD09183
         IAZJSAB ,                                             #DD09183
         IHASTCB ,                                             #DD09183
         END   ,
