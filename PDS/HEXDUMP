HEXDUMP  TITLE 'H E X D U M P  - STORAGE DUMP FORMAT ROUTINE'
*---------------------------------------------------------------------*
*                                                                     *
*        Support Email Address: zOS.JES2@Gmail.com                    *
*                                                                     *
*---------------------------------------------------------------------*

***********************************************************************
*                *                                                    *
*  H E X D U M P *                                                    *
*                *                                                    *
***********************************************************************
*                                                                     *
*   FUNCTION - THIS SUBROUTINE PROVIDES A FORMATTED DUMP OF STORAGE,  *
*              WITH BOTH A HEX AND CHARACTER DISPLAY IN THE AMASPZAP  *
*              FORMAT. THE PRINT LINE CAN BE FORMATED FOR AN 80 BYTE  *
*              LINE FOR TERMINALS, OR A 130 BYTE LINE FOR PRINTED     *
*              MATTER.  THIS IS CONTROLLED BY A SWITCH.  ALSO, THE    *
*              PROVISION FOR PRINTING THE ABSOLUTE STORAGE ADDRESS    *
*              AND/OR A RELATIVE ADDRESS, WHOSE STARTING VALUE IS     *
*              SUPPLIED IN THE PARAMETER LIST.  THIS SUBROUTINE       *
*              PASSES THE FORMATED LINE IN THE BUFFER SUPPLIED BY     *
*              THE CALLER.  THE ROUTINE SHOULD BE REINVOLKED UNTIL    *
*              THE STARTING ADDRESS IN THE PARAMETER LIST EQUALS OR   *
*              EXCEEDS THE END ADDRESS.                               *
*                                                                     *
*   ENTRY -   STANDARD SUBROUTINE LINKAGE                             *
*                                                                     *
*                       +0 4 BYTE START ADDRESS FOR DUMP              *
*                       +4 4 BYTE ADDRESS OF LAST BYTE FOR DUMP       *
*                       +8 4 BYTE RELATIVE ADDRESS (OPTIONAL)         *
*                      +12 1 BYTE OF SWITCHES                         *
*                          X'80' PRINT ABSOLUTE STORAGE ADDRESS ON    *
*                                EACH LINE OF DUMP                    *
*                          X'40' PRINT RELATIVE STORAGE ADDRESS ON    *
*                                EACH LINE OF DUMP                    *
*                          X'20' PRINT LINE IS 130 BYTES WIDE (ON)    *
*                                OTHERWISE IT IS 80 BYTES WIDE        *
*                     +13 3 BYTE ADDRESS OF BUFFER                    *
*                                                                     *
*   EXIT PARAMETERS NORMAL -  PARAMETER LIST START AND RELATIVE ADDRE *
*                             INCREMENTED BY NO OF BYTES PROCESSED.   *
*                             ALL REGISTERS RESTORED.                 *
*                                                                     *
*   EXIT PARAMETERS ABNORMAL - NONE                                   *
*                                                                     *
*   REGISTER USAGE - R0  -  USED                                      *
*                    R1  -  PARM LIST POINTER                         *
*                    R2  -  CURRENT DATA ADDRESS                      *
*                    R3  -  LENGTH OF LINE LEFT TO FORMAT             *
*                    R4  -  RELATIVE ADDRESS                          *
*                    R5  -  BUFFER ADDRESS                            *
*                    R6  -  CURRENT BUFFER SLOT ADDRESS               *
*                    R7  -  WORK REGISTER                             *
*                    R8  -  WORK REGISTER                             *
*                    R9  -  USED FOR SAVING CALLERS MODE              *
*                    R10 -  FREE                                      *
*                    R11 -  FREE                                      *
*                    R12 -  FREE                                      *
*                    R13 -  CALLER'S SAVE AREA ADDRESS                *
*                    R14 -  RETURN ADDRESS                            *
*                    R15 -  ENTRY POINT ADDRESS AND BASE              *
*                                                                     *
*   ATTRIBUTES -   REENTRANT                                          *
*                                                                     *
*   CONTROL BLOCK DEPENDENCIES - NONE                                 *
*                                                                     *
*   ROUTINES CALLED - NONE                                            *
*                                                                     *
*   ABEND CODES -  NONE                                               *
*                                                                     *
*   MESSAGES ISSUED - NONE                                            *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*        HISTORY:                                                     *
*                                                                     *
***********************************************************************

         ACONTROL OPTABLE(ZS3)     Assembly OPTCDE Table
         SPLEVEL  SET=6            Specify OS/390 R2 macro format
         SYSSTATE ARCHLVL=2        Assembly requires z/Architecture
         SYSSTATE OSREL=ZOSV1R13   Assembly requires z/OS 1.13 & higher

HEXDUMP  #START REG1=R3,AMODE=CAP31,WKDSECT=HEXWORK

         L     R1,0(0,R3)               >>---> PARAMETER LIST
         NI    0(R1),FF-BIT0            ENSURE HIGH ORDER BIT
         NI    4(R1),FF-BIT0            ENSURE HIGH ORDER BIT
         LM    R2,R4,0(R1)         LOAD START/LAST/RELATIVE ADDRESSES
         SLR   R5,R5                    CLEAR BEFORE INSERT
         ICM   R5,B'0111',13(R1)        LOAD BUFFER ADDRESS
         LA    R3,1(0,R3)               >>---> PAST LAST BYTE
         LR    R6,R5                    >>---> BUFFER
         MVI   0(R5),C' '               INSERT PAD CHARACTER
         TM    12(R1),BIT2              CHECK IF 130 BYTE BUFFER
         BO    DUMPL130
         MVC   1(79,R5),0(R5)           CLEAR FIRST 80 BYTES
         B     DUMP10

DUMPL130 MVC   1(129,R5),0(R5)          CLEAR FIRST 130 BYTES

***********************************************************************
* CHECK THE PARAMETERS IF RELATIVE ADDRESS OPTION WAS SPECIFIED, THEN *
* BRANCH ACCORDINGLY.                                                 *
***********************************************************************

DUMP10   DS    0H
         TM    12(R1),BIT1         CHECK FOR RELATIVE ADDRESS REQUEST
         BZ    DUMP20
         LTR   R4,R4               CHECK FOR NEGATIVE RELATIVE ADDRESS
         BNM   DUMP11
         LCR   R4,R4                    LOAD COMPLEMENT OF ADDRESS
         ST    R4,8(0,R1)               SAVE COMPLIMENT FOR UNPACK
         LCR   R4,R4                    RESTORE REGISTER 4

***********************************************************************
* UNPACK THE HEX DIGITS AND SURPRESS 5 LEADING ZEROS.                 *
***********************************************************************

DUMP11   DS    0H
         UNPK  2(7,R6),9(4,R1)          SPREAD HEX DIGITS
         MVI   8(R6),C' '               BLANK EXTRA DIGIT
         TR    2(6,R6),HEXTAB2          MAKE HEX DIGITS PRINTABLE
         LA    R8,5                     SUPPRESS 5 LEADING ZEROES
         LA    R7,2(0,R6)               POINT TO FIRST DIGIT

***********************************************************************
* IF MORE LEADING ZEROS ARE PRESENT, THEN SURPRESS THEM AND SET       *
* RELATIVE SWITCH ON.                                                 *
***********************************************************************

DUMP12   DS    0H
         CLI   0(R7),C'0'               HAVE WE A LEADING ZERO?
         BNE   DUMP14                   NO, HAVE A SIG DIGIT
         MVI   0(R7),C' '               BLANK OUT THE LEADING ZERO
         LA    R7,1(0,R7)               POINT TO NEXT CHARACTER
         BCT   R8,DUMP12                REPEAT 4 MORE TIMES
DUMP14   BCTR  R7,0                     BACK UP BY 1
         MVI   0(R7),C'+'               INDICATE A RELATIVE ADDRESS
         LTR   R4,R4                    TEST RELATIVE ADDRESS
         BNM   DUMP16                   BRANCH IF POSITIVE
         MVI   0(R7),C'-'               ELSE INDICATE REL ADDR NEG
DUMP16   DS    0H
         LA    R6,8(0,R6)               BUMP UP BUFFER POINTER

***********************************************************************
* CHECK IF THE ABSOLUTE ADDRESS OPTION WAS SPECIFIED, AND BRANCH      *
* ACCORDINGLY.                                                        *
***********************************************************************

DUMP20   DS    0H
         TM    12(R1),BIT0              ABSOLUTE ADDRESS REQUIRED?
         BZ    DUMP30                   NO, SKIP
         UNPK  1(9,R6),0(5,R1)          SPREAD HEX DIGITS OF ABS ADDR
         TR    1(8,R6),HEXTAB2          MAKE HEX DIGITS PRINTABLE
         MVI   9(R6),C' '               PAD
         LA    R6,9(0,R6)               UPDATE BUFFER POINTER

***********************************************************************
* TEST OUTPUT LENGTH SPECIFIED AND BRANCH ACCORDINGLY TO FORMAT       *
* OUTPUT.                                                             *
***********************************************************************

DUMP30   DS    0H
         LA    R6,2(0,R6)               ADD PADDING CHARACTERS
         USING BUFDSECT,R6              MAP BUFFER
         SR    R3,R2                    GET LENGTH OF DATA LEFT
         TM    12(R1),BIT2              WAS 130 BYTE BUFFER WANTED?
         BO    DUMP50                   YES, BRANCH

***********************************************************************
* IF OUTPUT LENGTH IS 80 CHARACTERS THEN SET SWITCH AND MOVE DATA     *
* INTO BUFFER CONVERTING THE HEX DIGITS INTO PRINTABLE FORM IF        *
* POSSIBLE AND TO DOTS IF UNPRINTABLE.                                *
***********************************************************************

         LA    R8,4                     INDICATE 80 BYTE BUFFER
         MVI   BL80HEX,C'*'             FORMAT CHARACTER DISPLAY
         MVI   BL80HEX+17,C'*'
         CL    R3,=A(16)                TEST LENGTH LEFT TO DO
         BNL   DUMP40                   BRANCH IF >= 16
         AR    R4,R3                    UPDATE RELATIVE ADDR
         #EXEC -R3,MVC,BL80HEX+1(*-*),0(R2)
         #EXEC R3,TR,BL80HEX+1(*-*),HEXTAB1
         LA    R3,1(0,R3)               RESTORE LENGTH
         B     DUMP60

DUMP40   MVC   BL80HEX+1(16),0(R2)      MOVE DATA TO LINE
         TR    BL80HEX+1(16),HEXTAB1    CONVERT UNPRINTABLES TO DOTS
         A     R4,=A(16)                UPDATE REL ADDR (CAN'T USE LA)
         B     DUMP60

***********************************************************************
* IF OUTPUT LENGTH IS 130 CHARACTERS THEN SET SWITCH AND MOVE DATA    *
* INTO BUFFER CONVERTING HEX DIGITS INTO PRINTABLE FORM IF POSSIBLE   *
* AND INTO DOTS IF NOT POSSIBLE.                                      *
***********************************************************************

DUMP50   DS    0H                       130 BYTE BUFFER
         LA    R8,8                     INDICATE 80 BYTE BUFFER
         MVI   BL130HEX,C'*'            FORMAT CHARACTER DISPLAY
         MVI   BL130HEX+33,C'*'
         CL    R3,=A(32)                TEST LENGTH LEFT TO DO
         BNL   DUMP55                   BRANCH IF >= 32
         AR    R4,R3                    UPDATE RELATIVE ADDR
         #EXEC -R3,MVC,BL130HEX+1(*-*),0(R2)
         #EXEC R3,TR,BL130HEX+1(*-*),HEXTAB1
         LA    R3,1(0,R3)               RESTORE LENGTH
         B     DUMP60

DUMP55   MVC   BL130HEX+1(32),0(R2)     MOVE DATA TO LINE
         TR    BL130HEX+1(32),HEXTAB1   CONVERT UNPRINTABLES TO DOTS
         A     R4,=A(32)                UPDATE REL ADDR (CAN'T USE LA)

***********************************************************************
* CHECK IF 5 OR MORE BYTES LEFT IN BUFFER AND BRANCH ACCORDINGLY TO   *
* FILL BUFFER COMPLETELY.                                             *
***********************************************************************

DUMP60   DS    0H
         CL    R3,=A(5)                 AT LEAST 5 BYTES LEFT?
         BL    DUMP80                   NO

***********************************************************************
* FIVE OR MORE BYTES LEFT IN BUFFER, THEN FILL 4 AT A TIME UNTIL LESS *
* THEN 5 BYTES ARE LEFT, THEN BRANCH ACCORDINGLY TO FILL BUFFER.      *
***********************************************************************

         UNPK  0(9,R6),0(5,R2)          UNPACK 4 BYTES
         TR    0(8,R6),HEXTAB2          CONVERT TO PRINTABLE HEX
         LA    R2,4(0,R2)               BUMP UP DATA POINTER
         MVI   8(R6),C' '               ALLOW ONE PADDING BLANK
         LA    R6,9(0,R6)               BUMP UP BUFFER POINTER
         SL    R3,=A(4)                 DECREMENT LENGTH LEFT TO DO
         CL    R8,=A(5)                 FIRST FOUR WORDS OUT ?
         BNE   *+8                      NO, SKIP
         LA    R6,1(0,R6)               YES, EXTRA SPACE
         BCT   R8,DUMP60                CONVERT IF SPACE LEFT ON LINE
         B     DUMPEXIT                 ELSE HAVE DONE OUR JOB

***********************************************************************
* CHECK THE NUMBER OF BYTES LEFT TO FILL AND BRANCH ACCORDINGLY TO    *
* FILL BUFFER COMPLETELY. IF FULL THEN BRANCH TO END PROGRAM.         *
***********************************************************************

DUMP80   DS    0H
         SLL   R3,2                     GET A BRANCH INDEX
         B     *+4(R3)                  USE A BRANCH TABLE
         B     DUMPEXIT                 NO MORE BYTES LEFT
         B     DUMPL1                   ONE BYTE LEFT
         B     DUMPL2                   TWO BYTES LEFT
         B     DUMPL3                   3 BYTES LEFT

***********************************************************************
* FOUR BYTES LEFT TO FILL, FILL IT AND BRANCH TO END PROGRAM.         *
***********************************************************************

DUMPL4   DS    0H
         MVC   12(4,R13),0(R2)          MOVE IN LAST 4 BYTES
         UNPK  0(9,R6),12(5,R13)        SPREAD OUT HEX DIGITS
         TR    0(8,R6),HEXTAB2          CONVERT TO PRINTABLE HEX
         LA    R2,4(0,R2)               BUMP UP DATA PTR
         MVI   8(R6),C' '               PAD
         B     DUMPEXIT                 DUMP COMPLETE

***********************************************************************
* THREE BYTES LEFT TO FILL, FILL IT AND BRANCH TO END PROGRAM.        *
***********************************************************************

DUMPL3   DS    0H
         MVC   12(3,R13),0(R2)          MOVE IN LAST 3 BYTES
         UNPK  0(7,R6),12(4,R13)        SPREAD OUT HEX DIGITS
         TR    0(6,R6),HEXTAB2          CONVERT TO PRINTABLE HEX
         LA    R2,3(0,R2)               BUMP UP DATA PTR
         MVI   6(R6),C' '               PAD
         B     DUMPEXIT                 DUMP COMPLETE

***********************************************************************
* TWO BYTES LEFT TO FILL, FILL IT AND BRANCH TO END PROGRAM.          *
***********************************************************************

DUMPL2   DS    0H
         MVC   12(2,R13),0(R2)          MOVE IN LAST 2 BYTES
         UNPK  0(5,R6),12(3,R13)        SPREAD OUT HEX DIGITS
         TR    0(4,R6),HEXTAB2          CONVERT TO PRINTABLE HEX
         LA    R2,2(0,R2)               BUMP UP DATA PTR
         MVI   4(R6),C' '               PAD
         B     DUMPEXIT                 DUMP COMPLETE

***********************************************************************
* ONE BYTE LEFT TO FILL, FILL IT AND BRANCH TO END PROGRAM.           *
***********************************************************************

DUMPL1   DS    0H
         MVC   12(1,R13),0(R2)          MOVE IN LAST 1 BYTE
         UNPK  0(3,R6),12(2,R13)        SPREAD OUT HEX DIGITS
         TR    0(2,R6),HEXTAB2          CONVERT TO PRINTABLE HEX
         LA    R2,1(0,R2)               BUMP UP DATA PTR
         MVI   2(R6),C' '               PAD

***********************************************************************
* PROGRAM IS FINISHED, RESTORE REGISTERS, AND PASS OUTPUT BUFFER BACK *
* TO CALLER.                                                          *
***********************************************************************

DUMPEXIT DS    0H
         ST    R2,0(0,R1)               SAVE NEW DATA POINTER
         ST    R4,8(0,R1)               SAVE NEW RELATIVE ADDRESS

         #STOP ,                        RETURN

         CNOP  0,8
HEXTAB1  DC    256C'.'
         ORG   HEXTAB1+X'81'                                   #DD99292
         DC    9AL1(*-HEXTAB1)      LOWER CASE A-I             #DD99292
         ORG   HEXTAB1+X'91'                   J-R             #DD99292
         DC    9AL1(*-HEXTAB1)                 S-Z             #DD99292
         ORG   HEXTAB1+X'A2'                                   #DD99292
         DC    9AL1(*-HEXTAB1)                                 #DD99292
         ORG   HEXTAB1+C' '
         DC    C' '
         ORG   HEXTAB1+C'<'
         DC    C'<'
         ORG   HEXTAB1+C'('
         DC    C'('
         ORG   HEXTAB1+C'+'
         DC    C'+'
         ORG   HEXTAB1+C'|'
         DC    C'|'
         ORG   HEXTAB1+C'&&'
         DC    C'&&'
         ORG   HEXTAB1+C'!'
         DC    C'!'
         ORG   HEXTAB1+C'$'
         DC    C'$'
         ORG   HEXTAB1+C'*'
         DC    C'*'
         ORG   HEXTAB1+C')'
         DC    C')'
         ORG   HEXTAB1+C';'
         DC    C';'
         ORG   HEXTAB1+C'¬'
         DC    C'¬'
         ORG   HEXTAB1+C'-'
         DC    C'-'
         ORG   HEXTAB1+C'/'
         DC    C'/'
         ORG   HEXTAB1+C','
         DC    C','
         ORG   HEXTAB1+C'%'
         DC    C'%'
         ORG   HEXTAB1+C'_'
         DC    C'_'
         ORG   HEXTAB1+C'>'
         DC    C'>'
         ORG   HEXTAB1+C'?'
         DC    C'?'
         ORG   HEXTAB1+C':'
         DC    C':'
         ORG   HEXTAB1+C'#'
         DC    C'#'
         ORG   HEXTAB1+C'@'
         DC    C'@'
         ORG   HEXTAB1+C''''
         DC    C''''
         ORG   HEXTAB1+C'='
         DC    C'='
         ORG   HEXTAB1+C'"'
         DC    C'"'
         ORG   HEXTAB1+C'{'
         DC    C'{'
         ORG   HEXTAB1+C'A'
         DC    9AL1(*-HEXTAB1)
         ORG   HEXTAB1+C'}'
         DC    C'}'
         ORG   HEXTAB1+C'J'
         DC    9AL1(*-HEXTAB1)
         ORG   HEXTAB1+C'S'
         DC    8AL1(*-HEXTAB1)
         ORG   HEXTAB1+C'0'
         DC    10AL1(*-HEXTAB1)
         ORG   ,

         ORG   *-C'0'
HEXTAB2  DS    0H
         ORG   *+C'0'
         DC    C'0123456789ABCDEF'

         #STARTWA ,
         #STOPWA ,

BUFDSECT DSECT ,R6
         ORG   BUFDSECT+(4*9)+2
BL80HEX  DS    0C
         ORG   BUFDSECT+(8*9)+2
BL130HEX DS    0C

         #DSECTS CVT
         IEZBITS ,
         END   ,
