/*****************************   REXX   ******************************/
/*********************************************************************/
/*                                                                   */
/*  member name:    #plist                         (C) Atos Origin   */
/*                                                                   */
/*  member type:                                                     */
/*                                                                   */
/*  Author:         V100740  BECKMANN              DATE: 2008-03-11  */
/*                                                                   */
/*  Description:    add entries to the personal dataset list ______  */
/*                  use XML like entries ____---___________________  */
/*                  _______________________________________________  */
/*                  _______________________________________________  */
/*                                                                   */
/*  History:                                                         */
/* ___date___ ver who comment                                        */
/* 2008-03-11 1.1 HB  _initial_                                      */
/* 2008-04-14 1.2 HB  - additional vars DSAPEVnn and DSAPDSnn in XML */
/*                      (DSAPETnn-DSAPEVnn-DSAPDSnn)                 */
/*                    - IBM default entry REFLIST always last        */
/*********************************************************************/
  _x_ = TRACE("n")
  parse upper arg _all_parms_
  signal on novalue name sub_novalue
  _x_ = sub_init() ;
  select ;
    when ( abbrev(_all_parms_,"V") = 1 ) ,
      then do ;
              _x_ = sub_version() ;
              exit
           end;
    when ( abbrev(_all_parms_,"H") = 1 ) ,
      then do ;
              _x_ = sub_help() ;
              exit
           end;
    when ( abbrev(_all_parms_,"?"  ) = 1 ) ,
      then do ;
              _x_ = sub_help() ;
              exit
           end;
    otherwise nop;
  end
  address ispexec
  "control errors return"
  _lib_ = "LIBRARY(ISPPROF)"
  _lib_ = ""
  tablenam = "ISRPLIST"
  _x_ = sub_add_plists() ;
  "CONTROL ERRORS RETURN"
  if custname = "" ,
  then do ;
           _additional_plist_commands = ""
       end;
  else do ;
           _additional_plist_commands = "#PLISTC #PLISTU"
           _additional_plist_commands = "#PLISTC"
       end;
  do i = 1 to words(_additional_plist_commands)
      _cmd_ = word(_additional_plist_commands,i)
      "select cmd("_cmd_")"
  end
  _sysnest_ = SYSVAR("SYSNEST")
  if _sysnest_ = "NO" ,
  then do ;
           zmsg000l = _msgid_"",
                             "todo:"add.0"",
                             " - ",
                             "deleted:"_del_count_"",
                             " - ",
                             "added:"_add_count_"",
                             " - ",
                             "errors:"_err_count_"",
                             " - ",
                             "skipped:"_skp_count_"",
                             ""
           "setmsg msg(ispz000) cond"
           com ="DSLIST"
           "DISPLAY PANEL(ISPBLANK) COMMAND(COM) RETBUFFR(RETBUFR)"
           retbufr = retbufr
       end;
 exit

 sub_init:
   parse value "" with _null_
   parse source xenv xtype xmyname xddname xdsname .
   _version_ = "1.2 (2008-04-14)"
   _msgid_ = xmyname": "
   _add_count_ = 0
   _del_count_ = 0
   _err_count_ = 0
   _skp_count_ = 0
   custchar = left(MVSVAR("SYMDEF","CUSTCHAR")"I",1)
   custname = MVSVAR("SYMDEF","CUSTname")
   gol.0 = 0
   _x_ = sub_define_plist_entries() ;
  return 0

  /* -------------------------------------------------------------- */
  /*                                                                */
  /* XML format                                                     */
  /* <entry name> <description>  up to 30 entries in the form       */
  /*                             <dsname/level-VOLSER-?>            */
  /*                             2nd parm (optional): VOLSER        */
  /*                             3rd parm (optional): -unknown ??? -*/
  /* sample:                                                        */
  /* <PARMLIB>    <Parmlib act.> <SYS1.PARMLIB>                     */
  /* <PARMLIBs>   <Parmlib all>  <SYS1.PARMLIB> ...                 */
  /*                             <SYS1.PARMLIB-SYSR01> ...          */
  /*                             <SYS1.PARMLIB-SYSR02> ...          */
  /*                             <SYS1.PARMLIB-SYSR11> ...          */
  /*                             <SYS1.PARMLIB-SYSR12>              */
  /*                                                                */
  /* -------------------------------------------------------------- */
 sub_define_plist_entries:
   custname = "ATOS" /* here fix for general ATOS entries */
   if custname = "",
   then _t_ = ""
   else _t_ = ""custname": "
   add.0 = 5
   add.1 = "<ME>",
           "<"_t_"my datasets>",
           "<'"userid()".**'>",
           ""
   add.2 = "<WE>",
           "<"_t_"MO datasets "custchar"ZA* "custchar"ZB*>",
           "<'"custchar"ZAPM.**'>",
           "<'"custchar"ZAPP.**'>",
           "<'"custchar"ZAP.**'>",
           "<'"custchar"ZBPM.**'>",
           "<'"custchar"ZBPP.**'>",
           "<'"custchar"ZBP.**'>",
           ""
   add.3 = "<WEZA>",
           "<"_T_"MO datasets "custchar"ZA*>",
           "<'"custchar"ZAPM.**'>",
           "<'"custchar"ZAPP.**'>",
           "<'"custchar"ZAP.**'>",
           ""
   add.4 = "<WEZB>",
           "<"_t_"MO datasets "custchar"ZB*>",
           "<'"custchar"ZBPM.**'>",
           "<'"custchar"ZBPP.**'>",
           "<'"custchar"ZBP.**'>",
           ""
   add.5 = "<CEE>",
           "<"_T_"CEE (language env.)>",
           "<'SYS9.CEE*.**'>",
           ""

  return 0

 sub_version:
  _t_ = ""
  _t_ = ""_t_""_msgid_"Version "_version_""
  zmsg000s = ""
  zmsg000l = _t_
  address ispexec "SETMSG MSG(ispz000) COND"
  return 0

 sub_help:
  x=sub_header()
  x=gol("                                                            ")
  x=gol("function:                                                   ")
  x=gol(" generate additional entries in personal dslist             ")
  x=gol("                                                            ")
  x=gol("                                                            ")
  x=gol(" These "add.0" entries are defined:                         ")
  x=gol("                                                            ")
  do i = 1 to add.0
        parse var add.i "<" _entry_ ">" "<"_desc_">"  _dsnames_
        x=gol("  "left("<"_entry_">",10)" <"_desc_">")
        do forever
           parse var _dsnames_ "<" _dsname_ ">" _dsnames_
           _dsname_  = strip(_dsname_)
           _dsnames_ = strip(_dsnames_)
           if _dsname_ = "" ,
           then leave
           x=gol(copies(" ",15)""_dsname_"") ;
           if _dsnames_ = "" ,
           then do;
                    x=gol(" ") ;
                    leave
                end;
        end
  end
  x=gol("                                                            ")
  _x_ = sub_temp()
   return 0

 sub_header:
  x=gol(""xmyname" - " _version_                                    "")
  x=gol("                                                            ")
    return 0

 gol:
   /* generate output lines */
   parse arg output_line
   gol.0 = gol.0 + 1
   gidx = gol.0
   gol.gidx = output_line
   return 0

 sub_temp:
    parse arg stemvar
    if stemvar = _null_ ,
    then stemvar = "gol."
    finame = "DD"time("S")
    tmp.0 = gol.0
    ADDRESS TSO
    "alloc fi("finame") recfm(f,b) lrecl(80) ",
           "new delete cylinder",
           "UNIT(VIO) " ,
           "space(1,1) reuse dsorg(PS) "
    "EXECIO * DISKW "finame" (STEM "stemvar" FINIS)"
    _x_ = sub_show("D="finame" F=BROWSE ")
    "FREE FI("finame")"
   return 0

 sub_show:
   parse arg 1 . "D=" ddname . ,
             1 . "F=" ddfunc . ,
             1 . "M=" ddmem  . ,
             1 .
          idname = overlay("ID",ddname,1,2)
          select ;
              when ( ddfunc = "EDIT"   ) then nop ;,
              when ( ddfunc = "VIEW"   ) then nop ;,
              when ( ddfunc = "BROWSE" ) then nop ;,
              otherwise do;
                     ddfunc = "BROWSE"
                        end;
          end;
        ADDRESS ISPEXEC
          "LMINIT DATAID(idname)   DDNAME("finame") enq(shr"
          ispf_service_parms = "PANEL(ISREDDE) MEMBER("xmyname")"
          if ddmem = _null_ ,
          then ispf_service_parms = _null_
          else ispf_service_parms = "MEMBER("ddmem")"
          if ddfunc = "EDIT" ,
          then do
                   "CONTROL ERRORS CANCEL"
               end
          ispf_service = ddfunc
          ""ispf_service " DATAID("idname") " ispf_service_parms
          "LMFREE DATAID("idname")                 "
   return 0

 sub_prepare:
  "TBTOP  "tablenam ""_lib_
  return 0

 sub_add_plists:
  _x_ = sub_prepare() ;
   do i = add.0 to 1 by  -1
      _x_ = sub_add_line(add.i) ;
   end

  /* -------------------------------------------------------------- */
  /*                                                                */
  /* What sorting order is preferred? Any good idea?                */
  /*                                                                */
  /* -------------------------------------------------------------- */
  /*                                                                */
  /* sortlist = "DSADESCP,C,A ZCURTB,C,A"                           */
   sortlist = "ZCURTB,C,A"
   "TBSORT" tablenam "FIELDS("sortlist")"
   rcode = rc
   _x_ = sub_reorder_specials() ;

  return 0

  /* -------------------------------------------------------------- */
  /* - get the first line of the table as a sample                  */
  /* - parse the given string into the appropriate table variables  */
  /*       and override the values of the sample line               */
  /* - delete all lines with the same value in ZCURTB               */
  /* - add the new line at the top                                  */
  /* -------------------------------------------------------------- */
 sub_add_line:
  _x_ = sub_table_vars("INIT") ;
  parse arg _parms_
  "TBSKIP "tablenam "NUMBER(1)"
  "TBGET  "tablenam ""_lib_
  parse var _parms_ 1 . ,
                      "<" ZCURTB    ">" ,
                      "<" DSADESCP  ">" ,
                      "<" XMLVAL01  ">" ,
                      "<" XMLVAL02  ">" ,
                      "<" XMLVAL03  ">" ,
                      "<" XMLVAL04  ">" ,
                      "<" XMLVAL05  ">" ,
                      "<" XMLVAL06  ">" ,
                      "<" XMLVAL07  ">" ,
                      "<" XMLVAL08  ">" ,
                      "<" XMLVAL09  ">" ,
                      "<" XMLVAL10  ">" ,
                      "<" XMLVAL11  ">" ,
                      "<" XMLVAL12  ">" ,
                      "<" XMLVAL13  ">" ,
                      "<" XMLVAL14  ">" ,
                      "<" XMLVAL15  ">" ,
                      "<" XMLVAL16  ">" ,
                      "<" XMLVAL17  ">" ,
                      "<" XMLVAL18  ">" ,
                      "<" XMLVAL19  ">" ,
                      "<" XMLVAL20  ">" ,
                      "<" XMLVAL21  ">" ,
                      "<" XMLVAL22  ">" ,
                      "<" XMLVAL23  ">" ,
                      "<" XMLVAL24  ">" ,
                      "<" XMLVAL25  ">" ,
                      "<" XMLVAL26  ">" ,
                      "<" XMLVAL27  ">" ,
                      "<" XMLVAL28  ">" ,
                      "<" XMLVAL29  ">" ,
                      "<" XMLVAL30  ">" ,
                      .
  parse var XMLVAL01 1 DSAPET01 "-" DSAPEV01 "-" DSAPDS01
  parse var XMLVAL02 1 DSAPET02 "-" DSAPEV02 "-" DSAPDS02
  parse var XMLVAL03 1 DSAPET03 "-" DSAPEV03 "-" DSAPDS03
  parse var XMLVAL04 1 DSAPET04 "-" DSAPEV04 "-" DSAPDS04
  parse var XMLVAL05 1 DSAPET05 "-" DSAPEV05 "-" DSAPDS05
  parse var XMLVAL06 1 DSAPET06 "-" DSAPEV06 "-" DSAPDS06
  parse var XMLVAL07 1 DSAPET07 "-" DSAPEV07 "-" DSAPDS07
  parse var XMLVAL08 1 DSAPET08 "-" DSAPEV08 "-" DSAPDS08
  parse var XMLVAL09 1 DSAPET09 "-" DSAPEV09 "-" DSAPDS09
  parse var XMLVAL10 1 DSAPET10 "-" DSAPEV10 "-" DSAPDS10
  parse var XMLVAL11 1 DSAPET11 "-" DSAPEV11 "-" DSAPDS11
  parse var XMLVAL12 1 DSAPET12 "-" DSAPEV12 "-" DSAPDS12
  parse var XMLVAL13 1 DSAPET13 "-" DSAPEV13 "-" DSAPDS13
  parse var XMLVAL14 1 DSAPET14 "-" DSAPEV14 "-" DSAPDS14
  parse var XMLVAL15 1 DSAPET15 "-" DSAPEV15 "-" DSAPDS15
  parse var XMLVAL16 1 DSAPET16 "-" DSAPEV16 "-" DSAPDS16
  parse var XMLVAL17 1 DSAPET17 "-" DSAPEV17 "-" DSAPDS17
  parse var XMLVAL18 1 DSAPET18 "-" DSAPEV18 "-" DSAPDS18
  parse var XMLVAL19 1 DSAPET19 "-" DSAPEV19 "-" DSAPDS19
  parse var XMLVAL20 1 DSAPET20 "-" DSAPEV20 "-" DSAPDS20
  parse var XMLVAL21 1 DSAPET21 "-" DSAPEV21 "-" DSAPDS21
  parse var XMLVAL22 1 DSAPET22 "-" DSAPEV22 "-" DSAPDS22
  parse var XMLVAL23 1 DSAPET23 "-" DSAPEV23 "-" DSAPDS23
  parse var XMLVAL24 1 DSAPET24 "-" DSAPEV24 "-" DSAPDS24
  parse var XMLVAL25 1 DSAPET25 "-" DSAPEV25 "-" DSAPDS25
  parse var XMLVAL26 1 DSAPET26 "-" DSAPEV26 "-" DSAPDS26
  parse var XMLVAL27 1 DSAPET27 "-" DSAPEV27 "-" DSAPDS27
  parse var XMLVAL28 1 DSAPET28 "-" DSAPEV28 "-" DSAPDS28
  parse var XMLVAL29 1 DSAPET29 "-" DSAPEV29 "-" DSAPDS29
  parse var XMLVAL30 1 DSAPET30 "-" DSAPEV30 "-" DSAPDS30
  zcurtb = strip(zcurtb)
  select;
    when (abbrev(zcurtb,"REFLIST") = 1) then skp_count = skp_count + 1;
    otherwise ,
      do ;
          _x_ = sub_clear_existing_plist_entries(zcurtb) ;
          "TBTOP  "tablenam ""
          "CONTROL ERRORS CANCEL"
          "VGET (zdate)"
          DSACTIME = ZDATE        /* create date */
          "TBADD  "tablenam ""_lib_
          rcode = rc
          if rcode = 0 ,
          then do ;
                   _add_count_ = _add_count_ + 1
               end;
          else do ;
                   _err_count_ = _err_count_ + 1
               end;
      end;
  end;
  return 0

 sub_clear_existing_plist_entries: ,
    procedure expose tablenam _del_count_
  parse arg zcurtb
  zcurtb = strip(zcurtb)
  if zcurtb = "" then return 0
  namelist = "ZCURTB"
  vallist  = "EQ"
  do forever
          "TBTOP  "tablenam ""
          "TBSCAN "tablenam "ARGLIST("namelist") ",
                            "ROWID(rowid)",
                            "CONDLIST("vallist")"
          rcode = rc
          if rcode = 0 ,
          then do ;
                   "TBSKIP   "tablenam "row("rowid")"
                   "TBGET    "tablenam ""
                   "TBDELETE "tablenam
                   rcode = rc
                   if rcode = 0 ,
                   then do ;
                             _del_count_ = _del_count_ + 1
                        end;
               end;
          else do ;
                   leave ;
               end;
  end
  return 0

  /* -------------------------------------------------------------- */
  /*                                                                */
  /* entry REFLIST (IBM default) always last entry                  */
  /*                                                                */
  /* -------------------------------------------------------------- */
 sub_reorder_specials:
   _x_ = sub_table_vars("INIT") ;
   namelist = "ZCURTB"
   ZCURTB   = "REFLIST"
   vallist  = "EQ"
   "control errors cancel"
   "TBTOP  "tablenam ""
   "TBSCAN "tablenam "ARGLIST("namelist") ",
                     "ROWID(rowid)",
                     "CONDLIST("vallist")"
   rcode = rc
   if rcode = 0 ,
   then do ;
             "TBSKIP   "tablenam "row("rowid")"
             "TBGET    "tablenam ""
             _x_ = sub_table_vars("SAVE") ;
             "TBDELETE "tablenam
             "TBBOTTOM "tablenam ""
             _x_ = sub_table_vars("RESTORE") ;
             "TBADD    "tablenam
             rcode = rc
             if rcode = 0 ,
             then do ;
                  end;
        end;
  return 0

 sub_table_vars:
   parse arg _all_parms_
   select ;
      when ( _all_parms_ = "INIT" ) ,
        then do ;
           parse value "" with ,
            zcurtb     ,
            dsadescp   ,
            dsactime   ,
            dsautime   ,
            dsaactiv   ,
            dsastck    ,
            DSAPET01        DSAPEV01        DSAPDS01  ,
            DSAPET02        DSAPEV02        DSAPDS02  ,
            DSAPET03        DSAPEV03        DSAPDS03  ,
            DSAPET04        DSAPEV04        DSAPDS04  ,
            DSAPET05        DSAPEV05        DSAPDS05  ,
            DSAPET06        DSAPEV06        DSAPDS06  ,
            DSAPET07        DSAPEV07        DSAPDS07  ,
            DSAPET08        DSAPEV08        DSAPDS08  ,
            DSAPET09        DSAPEV09        DSAPDS09  ,
            DSAPET10        DSAPEV10        DSAPDS10  ,
            DSAPET11        DSAPEV11        DSAPDS11  ,
            DSAPET12        DSAPEV12        DSAPDS12  ,
            DSAPET13        DSAPEV13        DSAPDS13  ,
            DSAPET14        DSAPEV14        DSAPDS14  ,
            DSAPET15        DSAPEV15        DSAPDS15  ,
            DSAPET16        DSAPEV16        DSAPDS16  ,
            DSAPET17        DSAPEV17        DSAPDS17  ,
            DSAPET18        DSAPEV18        DSAPDS18  ,
            DSAPET19        DSAPEV19        DSAPDS19  ,
            DSAPET20        DSAPEV20        DSAPDS20  ,
            DSAPET21        DSAPEV21        DSAPDS21  ,
            DSAPET22        DSAPEV22        DSAPDS22  ,
            DSAPET23        DSAPEV23        DSAPDS23  ,
            DSAPET24        DSAPEV24        DSAPDS24  ,
            DSAPET25        DSAPEV25        DSAPDS25  ,
            DSAPET26        DSAPEV26        DSAPDS26  ,
            DSAPET27        DSAPEV27        DSAPDS27  ,
            DSAPET28        DSAPEV28        DSAPDS28  ,
            DSAPET29        DSAPEV29        DSAPDS29  ,
            DSAPET30        DSAPEV30        DSAPDS30  ,
            .
             end;
      when ( _all_parms_ = "SAVE" ) ,
        then do ;
                savcurtb=zcurtb
                savdescp=dsadescp
                savctime=dsactime
                savutime=dsautime
                savactiv=dsaactiv
                savstck =dsastck
                savpet01=dsapet01;savpev01=dsapev01;savpds01=dsapds01 ;
                savpet02=dsapet02;savpev02=dsapev02;savpds02=dsapds02 ;
                savpet03=dsapet03;savpev03=dsapev03;savpds03=dsapds03 ;
                savpet04=dsapet04;savpev04=dsapev04;savpds04=dsapds04 ;
                savpet05=dsapet05;savpev05=dsapev05;savpds05=dsapds05 ;
                savpet06=dsapet06;savpev06=dsapev06;savpds06=dsapds06 ;
                savpet07=dsapet07;savpev07=dsapev07;savpds07=dsapds07 ;
                savpet08=dsapet08;savpev08=dsapev08;savpds08=dsapds08 ;
                savpet09=dsapet09;savpev09=dsapev09;savpds09=dsapds09 ;
                savpet10=dsapet10;savpev10=dsapev10;savpds10=dsapds10 ;
                savpet11=dsapet11;savpev11=dsapev11;savpds11=dsapds11 ;
                savpet12=dsapet12;savpev12=dsapev12;savpds12=dsapds12 ;
                savpet13=dsapet13;savpev13=dsapev13;savpds13=dsapds13 ;
                savpet14=dsapet14;savpev14=dsapev14;savpds14=dsapds14 ;
                savpet15=dsapet15;savpev15=dsapev15;savpds15=dsapds15 ;
                savpet16=dsapet16;savpev16=dsapev16;savpds16=dsapds16 ;
                savpet17=dsapet17;savpev17=dsapev17;savpds17=dsapds17 ;
                savpet18=dsapet18;savpev18=dsapev18;savpds18=dsapds18 ;
                savpet19=dsapet19;savpev19=dsapev19;savpds19=dsapds19 ;
                savpet20=dsapet20;savpev20=dsapev20;savpds20=dsapds20 ;
                savpet21=dsapet21;savpev21=dsapev21;savpds21=dsapds21 ;
                savpet22=dsapet22;savpev22=dsapev22;savpds22=dsapds22 ;
                savpet23=dsapet23;savpev23=dsapev23;savpds23=dsapds23 ;
                savpet24=dsapet24;savpev24=dsapev24;savpds24=dsapds24 ;
                savpet25=dsapet25;savpev25=dsapev25;savpds25=dsapds25 ;
                savpet26=dsapet26;savpev26=dsapev26;savpds26=dsapds26 ;
                savpet27=dsapet27;savpev27=dsapev27;savpds27=dsapds27 ;
                savpet28=dsapet28;savpev28=dsapev28;savpds28=dsapds28 ;
                savpet29=dsapet29;savpev29=dsapev29;savpds29=dsapds29 ;
                savpet30=dsapet30;savpev30=dsapev30;savpds30=dsapds30 ;
             end;
      when ( _all_parms_ = "RESTORE" ) ,
        then do ;
                zcurtb  =savcurtb
                dsadescp=savdescp
                dsactime=savctime
                dsautime=savutime
                dsaactiv=savactiv
                dsastck =savstck
                dsapet01=savpet01;dsapev01=savpev01;dsapds01=savpds01 ;
                dsapet02=savpet02;dsapev02=savpev02;dsapds02=savpds02 ;
                dsapet03=savpet03;dsapev03=savpev03;dsapds03=savpds03 ;
                dsapet04=savpet04;dsapev04=savpev04;dsapds04=savpds04 ;
                dsapet05=savpet05;dsapev05=savpev05;dsapds05=savpds05 ;
                dsapet06=savpet06;dsapev06=savpev06;dsapds06=savpds06 ;
                dsapet07=savpet07;dsapev07=savpev07;dsapds07=savpds07 ;
                dsapet08=savpet08;dsapev08=savpev08;dsapds08=savpds08 ;
                dsapet09=savpet09;dsapev09=savpev09;dsapds09=savpds09 ;
                dsapet10=savpet10;dsapev10=savpev10;dsapds10=savpds10 ;
                dsapet11=savpet11;dsapev11=savpev11;dsapds11=savpds11 ;
                dsapet12=savpet12;dsapev12=savpev12;dsapds12=savpds12 ;
                dsapet13=savpet13;dsapev13=savpev13;dsapds13=savpds13 ;
                dsapet14=savpet14;dsapev14=savpev14;dsapds14=savpds14 ;
                dsapet15=savpet15;dsapev15=savpev15;dsapds15=savpds15 ;
                dsapet16=savpet16;dsapev16=savpev16;dsapds16=savpds16 ;
                dsapet17=savpet17;dsapev17=savpev17;dsapds17=savpds17 ;
                dsapet18=savpet18;dsapev18=savpev18;dsapds18=savpds18 ;
                dsapet19=savpet19;dsapev19=savpev19;dsapds19=savpds19 ;
                dsapet20=savpet20;dsapev20=savpev20;dsapds20=savpds20 ;
                dsapet21=savpet21;dsapev21=savpev21;dsapds21=savpds21 ;
                dsapet22=savpet22;dsapev22=savpev22;dsapds22=savpds22 ;
                dsapet23=savpet23;dsapev23=savpev23;dsapds23=savpds23 ;
                dsapet24=savpet24;dsapev24=savpev24;dsapds24=savpds24 ;
                dsapet25=savpet25;dsapev25=savpev25;dsapds25=savpds25 ;
                dsapet26=savpet26;dsapev26=savpev26;dsapds26=savpds26 ;
                dsapet27=savpet27;dsapev27=savpev27;dsapds27=savpds27 ;
                dsapet28=savpet28;dsapev28=savpev28;dsapds28=savpds28 ;
                dsapet29=savpet29;dsapev29=savpev29;dsapds29=savpds29 ;
                dsapet30=savpet30;dsapev30=savpev30;dsapds30=savpds30 ;
             end;
      otherwise nop ;
   end
  return 0

       /**************************************************************
        * Trap uninitialized variables                               *
        **************************************************************/
        sub_novalue:
        Say " "
        Say "Variable" ,
           condition("Description") "undefined in line" sigl":"
        Say sourceline(sigl)
        if sysenv           <> "FORE" then exit 8
        say "Report the error in this application along with the",
            "syntax used."
        exit 8

