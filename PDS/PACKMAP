PACKMAP  TITLE '- PACKMAP -  DASD VOLUME MAPPING UTILITY'
*---------------------------------------------------------------------*
*                                                                     *
*        Support Email Address: zOS.JES2@Gmail.com                    *
*                                                                     *
*---------------------------------------------------------------------*

***********************************************************************
*                     *                                               *
*   P A C K M A P     *                                               *
*                     *                                               *
***********************                                               *
*                                                                     *
*   FUNCTION :        PRODUCE DATASET/FREESPACE EXTENT LIST FOR       *
*                     ANY DASD VOLUME                                 *
*                                                                     *
*   REGISTER USAGE :   R0 - WORK REGISTER                             *
*                      R1 - WORK REGISTER                             *
*                      R2 - WORK REGISTER                             *
*                      R3 - WORK REGISTER                             *
*                      R4 - WORK REGISTER                             *
*                      R5 - WORK REGISTER                             *
*                      R6 - WORK REGISTER                             *
*                      R7 - WORK REGISTER                             *
*                      R8 - WORK REGISTER                             *
*                      R9 - WORK REGISTER                             *
*                     R10 - WORK REGISTER                             *
*                     R11 - BASE                                      *
*                     R12 - BASE                                      *
*                     R13 - SAVE AREA                                 *
*                     R14 - RETURN ADDRESS                            *
*                     R15 - RETURN CODE                               *
*                                                                     *
*   MACROS USED :     MANY                                            *
*                                                                     *
*   CONTROL BLOCK :   IECSDSL1 - DSCB DESCRIPTIONS                    *
*   DEPENDENCIES      DCBD     - DCB MAP                              *
*                     ICVAFBFL - CVAF BUFFER MAP                      *
*                     ICVAFPL  - CVAF PARAMETER LIST                  *
*                     IEZDEB   - DEB MAP                              *
*                     IEFJFCBN - JFCB MAP                             *
*                     IHAPSA   - PSA MAP                              *
*                     IEFTIOT1 - TIOT MAP                             *
*                     IEFUCBOB - UCB MAP                              *
*                                                                     *
*   ABEND CODES :     U100 - DISK DD STATEMENT NOT SUPPLIED           *
*                     U200 - INSUFFICIENT STORAGE TO CONTINUE         *
*                                                                     *
*   ATTRIBUTES :      AUTHORIZED                                      *
*                                                                     *
*   ROUTINES CALLED : MSGRTN - MESSAGE FORMATING SUBROUTINE           *
*                     HEXDUMP  - FORMAT HEX DUMP OUTPUT               *
*                     GETFMT5  - FORMAT5.DSCB TABLE SUBROUTINE        *
*                     SORTRTN  - TABLE SORT SUBROUTINE                *
*                                                                     *
*   MESSAGES ISSUED :  PAK0001I *** VTOC ERRORS EXIST ON VOLSER ***   *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*   HISTORY :         MAY/82 - #DD82130 - INITIAL INSTALL             *
*                     APR/88 - #DD88103 - 3380K SUPPORT               *
*                   APR/2001 - #DD01097 - CLEANUP ASSEMBLY ERRORS.    *
*                   MAR/2012 - #DD12062 - ADD EAV SUPPORT.            *
*                                                                     *
***********************************************************************

         ACONTROL OPTABLE(ZS3)     Assembly OPTCDE Table
         SPLEVEL  SET=6            Specify OS/390 R2 macro format
         SYSSTATE ARCHLVL=2        Assembly requires z/Architecture
         SYSSTATE OSREL=ZOSV1R13   Assembly requires z/OS 1.13 & higher

         MACRO ,
&NAME    FMTMSG
.**********************************************************************
.*                             FMTMSG                                 *
.*                             --------                               *
.* FUNCTION:                                                          *
.*       CREATE A VARIABLE LENGTH CHARACTER STRING FOR INPUT TO       *
.*       MSGRTN.                                                      *
.*                                                                    *
.* OUTPUT FORMAT:                                                     *
.*                                                                    *
.* NAME   DS   0CLXXX                                                 *
.*        DC   AL1(LENGTH)                                            *
.* LABEL  DC   CLN'TEXT'                                              *
.* LABEL  DC   NNC' '                                                 *
.*        DC   C'TEXT'                                                *
.*        DC   NNNC' '                                                *
.*                                                                    *
.*                                                                    *
.* THE OPERANDS ARE IN FORMAT 'TEXT' OR (LABEL,'TEXT') OR             *
.* (LABEL,'C',M) WHERE 'C' IS ONE CHAR AND M IS THE MULTPLCATN FACTOR *
.* (LABEL,'TEXT',L) WHERE 'TEXT' IS GT 1 CHAR AND L IS THE LENGTH     *
.* DESIRED FOR THE FIELD (TO BE PADDED OR TRUNCATED IN DC CL_'TEXT' ) *
.*   ANY NUMBER OF SEPARATE OPERANDS MAY BE SPECIFIED ON THE          *
.* MACRO CALL PROTOTYPE STMT. SOME EXAMPLES FOLLOW                    *
.* LABEL FMTMSG 'IEA001',(ID,' ',1),(,' ',20),'***',(MSG,'****',80)   *
.* WILL GENERATE FOLLOWING PARAMETER LISTS AND CONSTANTS              *
.* LABEL DS    0CL111                                                 *
.*       DC    AL1(110)       LENGTH OF TOTAL    MSG                  *
.*       DC    C'IEA001'      FIRST OPERAND                           *
.* ID    DC    1C' '          SECOND OPERAND                          *
.*       DC    20C' '         THIRD OPERAND                           *
.*       DC    C'***'          FOURTH OPERAND                         *
.* MSG   DC    CL80'***'       FIFTH OPERAND                          *
.**********************************************************************
         LCLC  &LBL   LABEL VARIABLE
         LCLA  &N1,&CNT,&LEN
         LCLC  &TEMP1
&CNT     SETA  1              . COUNT IS ONE
&LEN     SETA  0              . TOTAL LEN IS 0
&N1      SETA  N'&SYSLIST          . NUMBER OPERANDS
.LOOP1   ANOP
.* THIS LOOP ADDS UP ALL THE STRING LENGTHS
         AIF   (N'&SYSLIST(&CNT) NE 1).SUBS1
.* IF SUBSCRIPTED IE 'TEXT' AS OPPOSED (LABL,'TEXT') SKIP
&LEN     SETA  &LEN+K'&SYSLIST(&CNT)-2 .    ADD LENGTH
         AGO   .COUNT
.SUBS1   ANOP
         AIF   (T'&SYSLIST(&CNT,3) EQ 'O').SUBS3
.* IF THIRD SUBSET IS OMITTED USE LENGTH OF SECOND OPERAND
&LEN     SETA  &LEN+&SYSLIST(&CNT,3)  . ADD GIVEN LENGTH
         AGO   .COUNT
.SUBS3   ANOP
&LEN     SETA  &LEN+K'&SYSLIST(&CNT,2)-2 . ELSE USE LENGTH STRING 2
.COUNT   ANOP
&CNT     SETA  &CNT+1   . ADD ONE TO COUNT OF OPERANDS
         AIF   ('&CNT' LE '&N1').LOOP1
&LEN     SETA  &LEN+1     .   ADD 1 FOR LENGTH BYTE
&NAME    DS    0CL&LEN
&LEN     SETA  &LEN-1      .  SUBTRACT 1 FOR LENGTH BYTE
         DC    AL1(&LEN)                LENGTH OF MESSAGE
&CNT     SETA  0              . START AT BEGINNING
.LOOP2   ANOP
.* THIS LOOP GENERATES DEFINE CONSTANTS FOR FIELDS GIVEN
&CNT     SETA  &CNT+1         . ADD ONE
&LBL     SETC  ' '     . SET LABEL BLANK
.NOSETL  AIF   (N'&SYSLIST(&CNT) GT 1).SUBS4
.* IF MORE THAN 1 FIELD PROCESS AS SUCH
&LEN     SETA  K'&SYSLIST(&CNT)-2    . GET LENGTH OF STRING
&TEMP1   SETC  '&SYSLIST(&CNT)'         .  AND SET TEXT
         AGO   .GENLINE
.SUBS4   ANOP
&LBL     SETC  '&SYSLIST(&CNT,1)' . GENERATE LABEL
&LEN     SETA  K'&SYSLIST(&CNT,2)-2   . SET LENGTH OF STRING
&TEMP1   SETC  '&SYSLIST(&CNT,2)'   . GET CHAR STRING
         AIF   (T'&SYSLIST(&CNT,3) EQ 'O').SUBS5
&LEN     SETA  &SYSLIST(&CNT,3)   . GET LENGTH/MULT FACTOR
.* IF NO LENGTH OR MULT FACTOR GIVEN PROCESS
.SUBS5   AIF   (K'&SYSLIST(&CNT,2) NE 3).GENLINE
.* IF MORE THAN 1 CHAR LOG PROCESS AS LENGTH
&LBL     DC    &LEN.C&TEMP1
         AGO   .INCR2
.SUBS6   ANOP
.* NO LENGTH OR MULT FACTOR GIVEN SET LENGTH OF TEXT
&LEN     SETA  K'&SYSLIST(&CNT,2)-2   . SET LENGTH OF STRING
.GENLINE ANOP
.* GENERATE ASSEMBLER DEFINE FOR TEXT
&LBL     DC    CL&LEN.&TEMP1
.INCR2   ANOP
         AIF   ('&CNT' LT '&N1').LOOP2
         AGO   .MEND
.MEND    ANOP
         MEND

PACKMAP  #START ,                                                      *
               AMODE=CAP24,                                            *
               APARS=,                                                 *
               BASE=(R12,R11),                                         *
               WKDSECT=MAP,                                            *
               COPY=YES,                                               *
               LEVEL=#V001R03                                  #DD12062
         USING PSA,0
         TITLE '- PACKMAP -  INITIALIZATION'
*---------------------------------------------------------------------*
*        INITIALIZE ALL LIST FORM MACROS AND LOAD HEX FORMAT RTN      *
*---------------------------------------------------------------------*
         MVC   RDJFCB(1),=AL1(128)          OPTION BYTE
         MVC   ENQL(1),=AL1(192)            OPTION BYTE
         MVC   OPENLIST(1),=AL1(128)        OPTION BYTE
         WXTRN HEXDUMP
         ICM   R0,15,=V(HEXDUMP)            CHECK IF HEXDUMP AVAILABLE
         BNZ   START                        B. IF YES
         LOAD  EP=HEXDUMP,ERRET=VTOC0000    LOAD HEXDUMP RTN
START    DS    0H
         ST    R0,HEXRTN                    SAVE HEXDUMP ADDR
         LA    R1,HEXPARM+4                 POINT TO HEX PARMS
         ST    R1,HEXPARM                   SAVE PARM ADDRESS
         TITLE '- PACKMAP -  TIOT AND JFCB CHECKS'
*---------------------------------------------------------------------*
*        CHECK THE TIOT AND SETUP THE JFCB TO READ THE FORMAT4        *
*---------------------------------------------------------------------*
VTOC0000 DS    0H
         L     R1,PSATOLD                   >>--> TCB
         L     R1,TCBTIO-TCB(R1)            >>--> TIOT
         LA    R1,TIOENTRY-TIOT1(R1)        SKIP TIOT HEADER
VTOC0100 DS    0H
         CLC   VTOCDCB+DCBDDNAM-IHADCB(8),TIOEDDNM-TIOENTRY(R1)
         BE    VTOC0200
         SLR   R0,R0                        CLEAR REGISTER
         IC    R0,TIOELNGH-TIOENTRY(R1)     INSERT ENTRY LENGTH
         ALR   R1,R0                        POINT TO NEXT ENTRY
         CLI   TIOELNGH-TIOENTRY(R1),0      CHECK FOR TIOT END
         BNE   VTOC0100                     IF NOT CHECK ENTRY
         B     ERROR001                     IF NOT FOUND ERROR
VTOC0200 DS    0H
         MVC   DDNAME(8),VTOCDCB+DCBDDNAM-IHADCB
         MVC   WRKDEVT,MODDEVT                                 #DD12062
         LA    R2,DDNAME                                       #DD12062
         DEVTYPE (R2),                  GET DEVICE TYPE.       #DD12062*
               (DVAREA,DVAREAL),                               #DD12062*
               INFOLIST=INFOLIST,                              #DD12062*
               MF=(E,WRKDEVT)                                  #DD12062
         SLR   R0,R0                                           #DD88103
         SLR   R1,R1                                           #DD88103
         ICM   R1,3,DVACYL         LOAD # OF CYLS ON VOLUME    #DD12062
         SLR   R2,R2                                           #DD88103
         ICM   R2,3,DVATRK         LOAD # OF TRKS ON CYLINDER  #DD12062
         MR    R0,R2               CALC # OF TRKS ON VOLUME    #DD88103
         BCTR  R1,0                SUBTRACT 1 FOR TRACK ZERO   #DD88103
         ST    R1,LASTTRK                   SAVE LAST TRK ADDR
         MVC   TRKCYL(2),DVATRK             COPY TRKS PER CYL  #DD12062
         RDJFCB (VTOCDCB),MF=(E,RDJFCB)     READ THE JFCB
         MVC   VTOCJFCB+JFCBDSNM-INFMJFCB(44),FMT4DSNM
         MVC   VOLSER1(6),VTOCJFCB+JFCBVOLS-INFMJFCB
         MVC   VOLSER2(6),VTOCJFCB+JFCBVOLS-INFMJFCB
         MVC   VOLSER3(6),VTOCJFCB+JFCBVOLS-INFMJFCB
         TITLE '- PACKMAP -  OPEN ROUTINE'
*---------------------------------------------------------------------*
*        OPEN THE VTOC AND SAVE THE DEB AND UCB ADDRESSES             *
*---------------------------------------------------------------------*
         OPEN  (VTOCDCB,INPUT),TYPE=J,MF=(E,OPENLIST)
         TM    VTOCDCB+DCBOFLGS-IHADCB,DCBOFOPN
         BNO   ERROR001                     IF NOT OPEN ERROR
         L     R1,VTOCDCB+DCBDEBAD-IHADCB   LOAD DEB ADDRESS
         L     R1,DEBSUCBA-DEBBASIC(R1)     LOAD UCB ADDRESS
         ST    R1,@UCB             SAVE UCB ADDRESS
         UNPK  UCB1(5),UCBCHAN-UCBOB(3,R1)                     #DD99204
         TR    UCB1(4),TRTABLE1-C'0'                           #DD99204
         MVI   UCB1+4,C' '                                     #DD99204
         MVC   UCB2,UCB1              COPY DEVICE NUMBER       #DD99183
         TITLE '- PACKMAP -  HEADING INITIALIZATION'
*---------------------------------------------------------------------*
*        SET UP THE REPORT HEADING                                    *
*---------------------------------------------------------------------*
         #DATE DATE1,FORMAT='MMM DD,CCYY'   PUT DATE IN TITLE
         MVC   DATE2,DATE1                  COPY THE DATE
         TIME  DEC                          GET SYSTEM TIME
         ST    R0,DBL                       SAVE THE TIME
         MVC   TIME1(9),=X'4021207A20207A2020'
         ED    TIME1(9),DBL                 INSERT INTO TITLE
         MVC   TIME2(9),TIME1               COPY TIME
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#TITLE,MSGWORD,TITLE,HEADING1),VL,MF=(E,CALLL)
         TITLE '- PACKMAP -  FORMAT 5 DSCB ROUTINE'
*---------------------------------------------------------------------*
*        GET FREESPACE TABLE                                          *
*---------------------------------------------------------------------*
         L     R15,=A(GETFMT5)     A(FORMAT 5 EXTRACT RTN)     #DD99183
         CALL  (15),(VTOCDCB),VL,MF=(E,CALLL)
         LTR   R15,R15                      CHECK RETURN CODE
         BNZ   ERROR003                     IF ERROR REPORT IT
         ST    R1,FREESPCE                  SAVE FREESPACE ADDR
         TITLE '- PACKMAP -  GET VTOC TABLE'
*---------------------------------------------------------------------*
*        GET STORAGE SPACE TO HOLD VTOC INFO                          *
*---------------------------------------------------------------------*
VTOC0600 DS    0H
         GETMAIN VU,LA=TAB1SIZE,A=TAB1ADDR,MF=(E,GETMAINL)
         L     R2,TAB1ADDR                  LOAD START ADDR
         L     R5,TAB1ADDR+4                LOAD STORAGE LENGTH
         #BLANK 0(R2),LEN=(R5),PAD=X'00'    CLEAR THE STORAGE
         L     R4,TAB1SIZE                  LOAD RECORD LENGTH
         LA    R5,0(R5,R2)                  LOAD END   ADDR
         ST    R5,TAB1ADDR+4                SAVE END ADDRESS
         TITLE '- PACKMAP -  VOLUME RESERVATION'
*---------------------------------------------------------------------*
*        GET EXCLUSIVE CONTROL OF THE VTOC IF RUNNING BATCH           *
*---------------------------------------------------------------------*
         TESTAUTH FCTN=1,STATE=YES,RBLEVEL=1                   #DD88103
         LTR   R15,R15             CHECK IF AUTHORIZED         #DD88103
         BNZ   VTOC0700            B. IF NOT                   #DD88103
         MVC   RNAME(6),VOLSER1             ENQ ON THIS VOLSER
         RESERVE (QNAME,RNAME,E,6,SYSTEMS),RET=HAVE,UCB=@UCB,          X
               MF=(E,ENQL)
         TITLE '- PACKMAP -  READ THE VTOC'
*---------------------------------------------------------------------*
*        READ THE VTOC AND SAVE ALL THE RELEVENT INFORMATION          *
*---------------------------------------------------------------------*
VTOC0700 DS    0H
         SLR   R3,R3                        CLEAR COUNTER
         USING DSCBTAB,R2
VTOC0800 DS    0H
         LR    R1,R2                        COPY TABLE ADDRESS
         LA    R1,144(,R1)                  POINT PAST ENTRY
         C     R1,TAB1ADDR+4                CHECK FOR END
         BNL   ERROR002                     IF NO ROOM ERROR
         LR    R6,R2                        COPY TABLE ADDRESS
         LA    R6,4(,R6)                    MAKE ROOM FOR TTR0
         MVI   IOERROR,0                    CLEAR IO ERROR FLAG
         READ  READECB,SF,VTOCDCB,(R6),MF=(E,READL)
         CHECK READECB                      WAIT FOR THE I/O
         CLI   IOERROR,0                    CHECK FOR I/O ERROR
         BE    VTOC0900                     IF OK CONTINUE
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR6MSG,ERR7MSG,BLANKLNE),         X
               VL,MF=(E,CALLL)
         #SETRC 8                           SET RETURN CODE
         B     VTOC0800                     KEEP ON READING
VTOC0900 DS    0H
         CLI   DS1FMTID,X'00'               CHECK FOR FORMAT0
         BNE   VTOC1000                     IF NOT SKIP
         LA    R3,1(,R3)                    ADD 1 TO FREE COUNT
         B     VTOC0800                     CONTINUE READING
VTOC1000 DS    0H
         CLI   DS1FMTID,C'1'                CHECK FOR FORMAT1
         BNE   VTOC1100                     IF NOT KEEP CHECKIN
         CLI   DS1NOEPV,X'00'               CHECK EXTENT COUNT
         BNE   VTOC1400                     IF SOME PROCESS
         MVC   ERR5DSN,DS1DSNAM
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR5MSG,BLANKLNE),                 X
               VL,MF=(E,CALLL)
         B     VTOC0800                     SKIP THIS DSCB
VTOC1100 DS    0H
         CLI   DS2FMTID,C'2'                CHECK FOR FORMAT2
         BE    VTOC1400                     IF MATCH KEEP
         CLI   DS3FMTID,C'3'                CHECK FOR FORMAT3
         BE    VTOC1400                     IF MATCH KEEP
         CLI   DS4IDFMT,C'4'                CHECK FOR FORMAT4
         BNE   VTOC1200                     IF NOT CHECK NEXT
         MVC   CCHH(4),DS4VTOCE+2           POINT TO START CCHH
         BAL   R10,CCHHTOTT                 CONVERT TO TT
         MVC   VTOCTT(4),TT                 SAVE START TT
         ST    R6,HEXPARM+4                 SAVE START ADDRESS
         LA    R1,139(,R6)                  POINT TO END
         ST    R1,HEXPARM+8                 SAVE END ADDRESS
         NOTE  VTOCDCB                      GET RELATIVE TTR0
         MVC   HEXIN(4),DS4VTOCE+2          COPY CCHH
         STCM  R1,B'0010',HEXIN+4           SAVE RECORD NUMBER
         LA    R1,5                         LOAD FIELD LENGTH
         BAL   R10,HEXFORM                  CONVERT TO CHAR
         MVC   HEXKEYWD(31),=C'FORMAT4.DSCB AT   CCCCHHHHRR = '
         MVC   HEXKEYWD+18(10),HEXOUT       COPY CONVERTED CCHHR
         LA    R1,HEXPARM                   POINT TO PARM FIELD
         BAL   R10,HEXDUMPR                 PRINT RECORD IN HEX
         B     VTOC1400                     SAVE FORMAT4 INFO
VTOC1200 DS    0H
         CLI   DS5FMTID,C'5'                CHECK FOR FORMAT5
         BE    VTOC0800                     IF SO SKIP IT
         CLI   DS6FMTID,C'6'                CHECK FOR FORMAT6
         BNE   VTOC1300                     IF NOT SKIP
         ST    R6,HEXPARM+4                 SAVE START ADDRESS
         LA    R1,139(,R6)                  POINT TO END
         ST    R1,HEXPARM+8                 SAVE END ADDRESS
         NOTE  VTOCDCB                      GET RELATIVE TTR0
         XC    TT,TT                        CLEAR TT
         STCM  R1,B'1100',TT+2              SAVE TT
         STCM  R1,B'0010',HEXIN+4           SAVE RECORD NUMBER
         L     R1,TT                        LOAD RELATIVE TT
         A     R1,VTOCTT                    ADD VTOC CCHH
         ST    R1,TT                        SAVE REAL TT
         BAL   R10,TTTOCCHH                 CONVERT TO CCHH
         MVC   HEXIN(4),CCHH                COPY CCHH
         LA    R1,5                         LOAD FIELD LENGTH
         BAL   R10,HEXFORM                  CONVERT TO CHAR
         MVC   HEXKEYWD(31),=C'FORMAT6.DSCB AT   CCCCHHHHRR = '
         MVC   HEXKEYWD+18(10),HEXOUT       COPY CONVERTED CCHHR
         LA    R1,HEXPARM                   POINT TO PARM FIELD
         BAL   R10,HEXDUMPR                 PRINT RECORD IN HEX
         #SETRC 4                           SET RETURN CODE
         B     VTOC0800                     CONTINUE READING
VTOC1300 DS    0H
         ST    R6,HEXPARM+4                 SAVE START ADDRESS
         LA    R1,139(,R6)                  POINT TO END
         ST    R1,HEXPARM+8                 SAVE END ADDRESS
         NOTE  VTOCDCB                      GET RELATIVE TTR0
         XC    TT,TT                        CLEAR TT
         STCM  R1,B'1100',TT+2              SAVE TT
         STCM  R1,B'0010',HEXIN+4           SAVE RECORD NUMBER
         L     R1,TT                        LOAD RELATIVE TT
         A     R1,VTOCTT                    ADD VTOC CCHH
         ST    R1,TT                        SAVE REAL TT
         BAL   R10,TTTOCCHH                 CONVERT TO CCHH
         MVC   HEXIN(4),CCHH                COPY CCHH
         LA    R1,5                         LOAD FIELD LENGTH
         BAL   R10,HEXFORM                  CONVERT TO CHAR
         MVC   HEXKEYWD(31),=C'UNKNOWN DSCB AT   CCCCHHHHRR = '
         MVC   HEXKEYWD+18(10),HEXOUT       COPY CONVERTED CCHHR
         LA    R1,HEXPARM                   POINT TO PARM FIELD
         BAL   R10,HEXDUMPR                 PRINT RECORD IN HEX
         #SETRC 4                           SET RETURN CODE
         B     VTOC0800                     CONTINUE READING
VTOC1400 DS    0H
         NOTE  VTOCDCB                      GET RELATIVE TTR0
         ST    R1,DSCBTAB                   SAVE TTR0
         BXLE  R2,R4,VTOC0800               LOOP TILL END
         B     ERROR002                     TERMINATE
         TITLE '- PACKMAP -  VOLUME RELEASING'
*---------------------------------------------------------------------*
*        RELEASE CONTROL OF VTOC IF RUNNING BATCH                     *
*---------------------------------------------------------------------*
VTOC1500 DS    0H
         TESTAUTH FCTN=1,STATE=YES,RBLEVEL=1                   #DD88103
         LTR   R15,R15             CHECK IF AUTHORIZED         #DD88103
         BNZ   VTOC1600            B. IF NOT                   #DD88103
         DEQ   (QNAME,RNAME,6,SYSTEMS),RET=HAVE,MF=(E,ENQL)
         TITLE '- PACKMAP -  FREE UNUSED VTOC TABLE'
*---------------------------------------------------------------------*
*        FREE THE UNUSED STORAGE SPACE                                *
*---------------------------------------------------------------------*
VTOC1600 DS    0H
         ST    R2,TAB1ADDR+4                SAVE LAST ADDRESS
         SR    R5,R2                        CALC UNUSED SPACE
         FREEMAIN R,A=(R2),LV=(R5)          FREE UNUSED STORAGE
         TITLE '- PACKMAP -  GET EXTENT TABLE'
*---------------------------------------------------------------------*
*        CREATE EXTENT TABLE                                          *
*---------------------------------------------------------------------*
VTOC1700 DS    0H
         GETMAIN VU,LA=TAB2SIZE,A=TAB2ADDR,MF=(E,GETMAINL)
         L     R2,TAB2ADDR                  LOAD START ADDR
         L     R5,TAB2ADDR+4                LOAD STORAGE LENGTH
         #BLANK 0(R2),LEN=(R5),PAD=X'00'    CLEAR THE STORAGE
         LA    R5,0(R5,R2)                  LOAD END   ADDR
         ST    R5,TAB2ADDR+4                SAVE END ADDRESS
         L     R2,TAB1ADDR                  LOAD START ADDRESS
         SLR   R3,R3                        CLEAR COUNTER
         L     R4,TAB1SIZE                  LOAD RECORD LENGTH
         L     R5,TAB1ADDR+4                LOAD END ADDRESS
         SR    R5,R4                        BACKUP 1 RECORD
         L     R6,TAB2ADDR                  LOAD START ADDR
         USING EXTABLE,R6
         TITLE '- PACKMAP -  FILL THE EXTENT TABLE'
*---------------------------------------------------------------------*
*        FILL THE EXTENT TABLE                                        *
*---------------------------------------------------------------------*
VTOC1800 DS    0H
         CLI   DS1FMTID,C'1'                CHECK FOR FORMAT1
         BNE   VTOC3800                     IF NOT TRY NEXT
         MVC   TEMPDSN,DS1DSNAM             SAVE THE DSNAME
         MVC   EXTENTS(1),DS1NOEPV          SAVE TOTAL EXTENTS
         XC    EXTENTNO,EXTENTNO            CLEAR THE COUNTER
         TM    DS1DSORG,DS1DSGPS            CHECK FOR "PS"
         BNO   VTOC1900                     IF NOT CONTINUE
         MVC   EXDSORG(2),=C'PS'            INSERT DSORG
         B     VTOC2400                     CHECK FOR "XXU"
VTOC1900 DS    0H
         TM    DS1DSORG,DS1DSGPO            CHECK FOR "PO"
         BNO   VTOC2000                     IF NOT CONTINUE
         MVC   EXDSORG(2),=C'PO'            INSERT DSORG
         B     VTOC2400                     CHECK FOR "XXU"
VTOC2000 DS    0H
         TM    DS1DSORG,DS1DSGDA            CHECK FOR "DA"
         BNO   VTOC2100                     IF NOT CONTINUE
         MVC   EXDSORG(2),=C'DA'            INSERT DSORG
         B     VTOC2400                     CHECK FOR "XXU"
VTOC2100 DS    0H
         TM    DS1DSORG,DS1DSGIS            CHECK FOR "IS"
         BNO   VTOC2200                     IF NOT CONTINUE
         MVC   EXDSORG(2),=C'IS'            INSERT DSORG
         B     VTOC2400                     CHECK FOR "XXU"
VTOC2200 DS    0H
         TM    DS1DSORG+1,DS1ORGAM          CHECK FOR "AM"
         BNO   VTOC2300                     IF NOT CONTINUE
         MVC   EXDSORG(2),=C'AM'            INSERT DSORG
         B     VTOC2400                     CHECK FOR "XXU"
VTOC2300 DS    0H
         MVC   EXDSORG(2),=C'??'            INSERT DSORG
VTOC2400 DS    0H
         TM    DS1DSORG,DS1DSGU             CHECK FOR "XXU"
         BNO   VTOC2500                     IF NOT CONTINUE
         MVI   EXDSORG+2,C'U'               FLAG AS UNMOVABLE
VTOC2500 DS    0H
         LA    R1,EXRECFM                   POINT TO RECFM
         TM    DS1RECFM,X'C0'               CHECK FOR RECFM = U
         BNO   VTOC2600                     IF NOT CONTINUE
         MVI   0(R1),C'U'                   INSERT RECFM
         LA    R1,1(,R1)                    ADVANCE POINTER
         B     VTOC2900                     CONTINUE
VTOC2600 DS    0H
         TM    DS1RECFM,X'80'               CHECK FOR RECFM = F
         BNO   VTOC2700                     IF NOT CONTINUE
         MVI   0(R1),C'F'                   INSERT RECFM
         LA    R1,1(,R1)                    ADVANCE POINTER
         B     VTOC2800                     CONTINUE
VTOC2700 DS    0H
         TM    DS1RECFM,X'40'               CHECK FOR RECFM = V
         BNO   VTOC2800                     IF NOT CONTINUE
         MVI   0(R1),C'V'                   INSERT RECFM
         LA    R1,1(,R1)                    ADVANCE POINTER
VTOC2800 DS    0H
         TM    DS1RECFM,X'10'               CHECK IF BLOCKED
         BNO   VTOC2900                     IF NOT CONTINUE
         MVI   0(R1),C'B'                   INSERT BLOCKED FLAG
         LA    R1,1(,R1)                    ADVANCE POINTER
VTOC2900 DS    0H
         TM    DS1RECFM,X'20'               CHECK FOR TRK OVFLO
         BNO   VTOC3000                     IF NOT CONTINUE
         MVI   0(R1),C'T'                   INSERT TRK OVF FLAG
         LA    R1,1(,R1)                    ADVANCE POINTER
VTOC3000 DS    0H
         TM    DS1RECFM,X'08'               CHECK FOR SPAN/STD
         BNO   VTOC3100                     IF NOT CONTINUE
         MVI   0(R1),C'S'                   INSERT FLAG
         LA    R1,1(,R1)                    ADVANCE POINTER
VTOC3100 DS    0H
         TM    DS1RECFM,X'04'               CHECK FOR ASA CNTL
         BNO   VTOC3200                     IF NOT CONTINUE
         MVI   0(R1),C'A'                   INSERT FLAG
         LA    R1,1(,R1)                    ADVANCE POINTER
VTOC3200 DS    0H
         TM    DS1RECFM,X'02'               CHECK FOR MACHINE C
         BNO   VTOC3300                     IF NOT CONTINUE
         MVI   0(R1),C'M'                   INSERT FLAG
         LA    R1,1(,R1)                    ADVANCE POINTER
VTOC3300 DS    0H
         SLR   R0,R0                                           #DD88103
         ICM   R0,3,DS1LRECL                LOAD RECORD LEN    #DD88103
         CVD   R0,DBL                       CONVERT
         MVC   EXLRECL(6),=X'402020202120'  MOVE EDIT MASK
         ED    EXLRECL(6),DBL+5             INSERT INTO OUTPUT
         SLR   R0,R0                                           #DD88103
         ICM   R0,3,DS1BLKL                 LOAD BLOCK LEN     #DD88103
         CVD   R0,DBL                       CONVERT
         MVC   EXBLKSIZ(6),=X'402020202120' MOVE EDIT MASK
         ED    EXBLKSIZ(6),DBL+5            INSERT INTO OUTPUT
         LA    R1,DS1EXT1                   POINT TO 1ST EXTENT
         LA    R9,3                         SETUP FOR 3 EXTENTS
VTOC3400 DS    0H
         BAL   R10,EXTUPDAT                 PROCESS THIS EXTENT
         LA    R1,10(,R1)                   POINT TO NEXT FIELD
         BCT   R9,VTOC3400                  LOOP FOR FORMAT1
         LR    R7,R2                        SAVE FORMAT1 ADDR
         TM    DS1DSORG,DS1DSGIS            CHECK FOR ISAM DSN
         BNO   VTOC3500                     IF NOT PROCEED
         CLC   DS1VOLSQ(2),=X'0001'         CHECK FOR 1ST VOL
         BNE   VTOC3500                     IF NOT PROCEED
         MVC   DSCBTAB,=C'DONE'             FLAG AS PROCESSED
         MVI   FORMATID,C'2'                PROCESS FORMAT2
         CLC   DS1PTRDS(5),=X'0000000000'   CHECK FOR ZEROS
         BE    ERROR004                     IF SO ERROR
         MVC   CCHH(4),DS1PTRDS             COPY FORWARD PTR
         BAL   R10,CCHHTOTT                 CONVERT TO TT
         L     R8,TT                        LOAD THIS TT
         S     R8,VTOCTT                    FIND RELATIVE TT
         STCM  R8,3,CCHH                    SAVE RELATIVE TT   #DD88103
         MVC   CCHH+2(1),DS1PTRDS+4         COPY R
         MVI   CCHH+3,X'00'                 ASSURE ZEROS
         L     R1,CCHH                      LOAD RECORD NUMBER
         BAL   R10,FINDDSCB                 FIND THE FORMAT2
         LTR   R15,R15                      CHECK RETURN CODE
         BNZ   ERROR004                     IF NOT FOUND ERROR
         CLI   DS2FMTID-DSCBTAB(R1),C'2'    CHECK FOR FORMAT2
         BNE   ERROR005                     IF NOT ERROR
         LR    R2,R1                        POINT TO FORMAT2
VTOC3500 DS    0H
         MVC   DSCBTAB,=C'DONE'             FLAG AS PROCESSED
         CLC   DS1PTRDS(5),=X'0000000000'   CHECK FOR ZEROS
         BE    VTOC3900                     IF SO QUIT PROCESS
         MVI   FORMATID,C'3'                PROCESS FORMAT3
         MVC   CCHH(4),DS1PTRDS             COPY FORWARD PTR
         BAL   R10,CCHHTOTT                 CONVERT TO TT
         L     R8,TT                        LOAD THIS TT
         S     R8,VTOCTT                    FIND RELATIVE TT
         STCM  R8,3,CCHH                    SAVE RELATIVE TT   #DD88103
         MVC   CCHH+2(1),DS1PTRDS+4         COPY R
         MVI   CCHH+3,X'00'                 ASSURE ZEROS
         L     R1,CCHH                      LOAD RECORD NUMBER
         BAL   R10,FINDDSCB                 FIND THE FORMAT3
         LTR   R15,R15                      CHECK RETURN CODE
         BNZ   ERROR004                     IF NOT FOUND ERROR
         CLI   DS3FMTID-DSCBTAB(R1),C'3'    CHECK FOR FORMAT3
         BNE   ERROR004                     IF NOT ERROR
         LR    R2,R1                        POINT TO FORMAT3
         LA    R1,DS3EXTNT                  POINT TO EXTENT
         LA    R9,4                         SETUP FOR 4 EXTENTS
VTOC3600 DS    0H
         BAL   R10,EXTUPDAT                 PROCESS THIS EXTENT
         LA    R1,10(,R1)                   POINT TO NEXT FIELD
         BCT   R9,VTOC3600                  LOOP FOR FORMAT3
         LA    R1,DS3ADEXT                  POINT TO EXTENT
         LA    R9,9                         SETUP FOR 9 EXTENTS
VTOC3700 DS    0H
         BAL   R10,EXTUPDAT                 PROCESS THIS EXTENT
         LA    R1,10(,R1)                   POINT TO NEXT FIELD
         BCT   R9,VTOC3700                  LOOP FOR FORMAT3
         B     VTOC3500
VTOC3800 DS    0H
         CLI   DS4IDFMT,C'4'                CHECK FOR FORMAT4
         BNE   VTOC4000                     IF NOT TRY NEXT
         MVC   EXTENTS(1),=X'01'            SET EXTENTS TO 1
         XC    EXTENTNO,EXTENTNO            ZERO EXTENT NUMBER
         MVC   TEMPDSN,=CL44'*** VTOC ***'  INSERT VTOC NAME
         LA    R1,DS4VTOCE                  POINT TO EXTENT
         BAL   R10,EXTUPDAT                 PROCESS THIS EXTENT
         MVC   DSCBTAB,=C'DONE'             FLAG ENTRY AS DONE
         B     VTOC4000                     SKIP EXTENT CHECK
VTOC3900 DS    0H
         LR    R2,R7                        RESTORE FMT1 ADDR
         CLC   EXTENTS(1),EXTENTNO+3        COMPARE EXTENTS
         BNE   ERROR006                     IF NOT ERROR
VTOC4000 DS    0H
         BXLE  R2,R4,VTOC1800               LOOP TILL END
         TITLE '- PACKMAP -  CHECK FOR UNCHAINED DSCBS'
*---------------------------------------------------------------------*
*        CHECK FOR UNCHAINED DSCBS                                    *
*---------------------------------------------------------------------*
         L     R2,TAB1ADDR                  LOAD START ADDRESS
         SLR   R3,R3                        CLEAR REGISTER
         L     R4,TAB1SIZE                  LOAD ENTRY SIZE
         L     R5,TAB1ADDR+4                LOAD END   ADDRESS
         SR    R5,R4                        BACKUP TO LAST REC
VTOC4100 DS    0H
         CLC   DSCBTAB,=C'DONE'             WAS DSCB CHAINED
         BE    VTOC4200                     IF SO CHECK NEXT
         XC    TT,TT                        CLEAR TRACK AREA
         MVC   TT+2(2),DSCBTAB              MOVE RELATIVE TRK
         L     R1,TT                        LOAD RELATIVE TT
         A     R1,VTOCTT                    ADD VTOC CCHH
         ST    R1,TT                        SAVE REAL TT
         BAL   R10,TTTOCCHH                 CONVERT TO CCHH
         MVC   HEXIN(4),CCHH                MOVE TO HEX AREA
         MVC   HEXIN+4(1),DSCBTAB+2         MOVE RELATIVE REC
         LA    R1,5                         LOAD INPUT LENGTH
         BAL   R10,HEXFORM                  CONVERT TO HEX
         MVC   HEXKEYWD(31),=C'UNCHAINED DSCB AT CCCCHHHHRR = '
         MVC   HEXKEYWD+18(10),HEXOUT       COPY CONVERTED CCHHR
         LA    R1,4(,R2)                    POINT TO DSCB START
         ST    R1,HEXPARM+4                 SAVE START ADDRESS
         LA    R1,139(,R1)                  POINT TO DSCB END
         ST    R1,HEXPARM+8                 SAVE END ADDRESS
         LA    R1,HEXPARM                   POINT TO PARM FIELD
         BAL   R10,HEXDUMPR                 PRINT RECORD IN HEX
         #SETRC 4                           SET RETURN CODE
VTOC4200 DS    0H
         BXLE  R2,R4,VTOC4100               LOOP THROUGH TABLE
         TITLE '- PACKMAP -  PROCESS FREESPACE EXTENTS'
*---------------------------------------------------------------------*
*        FILL IN THE FREESPACE EXTENTS                                *
*---------------------------------------------------------------------*
         ICM   R1,B'1111',FREESPCE          LOAD FREESPACE TBL
         BZ    VTOC4400                     IF NONE SKIP IT
         SLR   R9,R9                        CLEAR REGISTER
         ICM   R9,B'1111',0(R1)             LOAD EXTENT COUNT
         BZ    VTOC4400                     IF NONE SKIP IT
         STCM  R9,3,EXTENTS                 SAVE TOTAL EXTENTS #DD88103
         XC    EXTENTNO,EXTENTNO            CLEAR EXTENT COUNT
         LA    R3,4(,R1)                    POINT PAST COUNT
VTOC4300 DS    0H
         MVC   STRTRACK+2(2),0(R3)          INSERT START TRK
         SLR   R0,R0                                           #DD88103
         SLR   R1,R1                                           #DD88103
         ICM   R1,3,2(R3)                   LOAD # OF CYLS     #DD88103
         SLR   R2,R2                                           #DD88103
         ICM   R2,3,TRKCYL                  LOAD # OF TRKS/CYL #DD88103
         MR    R0,R2                        CALCULATE TO TRKS  #DD88103
         SLR   R2,R2                        CLEAR REGISTER
         IC    R2,4(R3)                     LOAD # OF TRKS
         AR    R2,R1                        CALC LENGTH
         ST    R2,EXTNTLEN                  INSERT EXTENT LEN
         BCTR  R2,R0                        DECREMENT FOR TRK 0
         SLR   R0,R0                                           #DD88103
         ICM   R0,3,0(R3)                   LOAD START TRACK   #DD88103
         AR    R2,R0                        ADD START TRACK    #DD88103
         ST    R2,ENDTRACK                  INSERT END TRK
         MVC   TT,STRTRACK                  COPY START TRK
         BAL   R10,TTTOCCHH                 CONVERT TO CCHH
         MVC   STRTCCHH,CCHH                INSERT START CCHH
         MVC   TT,ENDTRACK                  COPY END TRACK
         BAL   R10,TTTOCCHH                 CONVERT TO CCHH
         MVC   ENDCCHH,CCHH                 INSERT END   CCHH
         L     R1,EXTENTNO                  LOAD OLD COUNT
         LA    R1,1(,R1)                    ADD 1 TO COUNTER
         ST    R1,EXTENTNO                  STORE NEW COUNT
         ST    R1,EXTNTNO                   INSERT EXTENT NO.
         MVC   TOTEXTNT+2(2),EXTENTS        INSERT TOTAL EXTENTS
         MVC   EXDSNAME,=CL44'*** FREE SPACE ***'
         LA    R3,5(,R3)                    ADVANCE TABLE
         LA    R6,EXTNTEND                  ADVANCE TABLE
         SLR   R1,R1                                           #DD88103
         ICM   R1,3,TAB2CNT                 LOAD TOTAL COUNT   #DD88103
         LA    R1,1(,R1)                    ADD 1 TO COUNT
         STCM  R1,3,TAB2CNT                 SAVE TOTAL COUNT   #DD88103
         BCT   R9,VTOC4300                  LOOP FOR EACH EXTNT
         TITLE '- PACKMAP -  SORT THE TABLE'
*---------------------------------------------------------------------*
*        SORT THE EXTENT TABLE                                        *
*---------------------------------------------------------------------*
VTOC4400 DS    0H
         ST    R6,TAB2ADDR+4                SAVE END ADDRESS
         L     R2,TAB2ADDR                  LOAD START ADDRESS
         L     R15,=A(SORTRTN)     A(SORT ROUTINE)             #DD99183
         CALL  (15),(TAB2CNT,TAB2SIZE+2,SKEY,STYPE,(R2)),              X
               VL,MF=(E,CALLL)
         TITLE '- PACKMAP -  PRINT THE TABLE'
*---------------------------------------------------------------------*
*        PRINT THE EXTENT TABLE                                       *
*---------------------------------------------------------------------*
         L     R2,TAB2ADDR                  LOAD START ADDRESS
         DROP  R6
         USING EXTABLE,R2
         SLR   R3,R3                        CLEAR COUNTER
         L     R4,TAB2SIZE                  LOAD RECORD LENGTH
         L     R5,TAB2ADDR+4                LOAD END ADDRESS
         SR    R5,R4                        BACKUP 1 RECORD
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#TITLE,MSGWORD,TITLE,HEADING2,BLANKLNE,HEADING3,HEX
               ADING4),VL,MF=(E,CALLL)
VTOC4500 DS    0H
         L     R1,PREVEND                   LOAD END OF PREVIOUS
         LA    R1,1(,R1)                    ADD 1 TO END
         C     R1,STRTRACK                  COMPARE WITH THIS DSN
         BE    VTOC4700                     IF OK CONTINUE
         BL    VTOC4600                     IF LOWER..MISSING
         MVC   TRKERROR(30),=C'*** SHARED TRACKS ***         '
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR8MSG),VL,MF=(E,CALLL)
         OI    FLAG,EXTNTERR                SET EXTENT ERROR FLAG
         B     VTOC4700                     CONTINUE
VTOC4600 DS    0H
         MVC   TRKERROR(30),=C'*** MISSING TRACKS ***        '
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR8MSG),VL,MF=(E,CALLL)
         OI    FLAG,EXTNTERR                SET EXTENT ERROR FLAG
VTOC4700 DS    0H
         L     R0,STRTRACK                  LOAD START TRACK
         CVD   R0,DBL                       CONVERT
         OI    DBL+7,X'0F'                  CHANGE SIGN
         UNPK  RSTRT(5),DBL                 INSERT INTO OUTPUT
         L     R0,ENDTRACK                  LOAD END   TRACK
         CVD   R0,DBL                       CONVERT
         OI    DBL+7,X'0F'                  CHANGE SIGN
         UNPK  REND(5),DBL                  INSERT INTO OUTPUT
         L     R0,EXTNTLEN                  LOAD EXTENT LENGTH
         CVD   R0,DBL                       CONVERT
         MVC   LEN+1(6),=X'402020202120'    MOVE EDIT MASK
         ED    LEN+1(6),DBL+5               INSERT INTO OUTPUT
         L     R0,EXTNTNO                   LOAD EXTENT NUMBER
         CVD   R0,DBL                       CONVERT
         MVC   EXNO(4),=X'40202120'         MOVE EDIT MASK
         ED    EXNO(4),DBL+6                INSERT INTO OUTPUT
         L     R0,TOTEXTNT                  LOAD TOTAL EXTENTS
         CVD   R0,DBL                       CONVERT
         MVC   HEXIN(6),=X'402021204040'    MOVE EDIT MASK
         ED    HEXIN(4),DBL+6               EDIT TOTAL EXTENTS
         CLI   HEXIN+1,C' '                 CHECK FOR BLANK
         BE    VTOC4800                     IF SO TRY NEXT
         MVC   EXTOT(3),HEXIN+1             INSERT INTO OUTPUT
         B     VTOC5000                     PROCEED
VTOC4800 DS    0H
         CLI   HEXIN+2,C' '                 CHECK FOR BLANK
         BE    VTOC4900                     IF NOT TRY NEXT
         MVC   EXTOT(3),HEXIN+2             INSERT INTO OUTPUT
         B     VTOC5000                     PROCEED
VTOC4900 DS    0H
         MVC   EXTOT(3),HEXIN+3             INSERT INTO OUTPUT
VTOC5000 DS    0H
         MVC   DSN(44),EXDSNAME
         MVC   HEXIN(4),STRTCCHH            MOVE START CCHH
         LA    R1,4                         LOAD FIELD LENGTH
         BAL   R10,HEXFORM                  CONVERT TO CHAR
         MVC   STCCCHH+1(3),HEXOUT+1        INSERT CCC
         MVC   STCCCHH+5(2),HEXOUT+6        INSERT HH
         MVC   HEXIN(4),ENDCCHH             MOVE START CCHH
         LA    R1,4                         LOAD FIELD LENGTH
         BAL   R10,HEXFORM                  CONVERT TO CHAR
         MVC   ENDCCCHH+1(3),HEXOUT+1       INSERT CCC
         MVC   ENDCCCHH+5(2),HEXOUT+6       INSERT HH
         OC    EXDSORG(20),=20C' '          ASSURE UPPER CASE
         MVC   PRDSORG(3),EXDSORG           INSERT DSORG
         MVC   PRRECFM(5),EXRECFM           INSERT RECFM
         MVC   PRLRECL(6),EXLRECL           INSERT LRECL
         MVC   PRBLKSIZ(6),EXBLKSIZ         INSERT BLOCKSIZE
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,PRINTLNE),VL,MF=(E,CALLL)
         CLC   LASTTRK,ENDTRACK             CHECK FOR EOV
         BNL   VTOC5100                     IF NOT OVER SKIP
         TM    FLAG,SIZEERR                 CHECK FOR PREVIOUS
         BO    VTOC5100                     PROCEED
         MVC   TRKERROR(30),=C'*** EXTENDS PAST EOV ***      '
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR8MSG),VL,MF=(E,CALLL)
         OI    FLAG,SIZEERR                 SET EOV FLAG
VTOC5100 DS    0H
         CLC   ENDTRACK,PREVEND             COMPARE ENDS
         BNH   VTOC5200                     IF NOT HIGHER SKIP
         MVC   PREVEND,ENDTRACK             COPY NEW END
VTOC5200 DS    0H
         BXLE  R2,R4,VTOC4500               LOOP TILL END
         CLC   LASTTRK,ENDTRACK             CHECK FOR EOV
         BNL   VTOC5300                     IF SO PROCEED
         MVC   TRKERROR(30),=C'*** MISSING TRACKS ***        '
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR8MSG),VL,MF=(E,CALLL)
         OI    FLAG,EXTNTERR                SET EXTENT ERROR FLAG
VTOC5300 DS    0H
         TM    FLAG,VTOCERRS                CHECK FOR ANY ERRORS
         BNO   VTOC5400                     IF NONE TERMINATE
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#WTO,MSGWORD,WTOL2,ERR9MSG),VL,MF=(E,CALLL)
         #SETRC 8                           SET RETURN CODE
VTOC5400 DS    0H
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,BLANKLNE,ENDLINE),                 X
               VL,MF=(E,CALLL)
         #STOP ,
         TITLE '- PACKMAP -  PROCESS ERRORS'
*---------------------------------------------------------------------*
*        PROCESS ANY ERRORS THAT MAY OCCUR                            *
*---------------------------------------------------------------------*
ERROR001 DS    0H
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#WTO,MSGWORD,WTOL1,ERR1MSG),VL,MF=(E,CALLL)
         LA    R2,100                       SET ABEND CODE
         B     ABEND                        ABNORMALLY TERMINATE
ERROR002 DS    0H
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR10MSG),VL,MF=(E,CALLL)
         LA    R2,200                       SET ABEND CODE
         B     ABEND                        TERMINATE ABNORMALLY
ERROR003 DS    0H
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR3MSG,BLANKLNE),                 X
               VL,MF=(E,CALLL)
         OI    FLAG,SPACEERR                SET FREESPACE FLAG
         B     VTOC0600                     CONTINUE PROCESS
ERROR004 DS    0H
         MVC   ERR2DSN,TEMPDSN              COPY DATASET NAME
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR2MSG,BLANKLNE),                 X
               VL,MF=(E,CALLL)
         #SETRC 4                           SET CONDITION CODE
         B     VTOC3900                     CONTINUE PROCESS
ERROR005 DS    0H
         MVC   ERR2DSN,TEMPDSN              COPY DATASET NAME
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR2MSG,BLANKLNE),                 X
               VL,MF=(E,CALLL)
         #SETRC 4                           SET CONDITION CODE
         B     VTOC3500                     CONTINUE PROCESS
ERROR006 DS    0H
         MVC   ERR4DSN,TEMPDSN              COPY DATASET NAME
         SLR   R0,R0                        CLEAR REGISTER
         IC    R0,EXTENTS                   LOAD TOTAL EXTENTS
         CVD   R0,DBL                       CONVERT
         OI    DBL+7,X'0F'                  CHANGE SIGN
         UNPK  ERR4EX1(3),DBL               INSERT INTO OUTPUT
         SLR   R0,R0                        CLEAR REGISTER
         L     R0,EXTENTNO                  LOAD FOUND EXTENTS
         CVD   R0,DBL                       CONVERT
         OI    DBL+7,X'0F'                  CHANGE SIGN
         UNPK  ERR4EX2(3),DBL               INSERT INTO OUTPUT
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,ERR4MSG,BLANKLNE),                 X
               VL,MF=(E,CALLL)
         #SETRC 4                           SET CONDITION CODE
         B     VTOC4000                     CONTINUE PROCESS
ABEND    ABEND (R2)
         TITLE '- PACKMAP -  SUBRTN - CCHH >>--->> TTR'
*---------------------------------------------------------------------*
*        CONVERT CCHH TO RELATIVE TRACK ADDRESS                       *
*---------------------------------------------------------------------*
CCHHTOTT DS    0H
         STM   R0,R15,SAVEREG2              SAVE ALL REGS      #DD88103
         SLR   R0,R0                                           #DD88103
         SLR   R1,R1                                           #DD88103
         ICM   R1,3,CCHH                    LOAD CC            #DD88103
         SLR   R2,R2                                           #DD88103
         ICM   R2,3,TRKCYL                  LOAD TRKS/CYL      #DD88103
         MR    R0,R2                        CONVERT TO TRACKS  #DD88103
         SLR   R0,R0                                           #DD88103
         ICM   R0,3,CCHH+2                  LOAD TT            #DD88103
         AR    R1,R0                        CALC TOTAL TRKS    #DD88103
         ST    R1,TT                        SAVE RELATIVE TT
         LM    R0,R15,SAVEREG2              RESTORE ALL REGS   #DD88103
         BR    R10                          RETURN TO CALLER
         TITLE '- PACKMAP -  SUBRTN - TTR >>--->> CCHH'
*---------------------------------------------------------------------*
*        CONVERT RELATIVE TRACK ADDRESS TO CCHH                       *
*---------------------------------------------------------------------*
TTTOCCHH DS    0H
         STM   R0,R15,SAVEREGS              SAVE ALL REGS
         SLR   R2,R2                        CLEAR REGISTER
         L     R3,TT                        LOAD RELATIVE TRK
         SLR   R4,R4                                           #DD88103
         ICM   R4,3,TRKCYL                  LOAD TRKS / CYL    #DD88103
         DR    R2,R4                        CALCULATE CCHH
         STCM  R3,3,CCHH                    SAVE CC            #DD88103
         STCM  R2,3,CCHH+2                  SAVE HH            #DD88103
         LM    R0,R15,SAVEREGS              RESTORE ALL REGS
         BR    R10                          RETURN TO CALLER
         TITLE '- PACKMAP -  SUBRTN - PROCESS A SINGLE EXTENT'
*---------------------------------------------------------------------*
*        UPDATE THE EXTENT TABLE FOR ONE EXTENT                       *
*---------------------------------------------------------------------*
EXTUPDAT DS    0H
         DROP  R2
         USING EXTABLE,R6
         STM   R0,R15,SAVEREGS              SAVE ALL REGS
         CLC   0(10,R1),=10X'00'            CHECK IF NO EXTENT
         BER   R10                          IF NONE RETURN
         LR    R2,R6                        COPY TABLE ADDRESS
         LA    R2,144(,R2)                  POINT PAST ENTRY
         C     R2,TAB2ADDR+4                CHECK FOR END
         BNL   ERROR002                     IF NO ROOM ERROR
         MVC   STRTCCHH,2(R1)               SAVE START CCHH
         MVC   ENDCCHH,6(R1)                SAVE END   CCHH
         MVC   CCHH,STRTCCHH                COPY   START CCHH
         BAL   R10,CCHHTOTT                 CONVERT TO TT
         MVC   STRTRACK,TT                  INSERT START TT
         MVC   CCHH,ENDCCHH                 COPY   END   CCHH
         BAL   R10,CCHHTOTT                 CONVERT TO TT
         MVC   ENDTRACK,TT                  INSERT END   TT
         L     R7,STRTRACK                  LOAD START TT
         L     R8,ENDTRACK                  LOAD END   TT
         LA    R8,1(,R8)                    ADD 1 FOR TRK 0
         SR    R8,R7                        CALCULATE LENGTH
         ST    R8,EXTNTLEN                  INSERT EXTENT LEN
         L     R1,EXTENTNO                  LOAD OLD EXTENT CNT
         LA    R1,1(,R1)                    ADD 1 TO EXTENT CNT
         ST    R1,EXTENTNO                  SAVE NEW EXTENT CNT
         ST    R1,EXTNTNO                   INSERT EXTENT NO
         MVC   TOTEXTNT+3(1),EXTENTS        INSERT TOT EXTENTS
         MVC   EXDSNAME,TEMPDSN             INSERT DATASET NAME
         SLR   R1,R1                                           #DD88103
         ICM   R1,3,TAB2CNT                 LOAD TABLE 2 COUNT #DD88103
         LA    R1,1(,R1)                    ADD 1 TO COUNTER
         STCM  R1,3,TAB2CNT                 SAVE NEW TABLE CNT #DD88103
         LM    R0,R15,SAVEREGS              RESTORE ALL REGS
         LA    R6,EXTNTEND                  ADVANCE TABLE
         BR    R10                          RETURN TO CALLER
         TITLE '- PACKMAP -  SUBRTN - FIND A DSCB IN THE TABLE'
*---------------------------------------------------------------------*
*        FIND THE CHAINED FORMAT2 OR FORMAT3 DSCB                     *
*---------------------------------------------------------------------*
FINDDSCB DS    0H
         STM   R2,R14,SAVEREGS              SAVE ALL REGISTERS
         SLR   R15,R15                      ASSUME IT IS THERE
         L     R2,TAB1ADDR                  LOAD START ADDRESS
         SLR   R3,R3                        CLEAR COUNTER
         L     R4,TAB1SIZE                  LOAD RECORD LENGTH
         L     R5,TAB1ADDR+4                LOAD END ADDRESS
FIND0100 DS    0H
         C     R1,0(R2)                     IS THIS OUR DSCB
         BE    FIND0200                     IF MATCH GET OUT
         BXLE  R2,R4,FIND0100               LOOP TILL END
         LA    R15,8                        SET RETURN CODE
         B     FIND0999                     TERMINATE
FIND0200 DS    0H
         LA    R1,0(,R2)                    POINT TO DSCB
FIND0999 DS    0H
         LM    R2,R14,SAVEREGS              RESTORE ALL REGS
         BR    R10                          RETURN TO CALLER
         TITLE '- PACKMAP -  SUBRTN - CONVERT A TO C1'
*---------------------------------------------------------------------*
*        CONVERT A STRING TO HEX FORMAT                               *
*---------------------------------------------------------------------*
HEXFORM  DS    0H
         STM   R0,R15,SAVEREGS              SAVE ALL REGS
         LA    R6,HEXIN                     POINT TO INPUT
         LA    R7,HEXOUT                    POINT TO OUTPUT
HEX00000 DS    0H
         MVC   0(1,R7),0(R6)                MOVE ONE CHARACTER
         MVC   1(1,R7),0(R6)                REPEAT IT
         LA    R6,1(,R6)                    POINT TO NEXT ONE
         LA    R7,2(,R7)                    SKIP DOUBLE CHARS
         BCT   R1,HEX00000                  LOOP TILL DONE
         NC    HEXOUT(20),ANDTABLE          FLIP THE BITS
         TR    HEXOUT(20),TRTABLE2          TRANSLATE TO PRINT
         LM    R0,R15,SAVEREGS              RESTORE ALL REGS
         BR    R10                          RETURN TO CALLER
         TITLE '- PACKMAP -  SUBRTN - FORMAT STORAGE DUMP'
*---------------------------------------------------------------------*
*        PRINT STORAGE IN DUMP FORMAT                                 *
*---------------------------------------------------------------------*
HEXDUMPR DS    0H
         STM   R0,R15,SAVEREGS              SAVE ALL REGS
         XC    HEXPARM+12(4),HEXPARM+12     CLEAR 3RD PARM
         LA    R1,PRNTHEX                   POINT TO AREA
         ST    R1,HEXPARM+16                SAVE IN PARM
         MVI   HEXPARM+16,X'40'             80 CHARACTER DUMP
HEXDUMP0 DS    0H
         ICM   R15,B'1111',HEXRTN           LOAD HEX ROUTINE
         BNZ   HEXDUMP1                     IF NOT LOADED END
         MVC   HEXPARM+8(4),HEXPARM+4       ASSURE ONLY 1 LINE
         B     HEXDUMP2                     SKIP HEXDUMP RTN
HEXDUMP1 DS    0H
         LA    R1,HEXPARM                   LOAD HEX PARM
         BALR  R14,R15                      LINK TO ROUTINE
HEXDUMP2 DS    0H
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,HEXLINE),VL,MF=(E,CALLL)
         #BLANK HEXKEYWD,LEN=31             CLEAR DESCRIPTOR
         CLC   HEXPARM+8(4),HEXPARM+4       CHECK FOR MORE
         BH    HEXDUMP0                     IF MORE LOOP BACK
         L     R15,=A(MSGRTN)      A(MESSAGE PROCESSING RTN)   #DD99183
         CALL  (15),(#PRINT,MSGWORD,BLANKLNE),VL,MF=(E,CALLL)
         LM    R0,R15,SAVEREGS              RESTORE ALL REGS
         BR    R10
         TITLE '- PACKMAP -  SUBRTN - PROCESS READ I/O ERRORS'
*---------------------------------------------------------------------*
*        PROCESS ANY I/O ERRORS WHILE READING THE VTOC                *
*---------------------------------------------------------------------*
VTOCERR  DS    0H
         SYNADAF ACSMETH=BSAM
         MVC   SYNADBUF,0(R1)
         MVI   IOERROR,255
         SYNADRLS
         BR    R14
         TITLE '- PACKMAP -  CONSTANTS AND DSECTS'
*---------------------------------------------------------------------*
*                     CONSTANTS + DSECTS                              *
*---------------------------------------------------------------------*
VTOCDCB  DCB   DDNAME=DISK,LRECL=96,KEYLEN=44,BLKSIZE=96,DEVD=DA,      X
               MACRF=RP,RECFM=F,DSORG=PS,EODAD=VTOC1500,EXLST=EXTLIST, X
               SYNAD=VTOCERR,DCBE=VTOCDCBE                     #DD12062
VTOCDCBE DCBE  EADSCB=OK                                       #DD12062
EXTLIST  DS    0F                           *
         DC    X'87',AL3(VTOCJFCB)          *  DCB EXTENT LIST
VTOCJFCB DS    CL176                        *  DCB JFCB AREA
FMT4DSNM DC    44X'04'                      *  FORMAT4.DSCB
TAB1SIZE DC    F'144'                       *  ALLOW FOR
         DC    F'1440000'                   *    1 TO 10,000
TAB2SIZE DC    F'92'                        *  ALLOW FOR
         DC    F'920000'                    *    1 TO 10,000
SKEY     DC    H'04'                        *  SORT START OFFSET
STYPE    DC    C'A'                         *  ASCENDING SORT
QNAME    DC    CL8'SYSVTOC'                 *  QNAME FOR ENQ
INFOLIST DEVTYPE INFO=(DEVTYPE,DASD,SUFFIX)                    #DD12062
MODDEVT  DEVTYPE *-*,INFOLIST=INFOLIST,MF=L                    #DD12062
MODDEVTL EQU   *-MODDEVT                                       #DD12062
BLANKLNE FMTMSG ' '
TITLE    FMTMSG 'Disk Pack Mapping Utility'
HEADING1 FMTMSG 'Date = ',(DATE1,'MMM DD,CCYY'),(,' ',28),             X
               'Information For ',(VOLSER1,'  ',6),' On ',             X
               (UCB1,'  ',4),(,' ',41),'Time =',(TIME1,' HH:MM:SS')
HEADING2 FMTMSG 'Date = ',(DATE2,'MMM DD,CCYY'),(,' ',28),             X
               'Volume Map For ',(VOLSER2,'  ',6),' On ',(UCB2,'  ',4),X
               (,' ',42),'Time =',(TIME2,' HH:MM:SS')
HEADING3 FMTMSG 'Relative Trk   Extent  Extent ',(,'  ',44),           X
               'Hex Cyl/Trk (CCC/HH)'
HEADING4 FMTMSG 'Start /  End   Length  No./Of  Dataset Name',         X
               (,'  ',30),'    Start -  End',                          X
               '         Dsorg    Recfm    Lrecl    Blksize'
PRINTLNE FMTMSG (RSTRT,'-----'),' - ',(REND,'-----'),(LEN,'  -----'),  X
               ' ',(EXNO,' ---'),'/',(EXTOT,'---'),'  ',               X
               (DSN,'  ',44),(STCCCHH,' CCC/HH -'),                    X
               (ENDCCCHH,' CCC/HH '),(,' ',7),(PRDSORG,'   '),(,' ',6),X
               (PRRECFM,'     '),(,' ',2),(PRLRECL,'      '),(,' ',4), X
               (PRBLKSIZ,'      ')
ERR1MSG  FMTMSG 'IEC130I DISK     DD Statement Missing.'
ERR2MSG  FMTMSG 'Unable To Locate Format',(FORMATID,' '),              X
               '. DSCB On Volume For ',(ERR2DSN,'  ',44)
ERR3MSG  FMTMSG 'Error Occurred Building Freespace Table'
ERR4MSG  FMTMSG 'Extent Count Error For ',(ERR4DSN,'  ',44),           X
               ' Should Be ',(ERR4EX1,'   '),' Extents, But Found ',   X
               (ERR4EX2,'   ')
ERR5MSG  FMTMSG (ERR5DSN,'  ',44),' Has Zero Extents'
ERR6MSG  FMTMSG 'I/O Error Occurred While Reading VTOC...Synad :'
ERR7MSG  FMTMSG '   ',(SYNADBUF,'  ',128)
ERR8MSG  FMTMSG '*** Error ***',(,' ',18),(TRKERROR,'  ',30)
ERR9MSG  FMTMSG 'PAK0001I *** VTOC Errors Exist On ',                  X
               (VOLSER3,'      '),' ***'
ERR10MSG FMTMSG 'Insufficient Region Size To Map Volume'
HEXLINE  FMTMSG (HEXKEYWD,'  ',31),(PRNTHEX,'  ',80)
ENDLINE  FMTMSG (,'  ',48),'*** End Of Volume Map ***'

#PRINT   EQU   1    BATCH - ISSUE TO SYSPRINT
*                   TSO   - ISSUED TO SYSPRINT OR TERMINAL
*
#WTO     EQU   2    BATCH - WRITE TO OPERATOR (AUTO DOM AFTER 15 MSGS)
*                   TSO   - TPUT MESSAGE TO TSO TERMINAL
*                   NOTE: SECOND PARAMETER MUST BE LIST FORM WTO
*
#TITLE   EQU   3    INITIALIZE TITLE TEXT AREA (AUTOMATICALLY CENTRED)
*                   NOTE: THIRD...NTH PARAMETERS ARE USED AS HEADINGS
*
#HEADING EQU   4    RE-INITIALIZE HEADING AREA
*
#WTOR    EQU   5    BATCH - ISSUE WRITE TO OPERATOR WITH REPLY
*                   TSO   - ISSUE TPUT/TGET FROM TSO TERMINAL
*                   NOTE: SECOND PARAMETER MUST BE LIST FOR WTOR
*
#DOM     EQU   6    ISSUE DOM FOR OUTSTANDING WTO MESSAGES
*                   NOTE : SECOND...NTH PARAMETER MAY BE THE ADDRESS
*                          OF A PARTICUALR WTO TO BE DOMMED
*
#TPUT    EQU   7    ISSUE TPUT TO TSO TERMINAL
*                   NOTE : IGNORED WHEN RUNNING BATCH

WTOL1    WTO   ' ',ROUTCDE=(1,2,11),MF=L    *  LIST FORM WTO
WTOL2    WTO   ' ',ROUTCDE=(1,2,11),MF=L,DESC=(2)
ANDTABLE DC    50X'F00F'                    *  AND TABLE
TRTABLE1 DC    C'0123456789ABCDEF'                             #DD99204
TRTABLE2 DC    256X'00'                     *  TRANSLATE TABLE
         ORG   TRTABLE2                     *
         DC    C'0123456789ABCDEF'          *
         ORG   TRTABLE2+X'10'               *
         DC    C'1'                         *
         ORG   TRTABLE2+X'20'               *
         DC    C'2'                         *
         ORG   TRTABLE2+X'30'               *
         DC    C'3'                         *
         ORG   TRTABLE2+X'40'               *
         DC    C'4'                         *
         ORG   TRTABLE2+X'50'               *
         DC    C'5'                         *
         ORG   TRTABLE2+X'60'               *
         DC    C'6'                         *
         ORG   TRTABLE2+X'70'               *
         DC    C'7'                         *
         ORG   TRTABLE2+X'80'               *
         DC    C'8'                         *
         ORG   TRTABLE2+X'90'               *
         DC    C'9'                         *
         ORG   TRTABLE2+X'A0'               *
         DC    C'A'                         *
         ORG   TRTABLE2+X'B0'               *
         DC    C'B'                         *
         ORG   TRTABLE2+X'C0'               *
         DC    C'C'                         *
         ORG   TRTABLE2+X'D0'               *
         DC    C'D'                         *
         ORG   TRTABLE2+X'E0'               *
         DC    C'E'                         *
         ORG   TRTABLE2+X'F0'               *
         DC    C'F'                         *
         ORG   ,                            *
         #STARTWA ,                         *
         IHADVA DSECT=NO                DEVTYPE OUTPUT AREA    #DD12062
DVAREAL  EQU   *-DVAREA                 OUTPUT AREA LENGTH     #DD12062
WRKDEVT  DS    XL(MODDEVTL)             DEVTYPE PARAMETER LIST #DD12062
RDJFCB   RDJFCB (0),MF=L                    *  LIST FORM RDJFCB
OPENLIST OPEN  (0,INPUT),TYPE=J,MF=L        *  LIST FORM OPEN
ENQL     RESERVE (0,0,E,6,SYSTEMS),RET=HAVE,UCB=0,MF=L         #DD99183
@UCB     DS    F
GETMAINL GETMAIN VU,LA=0,A=0,MF=L           *  LIST FORM GETMAIN
READL    READ  READECB,SF,VTOCDCB,0,MF=L    *  LIST FORM READ
CALLL    CALL  ,(0,0,0,0,0,0,0,0,0,0,0,0),VL,MF=L
TEMPDSN  DS    CL44                         *  FORMAT1 DSNAME
DDNAME   DS    CL8                          *  DDNAME FROM DCB
SAVEREGS DS    16F                          *  REGS SAVE AREA
SAVEREG2 DS    16F                          *  REGS SAVE AREA2 #DD88103
IOERROR  DS    X                            *  SYNAD ERROR FLAG
HEXRTN   DS    F                            *  HEX ROUTINE ADDR
FREESPCE DS    F                            *  FREE SPACE TABLE
LASTTRK  DS    F                            *  LAST TRK ON VOL
TRKCYL   DS    H                            *  NO OF TRKS/CYL
VTOCTT   DS    F                            *  VTOC START TT
CCHH     DS    F                            *  CONVERSION CCHH
TT       DS    F                            *  CONVERSION TT
EXTENTS  DS    H                            *  TOTAL EXTENTS
EXTENTNO DS    F                            *  EXTENT NUMBER
RNAME    DS    CL6                          *  RNAME FOR ENQ
TAB1ADDR DS    D                            *  DSCB START + END
TAB2ADDR DS    D                            *  EXTENT STRT + END
TAB2CNT  DS    H                            *  EXTENT COUNTER
DBL      DS    D                            *  DBLEWORD WRK AREA
MSGWORD  DS    F                            *  MSGRTN WRK ADDR
PREVEND  DS    F                            *  PREV EXTENT END
HEXIN    DS    CL10                         *  CONVERSION INPUT
HEXOUT   DS    CL20                         *  CONVERSION OUTPUT
HEXPARM  DS    0F                           *
         DC    A(*-*)                       *  POINTER TO PARMS
         DC    A(*-*)                       *  HEX START ADDRESS
         DC    A(*-*)                       *  HEX END   ADDRESS
         DC    A(0)                         *  RELATIVE ADDRESS
         DC    X'40'                        *  FLAG BYTE
         DC    AL3(*-*)                     *  BUFFER ADDRESS
FLAG     DS    X                            *  ERROR FLAG
VTOCERRS EQU   X'01'                        *  ANY VTOC ERROR
EXTNTERR EQU   X'03'                        *  EXTENT ERROR
SIZEERR  EQU   X'05'                        *  EOV EXTENT ERROR
SPACEERR EQU   X'09'                        *  FREESPACE ERROR
         #STOPWA ,                          *
         DSECT ,                            *
DSCBTAB  DS    CL4                          *
         IECSDSL1 1                         *  FORMAT1 DSCB
         ORG   IECSDSL1                     *
         IECSDSL1 2                         *  FORMAT2 DSCB
         ORG   IECSDSL1                     *
         IECSDSL1 3                         *  FORMAT3 DSCB
         ORG   IECSDSL1+L'DS1DSNAM          *
         IECSDSL1 4                         *  FORMAT4 DSCB
         ORG   IECSDSL1                     *
         IECSDSL1 5                         *  FORMAT5 DSCB
         ORG   IECSDSL1                     *
         IECSDSL1 6                         *  FORMAT6 DSCB
DSCBEND  EQU   *                            *  END OF DSCB
         DCBD  DEVD=DA,DSORG=PS             *  DCB MAP
CVAFBUFF ICVAFBFL DSECT=YES                 *  CVAF BUFFER MAP
CVPL     ICVAFPL  DSECT=YES                 *  CVAF PARM LIST
         DSECT ,                            *
         IEZDEB   LIST=YES                  *  DEB MAP
         DSECT ,                            *
         IEFJFCBN LIST=YES                  *  JFCB MAP
         DSECT ,                            *
         IKJTCB ,                           *  TCB MAP
         DSECT ,                            *
         IEFTIOT1 ,                         *  TIOT MAP
         DSECT ,                            *
         IEFUCBOB LIST=NO                   *  UCB MAP
         DSECT ,                            *
EXTABLE  DS    0F                           *  ENTENT TABLE
STRTRACK DS    XL4                          *  - START REL TRK
ENDTRACK DS    XL4                          *  - END   REL TRK
STRTCCHH DS    XL4                          *  - START CCHH
ENDCCHH  DS    XL4                          *  - END   CCHH
EXTNTLEN DS    XL4                          *  - EXTENT LENGTH
EXTNTNO  DS    XL4                          *  - EXTENT NUMBER
TOTEXTNT DS    XL4                          *  - TOTAL EXTENTS
EXDSNAME DS    CL44                         *  - DATASET NAME
EXDSORG  DS    CL3                          *  - DSORG
EXRECFM  DS    CL5                          *  - RECFM
EXLRECL  DS    CL6                          *  - LRECL
EXBLKSIZ DS    CL6                          *  - BLKSIZE
EXTNTEND EQU   *                            *  - END OF TABLE
         PUSH  USING,PRINT
         PRINT ON,GEN
         DROP  ,
         TITLE '- MSGRTN -  MESSAGE FORMATING SUBROUTINE'
MSGRTN   #START REG1=R10,USING=(MSGWRK,R11),BASE=R12
         USING PSA,0
         TITLE '- MSGRTN -  WORK AREA INITIALIZATION ROUTINE.'
*---------------------------------------------------------------------*
*        INITIALIZE WORK AREA FIRST TIME AROUND                       *
*---------------------------------------------------------------------*
INITIAL0 DS    0H
         L     R2,4(R10)                    LOAD WORK AREA PTR
         ICM   R11,B'1111',0(R2)            LOAD WORK AREA
         BNZ   BRANCH00                     SKIP IF ALREADY DONE
         L     R3,=A(MSGWKLEN)              LOAD WORK AREA LENGTH
         GETMAIN R,LV=(R3)                  GET WORK SPACE
         ST    R1,0(R2)                     SAVE WORK AREA PTR
         LR    R11,R1                       COPY WORK AREA PTR
         LR    R2,R1                        POINT TO START
         LR    R4,R1                        POINT TO START
         SLR   R5,R5                        CLEAR REGISTER
         MVCL  R2,R4                        CLEAR WORK AREA
         LA    R1,DOMLIST                   POINT TO DOM LIST
         ST    R1,DOMPTR                    INITIALIZE POINTER
         MVI   TITLES,C' '                  INSERT A BLANK
         MVC   TITLES+1(255),TITLES         PROPAGATE BLANKS
         MVI   LINE,C' '                    MOVE IN A BLANK
         MVC   LINE+1(255),LINE             PROPAGATE BLANKS
         MVC   LINENO,=F'99'                FORCE FIRST TITLE
         MVC   MSGDCB(DMYDCBL),DMYDCB       INITIALIZE DCB
         LA    R1,EXITLIST                  POINT TO EXITLIST
         STCM  R1,B'0111',MSGDCB+DCBEXLSA-IHADCB
         LA    R1,PRNTJFCB                  POINT TO JFCB AREA
         ST    R1,EXITLIST                  SAVE JFCB ADDRESS
         MVI   EXITLIST,X'87'               SETUP EXITLIST
         MVC   OPENL(1),=AL1(143)           SETUP FOR OPEN
         MVC   RDJFCBL(1),=AL1(128)         SERUP FOR RDJFCB
         L     R1,PSATOLD                   LOAD TCB ADDRESS
         L     R1,TCBTIO-TCB(R1)            LOAD TIOT ADDRESS
         LA    R1,TIOENTRY-TIOT1(R1)        SKIP OVER HEADER
*---------------------------------------------------------------------*
*        SCAN FOR THE SYSPRINT FILE                                   *
*---------------------------------------------------------------------*
INITIAL1 DS    0H
         CLC   MSGDCB+DCBDDNAM-IHADCB(8),TIOEDDNM-TIOENTRY(R1)
         BE    INITIAL2                     IF SO OPEN IT
         SLR   R0,R0                        CLEAR REGISTER
         IC    R0,TIOELNGH-TIOENTRY(R1)     INSERT ENTRY LEN
         ALR   R1,R0                        POINT TO NEXT ONE
         CLI   TIOELNGH-TIOENTRY(R1),0      ENTRY LENGTH = 0
         BNE   INITIAL1                     IF NOT KEEP TRYING
         OI    MSGFLAG,NOPRINT              SET DDNAME FLAG
*---------------------------------------------------------------------*
*        SETUP SYSPRINT DCB TO SPECIFIED LRECL OR DEFAULT TO 133      *
*---------------------------------------------------------------------*
INITIAL2 DS    0H
         LA    R2,MSGDCB                    POINT TO DCB
         RDJFCB ((R2)),MF=(E,RDJFCBL)       READ THE JFCB
         CLI   PRNTJFCB+JFCRECFM-INFMJFCB,X'00'
         BNE   INITIAL3                     IF RECFM THERE SKIP
         OI    PRNTJFCB+JFCRECFM-INFMJFCB,JFCFIX+JFCRFB+JFCASA
INITIAL3 DS    0H
         CLC   PRNTJFCB+JFCLRECL-INFMJFCB(2),=H'00'
         BNE   INITIAL4                     IF LRECL THERE SKIP
         MVC   PRNTJFCB+JFCLRECL-INFMJFCB(2),=H'133'
INITIAL4 DS    0H
         CLC   PRNTJFCB+JFCBLKSI-INFMJFCB(2),=H'00'
         BNE   INITIAL5                     IF BLKSI THERE SKIP
         MVC   PRNTJFCB+JFCBLKSI-INFMJFCB(2),PRNTJFCB+JFCLRECL-INFMJFCB
INITIAL5 DS    0H
         CLC   PRNTJFCB+JFCBDSNM-INFMJFCB(44),=CL44'TERMFILE '
         BNE   INITIAL6                     IF NOT CONTINUE
         OI    MSGFLAG,NOPRINT              SET DDNAME FLAG
INITIAL6 DS    0H
         TM    MSGDCB+DCBOFLGS-IHADCB,DCBOFOPN
         BO    INITIAL7                     SKIP IF NOW OPEN
         TM    MSGFLAG,NOPRINT              CHECK FOR NO PRINT
         BO    INITIAL7                     SKIP IF NO PRINT
         OPEN  ((R2),(OUTPUT)),TYPE=J,MF=(E,OPENL)
         TM    MSGDCB+DCBOFLGS-IHADCB,DCBOFOPN
         BO    INITIAL7                     CONTINUE IF OPEN
         OI    MSGFLAG,NOPRINT              SET NOPRINT FLAG
*---------------------------------------------------------------------*
*        SAVE LRECL AND SETUP THE TITLE AREAS                         *
*---------------------------------------------------------------------*
INITIAL7 DS    0H
         LH    R3,PRNTJFCB+JFCLRECL-INFMJFCB
         CH    R3,=F'12'                    CHECK FOR MINIMUM
         BL    ERROR030                     IF LOWER ERROR
         BCTR  R3,R0                        DECREMENT LENGTH
         STH   R3,MSGLRECL                  SAVE MAXIMUM LENGTH
         SH    R3,=H'10'                    SUB PAGE NO. LENGTH
         STH   R3,TITLEN                    SAVE TITLE LENGTH
         LA    R5,TITLES                    POINT TO TITLE
         LA    R3,1(R3,R5)                  POINT TO PAGE AREA
         MVC   0(6,R3),=C' PAGE '           MOVE PAGE CONSTANT
         LA    R3,6(,R3)                    PNT PAST CONSTANT
         ST    R3,PAGEADDR                  SAVE PAGE NO. PTR
         L     R15,PSAAOLD                  LOAD ASCB ADDRESS
         CLC   ASCBJBNI-ASCB(4,R15),=F'0'   CHECK FOR JOBNM PTR
         BNE   BRANCH00                     IF NONE...TSO USER
         OI    MSGFLAG,TSOUSER              SET TSOUSER FLAG
         TITLE '- MSGRTN -  BRANCH TO PROPER MESSAGE ROUTINE.'
*---------------------------------------------------------------------*
*        BRANCH TO PROPER ROUTINE                                     *
*---------------------------------------------------------------------*
BRANCH00 DS    0H
         L     R3,0(R10)                    LOAD MESSAGE TYPE
         MH    R3,=H'04'                    CALC BRANCH OFFSET
         CH    R3,=H'28'                    IS TYPE VALID
         BH    ERROR020                     IF NOT TERMINATE
         B     BRANCH10(R3)                 BRANCH TO ROUTINE
BRANCH10 DS    0H
         B     ERROR020      (R3=00)        BRANCH FOR UNKNOWN
         B     PRINT000      (R3=04)        BRANCH FOR #PRINT
         B     WTO00000      (R3=08)        BRANCH FOR #WTO
         B     TITLE000      (R3=12)        BRANCH FOR #TITLE
         B     HEAD0000      (R3=16)        BRANCH FOR #HEADING
         B     WTOR0000      (R3=20)        BRANCH FOR #WTOR
         B     DOM00000      (R3=24)        BRANCH FOR #DOM
         B     TPUT0000      (R3=28)        BRANCH FOR #TPUT
         TITLE '- MSGRTN -  PROCESS #PRINT PARAMETERS.'
*---------------------------------------------------------------------*
*        PROCESS THE #PRINT PARAMETERS                                *
*---------------------------------------------------------------------*
PRINT000 DS    0H
         TM    MSGFLAG,NOPRINT              CHECK FOR DD CARD
         BO    ERROR010                     IF MISSING ERROR
         LA    R10,8(,R10)                  SKIP USED PARMS
PRINT010 DS    0H
         CLC   LINENO,=F'60'                PAGE LIMIT EXCEEDED
         BL    PRINT030                     IF NOT PRINT LINE
         L     R2,PAGENO                    LOAD OLD PAGE COUNT
         LA    R2,1(,R2)                    ADD 1 TO COUNT
         ST    R2,PAGENO                    SAVE NEW PAGE COUNT
         CVD   R2,DOUBLE                    CONVERT TO DECIMAL
         L     R2,PAGEADDR                  POINT TO TITLE AREA
         MVC   0(4,R2),PAGEMASK             MOVE EDIT MASK
         ED    0(4,R2),DOUBLE+6             EDIT PAGE NUMBER
         MVI   TITLES,C'1'                  SET PAGE EJECT
         MVI   HEADINGS,C'0'                SET LINE SKIP
         MVI   LINE,C'0'                    SET LINE SKIP
         PUT   MSGDCB,TITLES                PRINT TITLE
         LA    R5,HEADINGS                  POINT TO HEADING
         LA    R2,2                         SET LINECOUNT TO 2
         ST    R2,LINENO                    SAVE LINE COUNT
         ICM   R6,B'1111',HEADNOS           LOAD HEADING COUNT
         BZ    PRINT030                     IF NO HEADING SKIP
         LA    R2,1(,R2)                    ADD 1 FOR LINE SKIP
PRINT020 DS    0H
         PUT   MSGDCB,0(R5)                 PRINT HEADING
         LA    R5,256(,R5)                  POINT TO NEXT ONE
         LA    R2,1(,R2)                    ADD 1 TO LINE COUNT
         BCT   R6,PRINT020                  LOOP TILL ALL DONE
         ST    R2,LINENO                    SAVE LINE COUNT
PRINT030 DS    0H
         L     R2,0(R10)                    LOAD TEXT ADDRESS
         SLR   R5,R5                        CLEAR REGISTER
         ICM   R5,B'0001',0(R2)             LOAD TEXT LENGTH
         BZ    PRINT040                     CHECK FOR ZERO
         BCTR  R5,R0                        DECREMENT FOR EXEC
         EX    R5,EXECMVC1                  MVC LINE+1(?),1(R2)
PRINT040 DS    0H
         PUT   MSGDCB,LINE                  PRINT TEXT LINE
         MVI   LINE,C' '                    MOVE IN A BLANK
         MVC   LINE+1(254),LINE             PROPAGATE BLANKS
         L     R2,LINENO                    LOAD OLD LINECOUNT
         LA    R2,1(R2)                     ADD 1 TO LINECOUNT
         ST    R2,LINENO                    SAVE NEW LINECOUNT
         TM    0(R10),X'80'                 CHECK FOR PARM END
         BO    EXIT                         IF ALL DONE QUIT
         LA    R10,4(,R10)                  SKIP TO NEXT PARM
         B     PRINT010                     KEEP PRINTING
         TITLE '- MSGRTN -  PROCESS #WTO PARAMETERS.'
*---------------------------------------------------------------------*
*        PROCESS THE #WTO PARAMETERS                                  *
*---------------------------------------------------------------------*
WTO00000 DS    0H
         L     R4,8(R10)                    LOAD WTO LIST ADDR
         LA    R10,12(,R10)                 SKIP USED PARMS
         TM    MSGFLAG,TSOUSER              CHECK FOR TSO USER
         BO    WTOTPUT0                     IF SO ISSUE TPUT
         MVC   MCSFLAGS(2),2(R4)            SAVE MCS FLAGS
         LH    R5,0(R4)                     LOAD TEXT LENGTH
         LA    R4,0(R5,R4)                  POINT PAST TEXT
         MVC   DESCODES(4),0(R4)            DESC + ROUTE CODES
WTO00010 DS    0H
         L     R2,0(R10)                    LOAD MESSAGE TEXT
         SLR   R5,R5                        CLEAR REGISTER
         ICM   R5,B'0001',0(R2)             LOAD TEXT LENGTH
         BZ    WTO00050                     CHECK FOR ZERO
         BCTR  R5,R0                        DECREMENT FOR EXEC
         CH    R5,=H'123'                   CHECK FOR MAX - 124
         BNH   WTO00020                     IF OK CONTINUE
         LH    R5,=H'123'                   IF OVER 124 TRUNCATE
WTO00020 DS    0H
         EX    R5,EXECMVC2                  MVC WTOTEXT(?),1(R2)
         LA    R5,5(,R5)                    ALLOW FOR LEN + MCS
         STH   R5,WTOL                      SAVE IN PARM LIST
         LA    R4,WTOL                      POINT TO LIST FORM
         LA    R4,0(R5,R4)                  POINT PAST TEXT
         MVC   0(4,R4),DESCODES             DESC + ROUTE CODES
         LA    R1,WTOL                      POINT TO LIST FORM
         WTO   MF=(E,(R1))                  ISSUE WTO
         TM    DESCODES,B'11000000'         DESC CODE = 1 OR 2
         BO    WTO00030                     IF SO SAVE MSGID
         TM    DESCODES+1,B'00100000'       DESC CODE = 11
         BNO   WTO00050                     IF NOT DONT SAVE MSGID
WTO00030 DS    0H
         LR    R3,R1                        COPY MSGID
         L     R4,DOMPTR                    LOAD AVAILABLE PTR
         LA    R5,DOMEND                    POINT TO END OF LIST
         CR    R4,R5                        CHECK IF AT END
         BNE   WTO00040                     IF NOT JUST SAVE ID
         SH    R4,=H'04'                    BACK UP TO PREVIOUS
         OI    0(R4),X'80'                  SET END OF DOM LIST
         LA    R4,DOMLIST                   POINT TO DOM LIST
         DOM   MSGLIST=(R4)                 DOM ALL MESSAGES
         XC    DOMLIST(60),DOMLIST          CLEAR THE LIST
WTO00040 DS    0H
         ST    R3,0(R4)                     SAVE THIS MSGID
         LA    R4,4(,R4)                    POINT TO NEXT ONE
         ST    R4,DOMPTR                    SAVE NEW POINTER
WTO00050 DS    0H
         TM    0(R10),X'80'                 CHECK FOR PARM END
         BO    EXIT                         IF ALL DONE QUIT
         LA    R10,4(,R10)                  SKIP USED PARM
         B     WTO00010                     ISSUE NEXT WTO
WTOTPUT0 DS    0H
         L     R2,0(R10)                    LOAD TEXT ADDRESS
         SLR   R5,R5                        CLEAR REGISTER
         ICM   R5,B'0001',0(R2)             LOAD TEXT LENGTH
         BZ    WTOTPUT1                     CHECK FOR ZERO
         BCTR  R5,R0                        DECREMENT FOR EXEC
         EX    R5,EXECMVC1                  MVC LINE+1(?),1(R2)
WTOTPUT1 DS    0H
         LA    R5,1(,R5)                    RESTORE LENGTH
         TPUT  LINE+1,(R5)                  TPUT TEXT LINE
         MVI   LINE,C' '                    MOVE IN A BLANK
         MVC   LINE+1(255),LINE             PROPAGATE BLANKS
         TM    0(R10),X'80'                 CHECK FOR PARM END
         BO    EXIT                         IF ALL DONE QUIT
         LA    R10,4(,R10)                  SKIP TO NEXT PARM
         B     WTOTPUT0                     KEEP TPUTING
         TITLE '- MSGRTN -  PROCESS #TITLE PARAMETERS.'
*---------------------------------------------------------------------*
*        PROCESS THE #TITLE PARAMETERS                                *
*---------------------------------------------------------------------*
TITLE000 DS    0H
         LA    R10,8(,R10)                  SKIP USED PARMS
         L     R2,0(R10)                    LOAD TITLE ADDR
         LH    R6,TITLEN                    LOAD TITLE LENGTH
         BCTR  R6,R0                        DECREMENT FOR EXEC
         MVI   TITLES+1,C' '                MOVE IN A BLANK
         EX    R6,EXECMVC3                  MVC TITLES+2(?),TITLES+1
         LA    R6,1(,R6)                    RESET LENGTH
         SLR   R5,R5                        CLEAR REGISTER
         ICM   R5,B'0001',0(R2)             INSERT TEXT LENGTH
         CR    R5,R6                        CHECK FOR MAXIMUM
         BNH   TITLE010                     IF OK PROCEED
         LR    R5,R6                        TRUNCATE TO MAX LEN
TITLE010 DS    0H
         LH    R8,TITLEN                    LOAD TITLE LENGTH
         SR    R8,R5                        CALC DIFFERENCE
         BZ    TITLE020                     IF ZERO PROCEED
         SRL   R8,1                         DIV TO FIND OFFSET
TITLE020 DS    0H
         LA    R7,TITLES+1                  POINT TO TITLE LINE
         LA    R7,0(R8,R7)                  CENTER THE TITLE
         BCTR  R5,R0                        DECREMENT FOR EXEC
         EX    R5,EXECMVC4                  MVC 0(?,R7),1(R2)
         TM    0(R10),X'80'                 ANY MORE PARMS
         BO    EXIT                         IF NOT TERMINATE
         LA    R10,4(,R10)                  ADVANCE POINTER
         MVC   LINENO,=F'99'                SET LINECT TO MAX
         B     HEAD0010                     PROCESS ANY HEADINGS
         TITLE '- MSGRTN -  PROCESS #HEADING PARAMETERS.'
*---------------------------------------------------------------------*
*        PROCESS THE #HEADING PARAMETERS                              *
*---------------------------------------------------------------------*
HEAD0000 DS    0H
         LA    R10,8(,R10)                  SKIP USED PARMS
HEAD0010 DS    0H
         LA    R7,HEADINGS+1                POINT TO HEADINGS
         SLR   R6,R6                        CLEAR HEADING COUNTER
         ST    R6,HEADNOS                   SET COUNT TO ZERO
HEAD0020 DS    0H
         CH    R6,=H'06'                    CHECK FOR MAXIMUM
         BE    EXIT                         IF MAX TERMINATE
         L     R2,0(R10)                    LOAD HEADING TEXT
         MVI   0(R7),C' '                   MOVE IN A BLANK
         MVC   1(255,R7),0(R7)              PROPAGATE BLANKS
         SLR   R4,R4                        CLEAR REGISTER
         ICM   R4,B'0001',0(R2)             INSERT TEXT LENGTH
         BZ    HEAD0030                     IF ZERO TRY NEXT
         BCTR  R4,0                         DECREMENT FOR EXEC
         EX    R4,EXECMVC4                  MVC 0(?,R7),1(R2)
HEAD0030 DS    0H
         LA    R7,256(,R7)                  ADVANCE POINTER
         LA    R6,1(,R6)                    ADD 1 TO COUNTER
         ST    R6,HEADNOS                   SAVE HEADINGS COUNT
         TM    0(R10),X'80'                 ANY MORE PARMS
         BO    EXIT                         IF NOT TERMINATE
         LA    R10,4(,R10)                  POINT TO NEXT PARM
         B     HEAD0020                     PROCESS NEXT HEADING
         TITLE '- MSGRTN -  PROCESS #WTOR PARAMETERS.'
*---------------------------------------------------------------------*
*        PROCESS THE #WTOR PARAMETERS                                 *
*---------------------------------------------------------------------*
WTOR0000 DS    0H
         TM    MSGFLAG,TSOUSER              CHECK FOR TSO USER
         BO    PUTGET00                     IF SO ISSUE TPUT/TGET
         L     R4,8(R10)                    LOAD WTOR LIST ADDR
         LA    R10,12(,R10)                 SKIP USED PARMS
         MVC   WTORL(8),0(R4)               SAVE LEN/REPLY/ECB
         MVC   MCSFLAGS(2),10(R4)           SAVE MCS FLAGS
         LH    R5,8(R4)                     LOAD TEXT LENGTH
         LA    R4,8(R5,R4)                  POINT PAST TEXT
         MVC   DESCODES(4),0(R4)            DESC + ROUTE CODES
WTOR0010 DS    0H
         L     R2,0(R10)                    LOAD MESSAGE TEXT
         SLR   R5,R5                        CLEAR REGISTER
         ICM   R5,B'0001',0(R2)             LOAD TEXT LENGTH
         BZ    WTOR0030                     CHECK FOR ZERO
         BCTR  R5,R0                        DECREMENT FOR EXEC
         CH    R5,=H'123'                   CHECK FOR MAX - 124
         BNH   WTOR0020                     IF OK CONTINUE
         LH    R5,=H'123'                   IF OVER 124 TRUNCATE
WTOR0020 DS    0H
         EX    R5,EXECMVC2                  MVC WTOTEXT(?),1(R2)
         LA    R5,5(,R5)                    ALLOW FOR LEN + MCS
         STH   R5,WTOL                      SAVE IN PARM LIST
         LA    R4,WTOL                      POINT TO LIST FORM
         LA    R4,0(R5,R4)                  POINT PAST TEXT
         MVC   0(4,R4),DESCODES             DESC + ROUTE CODES
         LA    R1,WTORL                     POINT TO LIST FORM
         WTOR  MF=(E,(R1))                  ISSUE WTO
WTOR0030 DS    0H
         LR    R3,R1                        COPY MSGID
         L     R4,DOMPTR                    LOAD AVAILABLE PTR
         LA    R5,DOMEND                    POINT TO END OF LIST
         CR    R4,R5                        CHECK IF AT END
         BNE   WTOR0040                     IF NOT JUST SAVE ID
         SH    R4,=H'04'                    BACK UP TO PREVIOUS
         OI    0(R4),X'80'                  SET END OF DOM LIST
         LA    R4,DOMLIST                   POINT TO DOM LIST
         DOM   MSGLIST=(R4)                 DOM ALL MESSAGES
         XC    DOMLIST(60),DOMLIST          CLEAR THE LIST
WTOR0040 DS    0H
         ST    R3,0(,R4)                    SAVE THIS MSGID
         LA    R4,4(,R4)                    POINT TO NEXT ONE
         ST    R4,DOMPTR                    SAVE NEW POINTER
         B     EXIT                         ONLY 1 WTOR ALLOWED
         TITLE '- MSGRTN -  PROCESS #DOM PARAMETERS.'
*---------------------------------------------------------------------*
*        PROCESS THE #DOM PARAMETERS                                  *
*---------------------------------------------------------------------*
DOM00000 DS    0H
         TM    MSGFLAG,TSOUSER              CHECK FOR TSO USER
         BO    EXIT                         IF SO NO NEED TO DOM
         TM    0(R10),X'80'                 ANY SPECIFIC MSG
         BO    DOM00020                     IF NOT CONTINUE
DOM00010 DS    0H
         LA    R10,4(,R10)                  POINT TO NEXT PARM
         L     R2,0(R10)                    POINT TO MSG TO DOM
         DOM   MSG=(R2),REPLY=YES           DOM THIS MSGS
         TM    0(R10),X'80'                 ANY MORE MSGS TO DOM
         BNO   DOM00010                     IF SO LOOP TILL DONE
         B     EXIT                         IF NOT TERMINATE
DOM00020 DS    0H
         L     R2,DOMPTR                    LOAD LAST ADDRESS
         LA    R3,DOMLIST                   LOAD START ADDRESS
         CR    R2,R3                        ANY MSGS TO DOM
         BE    EXIT                         IF NOT TERMINATE
         SH    R2,=H'04'                    POINT TO LAST MSGID
         OI    0(R2),X'80'                  SET END OF DOMLIST
         LA    R3,DOMLIST                   POINT TO DOM LIST
         DOM   MSGLIST=(R3)                 DOM MESSAGE LIST
         XC    DOMLIST(60),DOMLIST          CLEAR THE LIST
         ST    R3,DOMPTR                    SAVE MSGID POINTER
         B     EXIT                         TERMINATE
         TITLE '- MSGRTN -  PROCESS #TPUT PARAMETERS.'
*---------------------------------------------------------------------*
*        PROCESS THE #TPUT PARAMETERS                                 *
*---------------------------------------------------------------------*
TPUT0000 DS    0H
         TM    MSGFLAG,TSOUSER              CHECK FOR TSO USER
         BNO   EXIT                         IF NOT TERMINATE
         LA    R10,8(,R10)                  SKIP USED PARMS
         LH    R7,MSGDCB+DCBLRECL-IHADCB    LOAD LRECL
         BCTR  R7,R0                        SUB CARRAGE CONTROL
TPUT0010 DS    0H
         CLC   LINENO,=F'24'                IS LINECOUNT <= 24
         BNH   TPUT0030                     IF SO PROCEED
         L     R2,PAGENO                    LOAD OLD PAGE COUNT
         LA    R2,1(,R2)                    ADD 1 TO COUNT
         ST    R2,PAGENO                    SAVE NEW PAGE COUNT
         CVD   R2,DOUBLE                    CONVERT TO DECIMAL
         L     R2,PAGEADDR                  POINT TO PAGE#
         MVC   0(4,R2),PAGEMASK             MOVE EDIT MASK
         ED    0(4,R2),DOUBLE+6             EDIT PAGE NUMBER
         TPUT  TITLES+1,(R7)                TITLE TO TERMINAL
         LA    R5,HEADINGS+1                POINT TO HEADING
         LA    R2,1                         SET LINECOUNT TO 1
         ST    R2,LINENO                    SAVE LINE COUNT
         ICM   R6,B'1111',HEADNOS           LOAD HEADING COUNT
         BZ    TPUT0030                     IF NO HEADING PROCEED
TPUT0020 DS    0H
         TPUT  (R5),(R7)                    TPUT HEADING
         LA    R5,256(,R5)                  POINT TO NEXT ONE
         LA    R2,1(R2)                     ADD 1 TO LINE COUNT
         BCT   R6,TPUT0020                  LOOP TILL ALL DONE
         ST    R2,LINENO                    SAVE LINE COUNT
TPUT0030 DS    0H
         L     R2,0(R10)                    LOAD TEXT ADDRESS
         SLR   R5,R5                        CLEAR REGISTER
         ICM   R5,B'0001',0(R2)             LOAD TEXT LENGTH
         BZ    TPUT0040                     CHECK FOR ZERO
         BCTR  R5,R0                        DECREMENT FOR EXEC
         EX    R5,EXECMVC1                  MVC LINE+1(?),1(R2)
TPUT0040 DS    0H
         TPUT  LINE+1,(R7)                  TPUT TEXT LINE
         MVI   LINE,C' '                    MOVE IN A BLANK
         MVC   LINE+1(255),LINE             PROPAGATE BLANKS
         L     R2,LINENO                    LOAD OLD LINECOUNT
         LA    R2,1(,R2)                    ADD 1 TO LINECOUNT
         ST    R2,LINENO                    SAVE NEW LINECOUNT
         TM    0(R10),X'80'                 CHECK FOR PARM END
         BO    EXIT                         IF ALL DONE QUIT
         LA    R10,4(,R10)                  SKIP TO NEXT PARM
         B     TPUT0010                     KEEP TPUTING
         TITLE '- MSGRTN -  PROCESS #WTOR PARAMETERS FOR TSO.'
*---------------------------------------------------------------------*
*        PROCESS THE #WTOR PARAMETERS FOR A TSO USER                  *
*---------------------------------------------------------------------*
PUTGET00 DS    0H
         L     R2,8(R10)                    LOAD WTOR LIST FORM
         SLR   R5,R5                        CLEAR REGISTER
         IC    R5,0(R2)                     LOAD REPLY LENGTH
         SLR   R6,R6                        CLEAR REGISTER
         ICM   R6,B'0111',1(R2)             LOAD REPLY ADDRESS
         L     R7,4(R2)                     GET ECB ADDR
         L     R2,12(R10)                   LOAD TEXT ADDRESS
         SLR   R3,R3                        CLEAR REGISTER
         ICM   R3,B'0001',0(R2)             INSERT TEXT LENGTH
         BZ    PUTGET40                     IF ZERO POST ECB
         BCTR  R3,R0                        DECREMENT FOR EXEC
         MVC   LINE(4),=C'*00 '             SIMULATE WTOR MESSAGE
         EX    R3,EXECMVC5                  MVC LINE+4(?),1(R2)
         LA    R3,5(,R3)                    RESTORE TEXT LENGTH#DD88103
         TPUT  LINE,(R3)                    TPUT MSG
PUTGET10 DS    0H
         MVI   LINE,C' '                    MOVE IN A BLANK
         MVC   LINE+1(255),LINE             PROPAGATE BLANKS
         TGET  LINE,256,EDIT,WAIT           GET RESPONSE FROM TERMINAL
         CR    R1,R5                        CHECK RESPONSE LENGTH
         BNH   PUTGET30                     IF ACCEPTABLE CONTINUE
         TPUT  TGETERR,L'TGETERR            TPUT ERROR MESSAGE
         B     PUTGET10                     RETRY TGET
PUTGET30 DS    0H
         OC    LINE(256),=256X'40'          CONVERT TO UPPER CASE
         BCTR  R5,R0                        DECREMENT FOR EXEC
         EX    R5,EXECMVC6                  MVC 0(?,R6),LINE
PUTGET40 DS    0H
         POST  (R7)                         STOP WAITING
         B     EXIT                         TERMINATE
         TITLE '- MSGRTN -  ERROR ROUTINES.'
*---------------------------------------------------------------------*
*        PROCESS ANY ERRORS                                           *
*---------------------------------------------------------------------*
ERROR010 DS    0H
         TM    MSGFLAG,TSOUSER              CHECK FOR TSO USER
         BO    TPUT0000                     IF SO ISSUE TPUT
         TM    MSGFLAG,PRERR10              CHECK FOR PREVIOUS ERROR
         BO    ERROR011                     IF SO NO ERROR MSG
         WTO   'IEC130I SYSPRINT DD STATEMENT MISSING.',ROUTCDE=11
ERROR011 DS    0H
         LA    R15,4                        SET RC = 4
         B     TERMINAT                     TERMINATE IMMEDIATELY
ERROR020 DS    0H
         LA    R15,8                        SET RC = 8
         B     TERMINAT                     TERMINATE IMMEDIATELY
ERROR030 DS    0H
         LA    R15,12                       SET RC = 12
         B     TERMINAT                     TERMINATE IMMEDIATELY
         TITLE '- MSGRTN -  TERMINATE MESSAGE ROUTINE.'
*---------------------------------------------------------------------*
*        TERMINATION ROUTINE                                          *
*---------------------------------------------------------------------*
EXIT     DS    0H
         LA    R15,0                        SET RC = 0
TERMINAT DS    0H
         #STOP RC=(R15)                     RETURN TO CALLER
         TITLE '- MSGRTN -  CONSTANTS AND STORAGE AREA.'
*---------------------------------------------------------------------*
*        CONSTANTS AND DSECTS                                         *
*---------------------------------------------------------------------*
TGETERR  DC  C'IEE700I REPLY 00 IGNORED; REPLY TOO LONG FOR REQUESTOR.'
*
PAGEMASK DC    XL4'40202021'                PAGE NUMBER EDIT MASK
*
EXECMVC1 MVC   LINE+1(*-*),1(R2)            **** EXECUTED ****
EXECMVC2 MVC   WTOTEXT(*-*),1(R2)           **** EXECUTED ****
EXECMVC3 MVC   TITLES+2(*-*),TITLES+1       **** EXECUTED ****
EXECMVC4 MVC   0(*-*,R7),1(R2)              **** EXECUTED ****
EXECMVC5 MVC   LINE+4(*-*),1(R2)            **** EXECUTED ****
EXECMVC6 MVC   0(*-*,R6),LINE               **** EXECUTED ****
*
DMYDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,EXLST=DMYDCB
DMYDCBL  EQU   *-DMYDCB                     DCB LENGTH
EXITLIST DS    0F
         DC    X'87',AL3(PRNTJFCB)          JFCB EXIT
PRNTJFCB DS    CL176                        JFCB AREA
         LTORG
*
         TITLE '- MSGRTN -  MESSAGE ROUTINE WORK AREA'
MSGWRK   DSECT
*
HEADNOS  DS    F                            HEADING COUNTER
DOUBLE   DS    D                            DOUBLEWORD WORK AREA
*
DOMPTR   DS    F                            FIRST AVAILABLE SLOT
DOMLIST  DS    15F                          15 MSGID SLOTS
DOMEND   EQU   DOMLIST+60                   END OF MSGID LIST
*
WTORL    DS    0F
         DC    AL1(*-*)                     REPLY LENGTH
         DC    AL3(*-*)                     REPLY ADDRESS
         DC    A(*-*)                       ECB ADDRESS
WTOL     DS    0F
         DC    AL2(*-*)                     REXT LENGTH
MCSFLAGS DC    B'0000000000000000'          MCS FLAGS
WTOTEXT  DC    CL124' '                     TEXT
DESCODES DC    B'0000000000000000'          DESCRIPTOR CODES
         DC    B'0000000000000000'          ROUTING CODES
*
TITLES   DS    CL256                        TITLE BUFFER
HEADINGS DS    6CL256                       6 HEADING SLOTS
LINE     DS    CL256                        PRINT LINE BUFFER
*
TITLEN   DS    H                            TITLE DATA LENGTH
PAGEADDR DS    F                            PAGE NUMBER ADDRESS
*
PAGENO   DS    F                            CURRENT PAGE NUMBER
LINENO   DS    F                            CURRENT LINE NUMBER
*
MSGLRECL DS    H                            USABLE RECORD LENGTH
*
MSGFLAG  DS    X                            FLAG
NOPRINT  EQU   B'00000001'                  NO OUTPUT DD CARD
TSOUSER  EQU   B'00000010'                  TSO USER
PRERR10  EQU   B'00000100'                  PREVIOUS PRINT ERROR
*
MSGDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,EXLST=MSGDCB
*
OPENL    OPEN  (MSGDCB,(OUTPUT)),MF=L
*
RDJFCBL  RDJFCB (MSGDCB),MF=L
*
MSGWKLEN EQU   *-MSGWRK
         POP   USING,PRINT                                     #DD01097
         TITLE '- MSGRTN -  ADDRESS SPACE CONTROL BLOCK'
         DSECT
         IHAASCB
         PUSH  USING,PRINT
         PRINT ON,GEN
         DROP  ,
         TITLE '- GETFMT5  -  FORMAT5.DSCB FORMATING SUBROUTINE'
GETFMT5  #START ,
         TITLE '- GETFMT5  -  INITIALIZATION'
*---------------------------------------------------------------------*
*        FIND THE DCB / DEB / UCB ADDRESSES                           *
*---------------------------------------------------------------------*
         L     R5,0(R1)                     >>---> DCB
         LA    R5,0(,R5)                    TURN OFF HIGH ORDER
         L     R1,DCBDEBAD-IHADCB(R5)       >>---> DEB
         ST    R1,DEBADDR                   SAVE DEB ADDRESS
         SLR   R2,R2               CLEAR BEFORE INSERT
         ICM   R2,B'0111',DEBSUCBA+1-DEBBASIC(R1)     >>---> UCB
         ST    R2,UCBADDR                   SAVE UCB ADDRESS
         TITLE '- GETFMT5  -  CALCULATE AND AQUIRE STORAGE SPACE'
*---------------------------------------------------------------------*
*        FIND THE NUMBER OF EXTENTS AND GET ENOUGH SPACE              *
*---------------------------------------------------------------------*
         LR    R0,R2                        >>---> UCB
         LA    R1,LSPACE                    >>---> RETURN BUFFER
         SVC   78                           ISSUE LSPACE SVC
         CLI   LSPEXTS+4,C'/'               MAKE SURE IT WORKED
         BNE   EXITRC8                      IF NOT TERMINATE
         PACK  DBLWORD,LSPEXTS(4)           PACK EXTENTS NUMBER
         CVB   R2,DBLWORD                   GET IN BINARY
         LR    R9,R2                        SAVE EXTENT COUNT
         MH    R2,=H'5'                     CALCULATE SPACE REQ
         LA    R2,4(,R2)                    ALLOW FOR COUNT FLD
         GETMAIN R,LV=(R2)                  GET FMT5 SPACE
         ST    R1,TABADDR                   SAVE START ADDRESS
         LR    R3,R1                        SAVE START ADDRESS
         LA    R2,0(R2,R1)                  POINT TO END ADDRESS
         ST    R2,ENDADDR                   SAVE END   ADDRESS
         ST    R9,0(R1)                     SAVE EXTENT COUNT
         TITLE '- GETFMT5  -  VTOC TYPE DETERMINATION'
*---------------------------------------------------------------------*
*        DETERMINE IF THE VOLUME IS INDEXED OR NOT                    *
*---------------------------------------------------------------------*
         L     R6,UCBADDR                   LOAD UCB ADDRESS
         PUSH  ACONTROL
         ACONTROL FLAG(NOPAGE0)
         CVAFTST UCB=(R6)                   CHECK IF INDEXED
         POP   ACONTROL
         B     *+4(R15)                     BRANCH ACCORDINGLY
         B     SPACE040                     DF/DS NOT ON SYSTEM
         B     SPACE040                     VTOC IS NOT INDEXED
         B     SPACE020                     VTOC IS INDEXED
         B     EXITRC8                      VOLUME NOT MOUNTED
         B     EXITRC8                      UCB NOT DASD DEVT
         TITLE '- GETFMT5  -  BUILD INDEXED VTOC FREESPACE TABLE'
*---------------------------------------------------------------------*
*        PROCESS ANY VOLUMES WITH INDEXED VTOCS                       *
*---------------------------------------------------------------------*
SPACE020 DS    0H
         LTR   R9,R9                        CHECK EXTENT COUNT
         BZ    EXITRC0                      IF NONE TERMINATE
         LA    R3,4(,R3)                    SKIP LENGTH
         MVI   F5EXTNT,X'01'                ONLY 1 AT A TIME
         LA    R4,F5EXTNT                   >>---> F5 BUFFER
         L     R6,DEBADDR                   >>---> DEB
SPACE030 DS    0H
         CVAFDSM ACCESS=MAPDATA,            GET ALL POSSIBLE           X
               MAP=VOLUME,                      FMT5'S                 X
               EXTENTS=(R4),                                           X
               DEB=(R6),                                               X
               COUNT=NO,                                               X
               BRANCH=NO
         MVC   0(5,R3),F5EXTNT+1            SAVE THIS EXTENT
         LA    R3,5(,R3)                    ADVANCE POINTER
         BCT   R9,SPACE030                  FILL THE ENTIRE TBL
         B     EXITRC0                      WHEN ALL DONE QUIT
         TITLE '- GETFMT5  -  BUILD NON-INDEXED VTOC FREESPACE TABLE'
*---------------------------------------------------------------------*
*        PROCESS ANY VOLUMES WITH NON-INDEXED VTOCS                   *
*---------------------------------------------------------------------*
SPACE040 DS    0H
         XC    READF5,READF5                CLEAR THE ECB
         READ  READF5,SF,(R5),FORMAT4,MF=(E,READFMT5)
         CHECK READF5                       WAIT FOR I/O TO END
         NOTE  (R5)                         GET FMT4 TTR0
         ST    R1,VTOCTTR                   SAVE FOR LATER
         MVC   FULLWORD,=X'00000200'        START AT FIRST FMT5
         LA    R7,FORMAT5                   POINT TO BUFFER
         LA    R3,4(,R3)                    SKIP COUNT
SPACE050 DS    0H
         C     R3,ENDADDR                   CHECK FOR END
         BE    SPACE080                     IF SO QUIT
         POINT (R5),FULLWORD                POINT TO FMT5 BLOCK
         XC    READF5,READF5                CLEAR ECB
         READ  READF5,SF,(R5),FORMAT5,MF=(E,READFMT5)
         CHECK READF5                       WAIT FOR I/O TO END
         MVC   0(5,R3),FORMAT5+DS5AVEXT-IECSDSL5
         LA    R3,5(,R3)                    ADVANCE POINTER
         LA    R9,FORMAT5+DS5EXTAV-IECSDSL5 POINT TO FORMAT5
         LA    R10,7                        LOAD LOOP COUNT
SPACE060 DS    0H
         C     R3,ENDADDR                   CHECK FOR END
         BE    SPACE080                     IF SO QUIT
         MVC   0(5,R3),0(R9)                MOVE AN EXTENT
         LA    R3,5(,R3)                    ADVANCE POINTER
         LA    R9,5(,R9)                    ADVANCE POINTER
         BCT   R10,SPACE060
         LA    R9,FORMAT5+DS5MAVET-IECSDSL5 POINT TO FORMAT5
         LA    R10,18                       LOAD LOOP COUNT
SPACE070 DS    0H
         C     R3,ENDADDR                   CHECK FOR END
         BE    SPACE080                     IF SO QUIT
         MVC   0(5,R3),0(R9)                MOVE AN EXTENT
         LA    R3,5(,R3)                    ADVANCE POINTER
         LA    R9,5(,R9)                    ADVANCE POINTER
         BCT   R10,SPACE070                 MOVE ALL EXTENTS
         SLR   R1,R1                        CLEAR REGISTER
         ICM   R1,B'0011',FORMAT4+44+DS4VTOCE+2-IECSDSL4
         MH    R1,FORMAT4+44+DS4DEVSZ+2-IECSDSL4
         SLR   R0,R0                        CLEAR REGISTER
         ICM   R0,B'0011',FORMAT4+44+DS4VTOCE+4-IECSDSL4
         AR    R1,R0                        CALC VTOC TT
         SLR   R2,R2                        CLEAR REGISTER
         ICM   R2,B'0011',FORMAT5+DS5PTRDS-IECSDSL5
         MH    R2,FORMAT4+44+DS4DEVSZ+2-IECSDSL4
         SLR   R0,R0                        CLEAR REGISTER
         ICM   R0,B'0011',FORMAT5+DS5PTRDS+2-IECSDSL5
         AR    R2,R0                        CALC FMT4 TT
         SR    R2,R1                        CALC DIFFERENCE
         STH   R2,FULLWORD                  SAVE RELATIVE TT
         MVC   FULLWORD+2(1),FORMAT5+DS5PTRDS+4-IECSDSL5
         MVI   FULLWORD+3,X'00'             MAKE SURE ZEROS
         CLC   FULLWORD,=F'00'              CHECK FOR ZEROS
         BNE   SPACE050                     IF NOT KEEP LOOPING
SPACE080 DS    0H
         POINT (R5),VTOCTTR                 POINT AT THE FMT4
         B     EXITRC0                      TERMINATE NORMALLY
         TITLE '- GETFMT5  -  TERMINATION ROUTINES'
*---------------------------------------------------------------------*
*        TERMINATE GIVING THE APPROPRIATE RETURN CODE                 *
*---------------------------------------------------------------------*
EXITRC8  DS    0H
         LA    R15,8                        SET RC = 8
         B     SPACEND                      TERMINATE
EXITRC4  DS    0H
         LA    R15,4                        SET RC = 4
         B     SPACEND                      TERMINATE
EXITRC0  DS    0H
         L     R1,TABADDR                   LOAD TABLE ADDRESS
         LA    R15,0                        SET RC = 0
SPACEND  DS    0H
         #STOP RC=(R15),R1=R1

*---------------------------------------------------------------------*
*                         CONSTANTS                                   *
*---------------------------------------------------------------------*
READFMT5 READ  READF5,SF,0,0,MF=L
F5EXTNT  DS    XL1,CL5                      LENGTH + F5INFO
DBLWORD  DS    D
FULLWORD DS    F
VTOCTTR  DS    F
DEBADDR  DS    F
UCBADDR  DS    F
TABADDR  DS    F
ENDADDR  DS    F
LSPACE   DS    0CL30
         DC    CL6'SPACE='
LSPTCYL  DC    CL4' ',CL1' '
LSPTTRK  DC    CL4' ',CL1' '
LSPEXTS  DC    CL4' ',CL1' '
LSPLCYL  DC    CL4' ',CL1' '
LSPLTRK  DC    CL4' '
FORMAT4  DS    CL140
FORMAT5  DS    CL140
         LTORG
         POP   PRINT,USING                                     #DD01097

         PUSH  USING,PRINT
         PRINT ON,GEN
         DROP  ,
         TITLE '- SORTRTN  -  TABLE SORT SUBROUTINE'
SORTRTN  #START WKDSECT=SORTWORK
*---------------------------------------------------------------------*
*        PROCESS THE SORT PARAMETERS                                  *
*---------------------------------------------------------------------*
         LM    R2,R7,0(R1)                  LOAD PARAMETERS
         LH    R2,0(R2)                     LOAD ENTRY COUNT
         STH   R2,ENTRYCNT                  SAVE ENTRY COUNT
         LH    R3,0(R3)                     LOAD ENTRY LENGTH
         STH   R3,ENTRYLEN                  SAVE ENTRY LENGTH
         LH    R4,0(R4)                     LOAD KEY LENGTH
         STH   R4,KEYLEN                    SAVE KEY LENGTH
         MVC   SEQUENCE(1),0(R5)            SAVE SORT SEQUENCE
         ST    R6,STRTADDR                  SAVE START ADDRESS
         NI    STRTADDR,X'7F'               TURN OFF HIGH BIT
         ST    R7,SAVER7                    SAVE OFFSET
         SLR   R7,R7                        CLEAR REGISTER
         TM    16(R1),X'80'                 CHECK FOR OFFSET PARM
         BO    SORT000                      IF NONE SKIP LOAD
         L     R7,SAVER7                    RESTORE OFFSET
         LH    R7,0(R7)                     LOAD KEY OFFSET
SORT000  DS    0H
         STH   R7,OFFSET                    SAVE OFFSET
         LR    R0,R3                        LOAD ENTRY LENGTH
         GETMAIN R,LV=(0)                   GET TEMPORARY STORAGE
         ST    R1,SAVEAREA                  SAVE WORKAREA ADDRESS
         NI    SAVEAREA,X'7F'               TURN OFF HIGH BIT
         CLC   ENTRYCNT(2),=H'2'            CHECK ENTRY COUNT
         BL    SORTRC0                      IF 0 OR 1 FORGET SORT
         CLC   ENTRYLEN(2),=H'00'           CHECK ELEMENT LENGTH
         BE    SORTRC4                      IF 0 ERROR
         CLC   KEYLEN(2),=H'00'             CHECK KEY LENGTH
         BE    SORTRC8                      IF 0 ERROR
         CLC   KEYLEN(2),ENTRYLEN           COMPARE KEYLEN / ENTRYLEN
         BH    SORTRC12                     IF HIGHER ERROR
         CLC   OFFSET(2),ENTRYLEN           COMPARE OFFSET / ENTRYLEN
         BH    SORTRC16                     IF GREATER ERROR
         LH    R0,OFFSET                    LOAD OFFSET
         AH    R0,KEYLEN                    ADD KEYLENGTH TO OFFSET
         CH    R0,ENTRYLEN                  COMPARE TOTAL / ENTRYLEN
         BH    SORTRC20                     IF GREATER ERROR
         CLI   SEQUENCE,C'D'                CHECK FOR DESCENDING
         BNE   SORT010                      IF NOT DEFAULT TO ASCENDING
         LA    R5,13                        SETUP FOR CONDITIONAL BRNCH
         B     SORT020                      SKIP ASCENDING SETUP
SORT010  LA    R5,11                        MUST BE ASCENDING
SORT020  SLL   R5,4                         SHIFT TO BITS 28-31
         ST    R5,BRSWITCH                  SAVE BRANCHING SWITCH
         NI    BRSWITCH,X'7F'               TURN OFF HIGH BIT
         MVI   SWITCH,0                     SEQUENCE SWITCH OFF
         LH    R8,ENTRYLEN                  LOAD ENTRY LENGTH
         LH    R9,ENTRYCNT                  LOAD RECORD COUNT
         BCTR  R9,R0                        SUBTRACT 1 FROM COUNT
         MH    R9,ENTRYLEN                  CALCULATE LENGTH OF TABLE
         LA    R9,0(R9,R6)                  POINT TO LAST ENTRY
SORT030  L     R7,STRTADDR                  POINT TO FIRST ENTRY
SORT040  BXH   R7,R8,SORT060                LOOP TILL END OF TABLE
         LR    R2,R7                        LOAD THIS ENTRY ADDRESS
         SR    R2,R8                        BACKUP TO PREVIOUS ENTRY
         AH    R2,OFFSET                    ADD OFFSET
         LH    R3,KEYLEN                    LOAD KEY LENGTH
         LR    R4,R7                        LOAD THIS ENTRY ADDRESS
         AH    R4,OFFSET                    ADD OFFSET
         LH    R5,KEYLEN                    LOAD KEY LENGTH
         CLCL  R4,R2                        COMPARE CURRENT TO PREVIOUS
         L     R5,BRSWITCH                  LOAD BRANCHING SWITCH
         EX    R5,SORT050                   BR ACCORDING TO SEQUENCE
         MVI   SWITCH,1                     SEQUENCE SWITCH ON
         LR    R2,R7                        LOAD THIS ENTRY ADDRESS
         LH    R3,ENTRYLEN                  LOAD ENTRY LENGTH
         L     R4,SAVEAREA                  LOAD SAVE AREA ADDRESS
         LH    R5,ENTRYLEN                  LOAD ENTRY LENGTH
         MVCL  R4,R2                        MOVE ENTRY TO SAVE AREA
         LR    R2,R7                        LOAD THIS ENTRY ADDRESS
         SH    R2,ENTRYLEN                  BACKUP TO PREVIOUS
         LH    R3,ENTRYLEN                  LOAD ENTRY LENGTH
         LR    R4,R7                        LOAD THIS ENTRY ADDRESS
         LH    R5,ENTRYLEN                  LOAD ENTRY LENGTH
         MVCL  R4,R2                        MOVE PREVIOUS TO ENTRY
         L     R2,SAVEAREA                  LOAD SAVE AREA ADDRESS
         LH    R3,ENTRYLEN                  LOAD ENTRY LENGTH
         LR    R4,R7                        LOAD THIS ENTRY ADDRESS
         SH    R4,ENTRYLEN                  BACKUP TO PREVIOUS
         LH    R5,ENTRYLEN                  LOAD ENTRY LENGTH
         MVCL  R4,R2                        MOVE SAVE AREA TO PREVIOUS
         B     SORT040                      PROCEED WITH LOOP
*
SORT050  NOP   SORT040                      **** EXECUTED ****
*
SORT060  CLI   SWITCH,0                     TEST SEQUENCE SWITCH
         BE    SORTRC0                      IF ZERO SORT COMPLETE
         MVI   SWITCH,0                     SEQUENCE SWITCH OFF
         B     SORT030                      START OVER AGAIN
SORTRC0  LA    R15,0                        SET RC = 0
         B     SORTEND                      TERMINATE
SORTRC4  LA    R15,4                        SET RC = 4
         B     SORTEND                      TERMINATE
SORTRC8  LA    R15,8                        SET RC = 8
         B     SORTEND                      TERMINATE
SORTRC12 LA    R15,12                       SET RC = 12
         B     SORTEND                      TERMINATE
SORTRC16 LA    R15,16                       SET RC = 16
         B     SORTEND                      TERMINATE
SORTRC20 LA    R15,20                       SET RC = 20
SORTEND  #STOP RC=(R15)                     TERMINATE
         #STARTWA ,
ENTRYCNT DS    H                            NUMBER OF ENTRIES
ENTRYLEN DS    H                            LENGTH OF EACH ENTRY
KEYLEN   DS    H                            LENGTH OF SORT KEY
SEQUENCE DS    C                            SEQUENCE (A/D)
STRTADDR DS    F                            TABLE START ADDRESS
OFFSET   DS    H                            KEY OFFSET INTO TABLE
BRSWITCH DS    F                            BRANCHING SWITCH FOR A/D
SAVEAREA DS    F                            TEMPORARY ENTRY ADDRESS
SWITCH   DS    C                            SORT SWITCH
SAVER7   DS    F                            SEQUENCE SAVE AREA
         #STOPWA ,
         #DSECTS PSA
         POP   PRINT,USING                                     #DD01097
         END   ,                            *
