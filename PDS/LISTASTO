LISTAST  TITLE 'LIST ALLOCATION STATUS'
*---------------------------------------------------------------------*
*                                                                     *
*        THIS PROGRAM GENERATES DATA SIMILAR TO THE LISTA COMMAND     *
*                                                                     *
*        SYNTAX:                                                      *
*                                                                     *
*              LISTAST                                                *
*           OR LISTAST DDNAME                                         *
*           OR LISTAST PREFIX*                                        *
*                                                                     *
*---------------------------------------------------------------------*

LISTAST  #START BASE=(R12),SPLEVEL=2,AMODE=CAP31,RMODE=ANY,            *
               WKDSECT=LISTWORK,LOC=BELOW,                             *
               APARS=,COPY=YES,COPYYR=1999,                    #DD99183*
               REG1=R10,USING=(CPPL,R10)

*---------------------------------------------------------------------*
*                                                                     *
*        FORMAT REQUIRED CONTROL BLOCKS                               *
*                                                                     *
*---------------------------------------------------------------------*

         LA    R1,WRKIOPL          LOAD IOPL ADDRESS
         USING IOPL,R1
         MVC   IOPLUPT,CPPLUPT     INSERT UPT  ADDRESS
         MVC   IOPLECT,CPPLECT     INSERT ECT  ADDRESS
         LA    R0,WRKECB           LOAD ECB  ADDRESS
         ST    R0,IOPLECB

         LA    R1,WRKPPL           LOAD PPL ADDRESS
         USING PPL,R1
         MVC   PPLUPT,CPPLUPT      INSERT UPT  ADDRESS
         MVC   PPLECT,CPPLECT      INSERT ECT  ADDRESS
         LA    R0,WRKECB           LOAD ECB ADDRESS
         ST    R0,PPLECB
         MVC   PPLPCL,=A(PCL)      INSERT PCL  ADDRESS
         MVC   PPLCBUF,CPPLCBUF    INSERT CBUF ADDRESS
         LA    R0,PDLADDR          LOAD PDL ANSWER ADDRESS
         ST    R0,PPLANS
         DROP  R1

*---------------------------------------------------------------------*
*                                                                     *
*        PARSE THE COMMAND BUFFER                                     *
*                                                                     *
*---------------------------------------------------------------------*

         XC    WRKECB,WRKECB
         CALLTSSR EP=IKJPARS,                                          *
               MF=(E,WRKPPL)
         LTR   R15,R15             CHECK PARSE RETURN CODE
         BZ    LISTA100            B. IF SUCCESSFUL

         #SETRC (R15)              SET RETURN CODE

         ST    R15,GFRCODE         INSERT RETURN CODE
         MVC   GFCALLID,=AL2(GFPARSE)
         ST    R10,GFCPPLP         INSERT CPPL ADDRESS
         LA    R0,WRKECB
         ST    R0,GFECBP           INSERT ECB  ADDRESS
         XC    WRKECB,WRKECB
         LA    R0,GFPARMS          LOAD IKJEFF19 PLIST ADDRESS
         ST    R0,PARMADDR
         LA    R1,PARMADDR         LOAD PLIST POINTER ADDRESS
         LINK  EP=IKJEFF19         CALL GENERAL FAIL ROUTINE
         B     LISTA900            TERMINATE

*---------------------------------------------------------------------*
*                                                                     *
*        CHECK IF USER SPECIFIED A DDNAME/DDNAME PREFIX               *
*                                                                     *
*---------------------------------------------------------------------*

LISTA100 DS    0H
         L     R1,PDLADDR          LOAD PDL  BUFFER ADDRESS
         USING IKJPARMD,R1
         SLR   R2,R2
         ICM   R2,3,PDDNAME+4      LOAD DDNAME LENGTH
         BZ    LISTA200            B. IF LENGTH ZERO
         ICM   R3,15,PDDNAME       LOAD DDNAME ADDRESS
         BZ    LISTA200            B. IF NOT SPECIFIED
         TM    PDDNAME+6,1         CHECK FOR "GENERIC" DDNAME
         BO    *+6                 B. IF YES
         BCTR  R2,0                DECREMENT NON-GENERIC LENGTH
         MVC   DDNAME,BLANKS
         #EXEC R2,MVC,DDNAME(*-*),0(R3)
         OI    FLAGBYTE,$DDNAME    INDICATE DDNAME SPECIFIED
         MVC   DDNAMEL,=AL2(8)     SET DEFAULT LENGTH
         TM    PDDNAME+6,1         CHECK IF DDNAME IS GENERIC
         BNO   LISTA200            B. IF NOT
         OI    FLAGBYTE,$GENERIC   INDICATE GENERIC DDNAME
         STH   R2,DDNAMEL          SAVE DDNAME LENGTH
         DROP  R1

*---------------------------------------------------------------------*
*                                                                     *
*        FIND THE START OF THE DSAB CHAIN                             *
*                                                                     *
*---------------------------------------------------------------------*

LISTA200 DS    0H
         USING PSA,0
         L     R8,PSATOLD          LOAD TCB  ADDRESS
         USING TCB,R8
         L     R8,TCBJSCB          LOAD JSCB ADDRESS
         USING IEZJSCB,R8
         L     R8,JSCBACT          LOAD ACTIVE JSCB ADDRESS
         L     R8,JSCDSABQ         LOAD QDB  ADDRESS
         USING QDB,R8
         ICM   R8,15,QDBFELMP      LOAD DSAB ADDRESS
         BZ    LISTA900            B. IF NONE EXISTS
         USING DSABID,R8

*---------------------------------------------------------------------*
*                                                                     *
*        DISPLAY INFORMATION ON EACH ALLOCATED DATASET                *
*                                                                     *
*---------------------------------------------------------------------*

LISTA300 DS    0H
         MVC   MSG1+4(MSG1LEN),BLANKS

         L     R7,DSABSIOT         LOAD SIOT ADDRESS
         USING INDMSIOT,R7

         TM    FLAGBYTE,$DDNAME    CHECK IF USER SPECIFIED A DDNAME
         BNO   LISTA500            B. IF NOT
         TM    FLAGBYTE,$FOUND2    CHECK IF CURRENT DDNAME MATCHES
         BNO   LISTA400
         CLC   SCTDDNAM,BLANKS     CHECK FOR CONCATENATION
         BE    LISTA500            B. IF YES

LISTA400 DS    0H
         LH    R1,DDNAMEL          LOAD LENGTH OF DDNAME/PREFIX
         #EXEC -R1,CLC,SCTDDNAM(*-*),DDNAME
         BNE   LISTA700            B. IF NOT
         OI    FLAGBYTE,$FOUND1    INDICATE DDNAME HAS BEEN FOUND
         OI    FLAGBYTE,$FOUND2

LISTA500 DS    0H
         MVC   MSG1I1,SCTDDNAM

         L     R2,DSABTIOT         LOAD TIOT ADDRESS
         USING TIOENTRY,R2
         MVC   MSG1I2,=CL3'TRM'
         TM    TIOELINK,TIOTTERM   CHECK FOR "TERMINAL"
         BO    LISTA600            B. IF YES
         MVC   MSG1I2,=CL3'SSD'
         TM    TIOELINK,TIOESSDS   CHECK FOR "SUBSYSTEM DATASET"
         BO    LISTA600            B. IF YES
         MVC   MSG1I2,=CL3'DMY'
         TM    SCTSBYT1,SCTDUMMY   CHECK FOR "DUMMY" FILE
         BO    LISTA600            B. IF YES

         L     R2,SJFCBPTR         LOAD JFCB ADDRESS
         USING INFMJFCB,R2
         MVC   MSG1I4,JFCBDSNM     INSERT DATASET NAME
         MVC   MSG1I2,=CL3'VIO'
         TM    JFCFLGS1,JFCVRDS    CHECK FOR "VIO DATASET"
         BO    LISTA600            B. IF YES
         MVC   MSG1I2,=CL3'NEW'
         TM    JFCBFLG2,JFCMODNW   CHECK FOR "NEW/MOD" FILE
         BO    LISTA600            B. IF YES
         MVC   MSG1I2,=CL3'SHR'
         TM    JFCBIND2,JFCSHARE   CHECK FOR "SHR" FILE
         BO    LISTA600            B. IF YES
         MVC   MSG1I2,=CL3'NEW'
         TM    JFCBIND2,JFCNEW     CHECK FOR "NEW" FILE
         BO    LISTA600            B. IF YES
         MVC   MSG1I2,=CL3'MOD'
         TM    JFCBIND2,JFCMOD     CHECK FOR "MOD" FILE
         BO    LISTA600            B. IF YES
         MVC   MSG1I2,=CL3'OLD'
         TM    JFCBIND2,JFCOLD     CHECK FOR "OLD" FILE
         BO    LISTA600            B. IF YES
         MVC   MSG1I2,=CL3'???'

*---------------------------------------------------------------------*
*                                                                     *
*        ISSUE MESSAGE TO TERMINAL                                    *
*                                                                     *
*---------------------------------------------------------------------*

LISTA600 DS    0H
         #MODE 24                  ENTER 24 BIT ADDRESSING MODE
         XC    WRKECB,WRKECB
         PUTLINE PARM=PUTLINEL,                                        *
               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *
               MF=(E,WRKIOPL)
         #MODE 31                  RETURN TO 31 BIT ADDRESSING MODE
         B     LISTA800            CONTINUE
LISTA700 DS    0H
         NI    FLAGBYTE,255-$FOUND2
LISTA800 DS    0H
         ICM   R8,15,DSABFCHN      LOAD NEXT DSAB ADDRESS
         BNZ   LISTA300            B. IF ANOTHER EXISTS

*---------------------------------------------------------------------*
*                                                                     *
*        TERMINATE                                                    *
*                                                                     *
*---------------------------------------------------------------------*

LISTA900 DS    0H
         TM    FLAGBYTE,$DDNAME    CHECK IF USER SPECIFIED A DDNAME
         BNO   LISTAXIT            B. IF NOT
         TM    FLAGBYTE,$FOUND1    CHECK IF DDNAME WAS FOUND
         BO    LISTAXIT            B. IF YES
         XC    WRKECB,WRKECB
         MVC   MSG2I1,DDNAME       INSERT DDNAME INTO MESSAGE
         #MODE 24                  ENTER 24 BIT ADDRESSING MODE
         PUTLINE PARM=PUTLINEL,                                        *
               OUTPUT=(MSG2,TERM,SINGLE,DATA),                         *
               MF=(E,WRKIOPL)
         #MODE 31                  RETURN TO 31 BIT ADDRESSING MODE

LISTAXIT #STOP ,                   TERMINATE

*---------------------------------------------------------------------*
*                                                                     *
*        DDNAME VALIDITY CHECK - CHECK FOR "DDN*"                     *
*                                                                     *
*---------------------------------------------------------------------*

         PUSH  USING
VALDDNAM DS    0H
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         XC    16(4,R13),16(R13)   SET RETURN CODE TO ZERO
         LR    R12,R15             SETUP EXIT'S BASE REGISTER
         USING VALDDNAM,R12
         L     R5,0(,R1)           LOAD PDE ADDRESS

         NI    6(R5),255-1         TURN OFF "ASTERISK" FLAG
         L     R4,0(,R5)           LOAD DDNAME ADDRESS
         LH    R3,4(,R5)           LOAD DDNAME LENGTH
         LA    R1,VALDDTAB         LOAD TRANSLATE TABLE ADDRESS
         #EXEC -R3,TRT,0(*-*,R4),0(R1)
         BZ    VALDEXIT            B. IF NO ASTERISKS FOUND
         OI    6(R5),1             TURN ON "ASTERISK" FLAG
         SR    R1,R4               RE-CALCULATE LENGTH WITHOUT ASTERISK
         STH   R1,4(,R5)           SAVE NEW LENGTH IN PDE
VALDEXIT DS    0H                  R1 -> STORAGE OBTAINED
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER

VALDDTAB DC    256X'00'
         ORG   VALDDTAB+C'*'
         DC    C'*'                FIND THE FIRST ASTERISK
         ORG   ,
         POP   USING

*---------------------------------------------------------------------*
*                                                                     *
*        WORK AREA & DSECTS                                           *
*                                                                     *
*---------------------------------------------------------------------*

BLANKS   DC    256C' '             LOTS OF BLANKS
MSG1     #MSG  'DDDDDDDD ??? *XXXXXXXXX+XXXXXXXXX+XXXXXXXXX+XXXXXXXXX+X*
               XXX'
MSG1LEN  EQU   *-MSG1-4            LENGTH OF MESSAGE TEXT AREA
MSG1I1   EQU   MSG1+4+00,8         INSERT 1 ADDRESS & OFFSET
MSG1I2   EQU   MSG1+4+09,3         INSERT 2 ADDRESS & OFFSET
MSG1I3   EQU   MSG1+4+13,1         INSERT 3 ADDRESS & OFFSET
MSG1I4   EQU   MSG1+4+14,44        INSERT 4 ADDRESS & OFFSET
MSG2     #MSG  'FILE XXXXXXXX NOT FOUND'
MSG2I1   EQU   MSG2+4+05,8         INSERT 1 ADDRESS & OFFSET
         #STARTWA ,
         IKJEFFGF GFDSECT=NO       IKJEFF19 PARAMETER LIST
DDNAME   DS    CL8                 SPECIFIED DDNAME
DDNAMEL  DS    H                   SPECIFIED DDNAME LENGTH
FLAGBYTE DS    X                   GENERAL PURPOSE FLAG BYTE
$DDNAME  EQU   BIT0                DDNAME HAS BEEN SPECIFIED
$FOUND1  EQU   BIT1                DDNAME HAS BEEN FOUND
$FOUND2  EQU   BIT2                AT LEAST 1 LINE HAS BEEN PRINTED
$GENERIC EQU   BIT3                DDNAME IS A GENERIC PREFIX
PARMADDR DS    F                   REGISTER 1 SAVE AREA
PDLADDR  DS    F                   PDL POINTER
PUTLINEL PUTLINE MF=L              PUTLINE PARAMETER LIST
WRKECB   DS    F                   ECB
WRKIOPL  DS    XL(IOPLLEN)         IOPL
WRKPPL   DS    XL(PPLLEN)          PARSE PARAMETER LIST
         #STOPWA ,

         PRINT NOGEN
PCL      IKJPARM ,
PDDNAME  IKJIDENT 'DDNAME',VALIDCK=VALDDNAM,                           *
               FIRST=ANY,OTHER=ANY,MAXLNTH=8,                          *
               HELP='NAME OF CURRENTLY ALLOCATED DDNAME'
         IKJENDP ,
         PRINT GEN

         #DSECTS CVT,DSAB,JFCB,JSCB,PSA,PSCB,QDB,SIOT,TCB,TIOT,TSO
         IHAQDB ,
         END   ,
